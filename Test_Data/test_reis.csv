,Unnamed: 0,Unnamed: 0.1,author,comments,cve_id,cwe_id,dataset,date,ext_files,files,github,lang,language,manually_label,message,parents,project,score,sha,summary,vuln_type,vulnerable,changes,commit,committer,tree,clean_message,keyword_label,keyword
15,15,20,Richard Basch,{},CVE-2012-1013,,BIGVUL,"05/29/2012, 18:07:03",{'c'},"{'src/lib/kadm5/srv/svr_principal.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/c5be6209311d4a8f10fda37d0d3f876c1b33b77b,{'C/C++'},,positive,"Null pointer deref in kadmind [CVE-2012-1013]

The fix for #6626 could cause kadmind to dereference a null pointer if
a create-principal request contains no password but does contain the
KRB5_KDB_DISALLOW_ALL_TIX flag (e.g. ""addprinc -randkey -allow_tix
name"").  Only clients authorized to create principals can trigger the
bug.  Fix the bug by testing for a null password in check_1_6_dummy.

CVSSv2 vector: AV:N/AC:M/Au:S/C:N/I:N/A:P/E:H/RL:O/RC:C

[ghudson@mit.edu: Minor style change and commit message]

ticket: 7152
target_version: 1.10.2
tags: pullup",{'eebe17cce0dfaaeb403fe97c6e2048dda32226f1'},https://github.com/krb5/krb5,4.0,c5be6209311d4a8f10fda37d0d3f876c1b33b77b,"The check_1_6_dummy function in lib/kadm5/srv/svr_principal.c in kadmind in MIT Kerberos 5 (aka krb5) 1.8.x, 1.9.x, and 1.10.x before 1.10.2 allows remote authenticated administrators to cause a denial of service (NULL pointer dereference and daemon crash) via a KRB5_KDB_DISALLOW_ALL_TIX create request that lacks a password.",DoS ,yes,,,,,"Null pointer deref in kadmind.
The fix for 6626 could cause kadmind to dereference a null pointer if a create principal request contains no password but does contain the KRB5 KDB DISALLOW ALL TIX flag e.g.
addprinc randkey allow tix name.
Only clients authorized to create principals can trigger the bug.
Fix the bug by testing for a null password in check 1 6 dummy.
CVSSv2 vector AV N AC M Au S C N I N A P E H RL O RC C.
E mail Minor style change and commit message.
ticket 7152.
target version 1.10.2.
tags pullup.",1.0,"['password', 'password']"
19,19,24,Tom Yu,{},CVE-2013-6800,,BIGVUL,"11/04/2013, 20:49:03",{'c'},"{'src/kdc/main.c': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/c2ccf4197f697c4ff143b8a786acdd875e70a89d,{'C/C++'},,positive,"Multi-realm KDC null deref [CVE-2013-1418]

If a KDC serves multiple realms, certain requests can cause
setup_server_realm() to dereference a null pointer, crashing the KDC.

CVSSv2: AV:N/AC:M/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C

A related but more minor vulnerability requires authentication to
exploit, and is only present if a third-party KDC database module can
dereference a null pointer under certain conditions.

(back ported from commit 5d2d9a1abe46a2c1a8614d4672d08d9d30a5f8bf)

ticket: 7757 (new)
version_fixed: 1.10.7
status: resolved",{'054d3ae1284d9e29ba93e2fa7a26bf4d75c75ff0'},https://github.com/krb5/krb5,4.0,c2ccf4197f697c4ff143b8a786acdd875e70a89d,"An unspecified third-party database module for the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) 1.10.x allows remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) via a crafted request, a different vulnerability than CVE-2013-1418.",DoS ,yes,,,,,"Multi realm KDC null deref.
If a KDC serves multiple realms certain requests can cause setup server realm to dereference a null pointer crashing the KDC.
CVSSv2 AV N AC M Au N C N I N A P E POC RL OF RC C.
A related but more minor vulnerability requires authentication to exploit and is only present if a third party KDC database module can dereference a null pointer under certain conditions.
back ported from commit.
ticket 7757 new.
version fixed 1.10.7.
status resolved.",1.0,"['null deref', 'POC', 'authentication', 'exploit']"
35,35,41,Tom Yu,{},CVE-2013-1417,CWE-20,BIGVUL,"06/21/2013, 21:58:25",{'c'},"{'src/kdc/do_tgs_req.c': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/4c023ba43c16396f0d199e2df1cfa59b88b62acc,{'C/C++'},,positive,"KDC null deref due to referrals [CVE-2013-1417]

An authenticated remote client can cause a KDC to crash by making a
valid TGS-REQ to a KDC serving a realm with a single-component name.
The process_tgs_req() function dereferences a null pointer because an
unusual failure condition causes a helper function to return success.

While attempting to provide cross-realm referrals for host-based
service principals, the find_referral_tgs() function could return a
TGS principal for a zero-length realm name (indicating that the
hostname in the service principal has no known realm associated with
it).

Subsequently, the find_alternate_tgs() function would attempt to
construct a path to this empty-string realm, and return success along
with a null pointer in its output parameter.  This happens because
krb5_walk_realm_tree() returns a list of length one when it attempts
to construct a transit path between a single-component realm and the
empty-string realm.  This list causes a loop in find_alternate_tgs()
to iterate over zero elements, resulting in the unexpected output of a
null pointer, which process_tgs_req() proceeds to dereference because
there is no error condition.

Add an error condition to find_referral_tgs() when
krb5_get_host_realm() returns an empty realm name.  Also add an error
condition to find_alternate_tgs() to handle the length-one output from
krb5_walk_realm_tree().

The vulnerable configuration is not likely to arise in practice.
(Realm names that have a single component are likely to be test
realms.)  Releases prior to krb5-1.11 are not vulnerable.

Thanks to Sol Jerome for reporting this problem.

CVSSv2: AV:N/AC:M/Au:S/C:N/I:N/A:P/E:H/RL:O/RC:C

(cherry picked from commit 3c7f1c21ffaaf6c90f1045f0f5440303c766acc0)

ticket: 7668
version_fixed: 1.11.4
status: resolved",{'6d6a8b0e1425b4094f417919ce9c49cc72b608e1'},https://github.com/krb5/krb5,3.5,4c023ba43c16396f0d199e2df1cfa59b88b62acc,"do_tgs_req.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) 1.11 before 1.11.4, when a single-component realm name is used, allows remote authenticated users to cause a denial of service (daemon crash) via a TGS-REQ request that triggers an attempted cross-realm referral for a host-based service principal.",DoS ,yes,,,,,"KDC null deref due to referrals.
An authenticated remote client can cause a KDC to crash by making a valid TGS REQ to a KDC serving a realm with a single component name.
The process tgs req function dereferences a null pointer because an unusual failure condition causes a helper function to return success.
While attempting to provide cross realm referrals for host based service principals the find referral tgs function could return a TGS principal for a zero length realm name indicating that the hostname in the service principal has no known realm associated with it.
Subsequently the find alternate tgs function would attempt to construct a path to this empty string realm and return success along with a null pointer in its output parameter.
This happens because krb5 walk realm tree returns a list of length one when it attempts to construct a transit path between a single component realm and the empty string realm.
This list causes a loop in find alternate tgs to iterate over zero elements resulting in the unexpected output of a null pointer which process tgs req proceeds to dereference because there is no error condition.
Add an error condition to find referral tgs when krb5 get host realm returns an empty realm name.
Also add an error condition to find alternate tgs to handle the length one output from krb5 walk realm tree.
The vulnerable configuration is not likely to arise in practice.
Realm names that have a single component are likely to be test realms.
Releases prior to krb5 1.11 are not vulnerable.
Thanks to Sol Jerome for reporting this problem.
CVSSv2 AV N AC M Au S C N I N A P E H RL O RC C.
cherry picked from commit.
ticket 7668.
version fixed 1.11.4.
status resolved.",1.0,"['null deref', 'crash', 'valid', 'unexpected']"
36,36,42,Tom Yu,{},CVE-2013-1416,CWE-119,BIGVUL,"03/29/2013, 23:27:33",{'c'},"{'src/kdc/do_tgs_req.c': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/8ee70ec63931d1e38567905387ab9b1d45734d81,{'C/C++'},,positive,"KDC TGS-REQ null deref [CVE-2013-1416]

By sending an unusual but valid TGS-REQ, an authenticated remote
attacker can cause the KDC process to crash by dereferencing a null
pointer.

prep_reprocess_req() can cause a null pointer dereference when
processing a service principal name.  Code in this function can
inappropriately pass a null pointer to strlcpy().  Unmodified client
software can trivially trigger this vulnerability, but the attacker
must have already authenticated and received a valid Kerberos ticket.

The vulnerable code was introduced by the implementation of new
service principal realm referral functionality in krb5-1.7, but was
corrected as a side effect of the KDC refactoring in krb5-1.11.

CVSSv2 vector: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:H/RL:O/RC:C

ticket: 7600 (new)
version_fixed: 1.10.5
status: resolved",{'2fef06bf57bf317c72d6c91d332935b6fc2e98e5'},https://github.com/krb5/krb5,4.0,8ee70ec63931d1e38567905387ab9b1d45734d81,"The prep_reprocess_req function in do_tgs_req.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.10.5 does not properly perform service-principal realm referral, which allows remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) via a crafted TGS-REQ request.",DoS Overflow ,yes,,,,,"KDC TGS REQ null deref.
By sending an unusual but valid TGS REQ an authenticated remote attacker can cause the KDC process to crash by dereferencing a null pointer.
prep reprocess req can cause a null pointer dereference when processing a service principal name.
Code in this function can inappropriately pass a null pointer to strlcpy.
Unmodified client software can trivially trigger this vulnerability but the attacker must have already authenticated and received a valid Kerberos ticket.
The vulnerable code was introduced by the implementation of new service principal realm referral functionality in krb5 1.7 but was corrected as a side effect of the KDC refactoring in krb5 1.11.
CVSSv2 vector AV N AC L Au S C N I N A C E H RL O RC C.
ticket 7600 new.
version fixed 1.10.5.
status resolved.",1.0,"['null deref', 'valid', 'crash', 'null pointer dereference', 'valid']"
37,37,43,Xi Wang,{},CVE-2013-1415,,BIGVUL,"02/14/2013, 23:17:40",{'c'},"{'src/plugins/preauth/pkinit/pkinit_crypto_openssl.c': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/f249555301940c6df3a2cdda13b56b5674eebc2e,{'C/C++'},,positive,"PKINIT null pointer deref [CVE-2013-1415]

Don't dereference a null pointer when cleaning up.

The KDC plugin for PKINIT can dereference a null pointer when a
malformed packet causes processing to terminate early, leading to
a crash of the KDC process.  An attacker would need to have a valid
PKINIT certificate or have observed a successful PKINIT authentication,
or an unauthenticated attacker could execute the attack if anonymous
PKINIT is enabled.

CVSSv2 vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:P/RL:O/RC:C

This is a minimal commit for pullup; style fixes in a followup.
[kaduk@mit.edu: reformat and edit commit message]

(cherry picked from commit c773d3c775e9b2d88bcdff5f8a8ba88d7ec4e8ed)

ticket: 7570
version_fixed: 1.11.1
status: resolved",{'0dbdec4bb943ff1bcbf53148901501d48c7402cb'},https://github.com/krb5/krb5,7.1,f249555301940c6df3a2cdda13b56b5674eebc2e,"The pkinit_check_kdc_pkid function in plugins/preauth/pkinit/pkinit_crypto_openssl.c in the PKINIT implementation in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.10.4 and 1.11.x before 1.11.1 does not properly handle errors during extraction of fields from an X.509 certificate, which allows remote attackers to cause a denial of service (NULL pointer dereference and daemon crash) via a malformed KRB5_PADATA_PK_AS_REQ AS-REQ request.",DoS ,yes,,,,,"PKINIT null pointer deref.
Don t dereference a null pointer when cleaning up.
The KDC plugin for PKINIT can dereference a null pointer when a malformed packet causes processing to terminate early leading to a crash of the KDC process.
An attacker would need to have a valid PKINIT certificate or have observed a successful PKINIT authentication or an unauthenticated attacker could execute the attack if anonymous PKINIT is enabled.
CVSSv2 vector AV N AC M Au N C N I N A C E P RL O RC C.
This is a minimal commit for pullup style fixes in a followup.

E mail reformat and edit commit message.
cherry picked from commit.
ticket 7570.
version fixed 1.11.1.
status resolved.",1.0,"['crash', 'valid', 'authentication', 'attack']"
38,38,44,Nalin Dahyabhai,{},CVE-2012-1016,,BIGVUL,"12/13/2012, 19:26:07",{'c'},"{'src/plugins/preauth/pkinit/pkinit_srv.c': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/db64ca25d661a47b996b4e2645998b5d7f0eb52c,{'C/C++'},,positive,"PKINIT (draft9) null ptr deref [CVE-2012-1016]

Don't check for an agility KDF identifier in the non-draft9 reply
structure when we're building a draft9 reply, because it'll be NULL.

The KDC plugin for PKINIT can dereference a null pointer when handling
a draft9 request, leading to a crash of the KDC process.  An attacker
would need to have a valid PKINIT certificate, or an unauthenticated
attacker could execute the attack if anonymous PKINIT is enabled.

CVSSv2 vector: AV:N/AC:M/Au:N/C:N/I:N/A:P/E:P/RL:O/RC:C

[tlyu@mit.edu: reformat comment and edit log message]

(back ported from commit cd5ff932c9d1439c961b0cf9ccff979356686aff)

ticket: 7527 (new)
version_fixed: 1.10.4
status: resolved",{'d6a6cd0e84154c782975955784678ebeebfee488'},https://github.com/krb5/krb5,4.3,db64ca25d661a47b996b4e2645998b5d7f0eb52c,"The pkinit_server_return_padata function in plugins/preauth/pkinit/pkinit_srv.c in the PKINIT implementation in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.10.4 attempts to find an agility KDF identifier in inappropriate circumstances, which allows remote attackers to cause a denial of service (NULL pointer dereference and daemon crash) via a crafted Draft 9 request.",DoS ,yes,,,,,"PKINIT draft9 null ptr deref.
Don t check for an agility KDF identifier in the non draft9 reply structure when we re building a draft9 reply because it ll be NULL.
The KDC plugin for PKINIT can dereference a null pointer when handling a draft9 request leading to a crash of the KDC process.
An attacker would need to have a valid PKINIT certificate or an unauthenticated attacker could execute the attack if anonymous PKINIT is enabled.
CVSSv2 vector AV N AC M Au N C N I N A P E P RL O RC C.
E mail reformat comment and edit log message.
back ported from commit.
ticket 7527 new.
version fixed 1.10.4.
status resolved.",1.0,"['null ptr deref', 'crash', 'valid', 'attack']"
39,39,46,Tom Yu,{},CVE-2002-2443,CWE-20,BIGVUL,"05/03/2013, 20:26:46",{'c'},"{'src/kadmin/server/schpw.c': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/cf1a0c411b2668c57c41e9c4efd15ba17b6b322c,{'C/C++'},,positive,"Fix kpasswd UDP ping-pong [CVE-2002-2443]

The kpasswd service provided by kadmind was vulnerable to a UDP
""ping-pong"" attack [CVE-2002-2443].  Don't respond to packets unless
they pass some basic validation, and don't respond to our own error
packets.

Some authors use CVE-1999-0103 to refer to the kpasswd UDP ping-pong
attack or UDP ping-pong attacks in general, but there is discussion
leading toward narrowing the definition of CVE-1999-0103 to the echo,
chargen, or other similar built-in inetd services.

Thanks to Vincent Danen for alerting us to this issue.

CVSSv2: AV:N/AC:L/Au:N/C:N/I:N/A:P/E:P/RL:O/RC:C

ticket: 7637 (new)
target_version: 1.11.3
tags: pullup",{'0a97afba6986e2818cd26869704820e00efcae63'},https://github.com/krb5/krb5,5.0,cf1a0c411b2668c57c41e9c4efd15ba17b6b322c,"schpw.c in the kpasswd service in kadmind in MIT Kerberos 5 (aka krb5) before 1.11.3 does not properly validate UDP packets before sending responses, which allows remote attackers to cause a denial of service (CPU and bandwidth consumption) via a forged packet that triggers a communication loop, as demonstrated by krb_pingpong.nasl, a related issue to CVE-1999-0103.",DoS ,yes,,,,,"Fix kpasswd UDP ping pong.
The kpasswd service provided by kadmind was vulnerable to a UDP ping pong attack Don t respond to packets unless they pass some basic validation and don t respond to our own error packets.
Some authors use to refer to the kpasswd UDP ping pong attack or UDP ping pong attacks in general but there is discussion leading toward narrowing the definition of to the echo chargen or other similar built in inetd services.
Thanks to Vincent Danen for alerting us to this issue.
CVSSv2 AV N AC L Au N C N I N A P E P RL O RC C.
ticket 7637 new.
target version 1.11.3.
tags pullup.",1.0,"['attack', 'attack']"
44,44,52,Ben Kaduk,{},CVE-2014-5354,,BIGVUL,"11/19/2014, 17:04:46",{'c'},"{'src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c': {'additions': 17, 'deletions': 8, 'changes': 25, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/04038bf3633c4b909b5ded3072dc88c8c419bf16,{'C/C++'},,positive,"Support keyless principals in LDAP [CVE-2014-5354]

Operations like ""kadmin -q 'addprinc -nokey foo'"" or
""kadmin -q 'purgekeys -all foo'"" result in principal entries with
no keys present, so krb5_encode_krbsecretkey() would just return
NULL, which then got unconditionally dereferenced in
krb5_add_ber_mem_ldap_mod().

Apply some fixes to krb5_encode_krbsecretkey() to handle zero-key
principals better, correct the test for an allocation failure, and
slightly restructure the cleanup handler to be shorter and more
appropriate for the usage.  Once it no longer short-circuits when
n_key_data is zero, it will produce an array of length two with both
entries NULL, which is treated as an empty list by the LDAP library,
the correct behavior for a keyless principal.

However, attributes with empty values are only handled by the LDAP
library for Modify operations, not Add operations (which only get
a sequence of Attribute, with no operation field).  Therefore, only
add an empty krbprincipalkey to the modlist when we will be performing a
Modify, and not when we will be performing an Add, which is conditional
on the (misspelled) create_standalone_prinicipal boolean.

CVE-2014-5354:

In MIT krb5, when kadmind is configured to use LDAP for the KDC
database, an authenticated remote attacker can cause a NULL
dereference by inserting into the database a principal entry which
contains no long-term keys.

In order for the LDAP KDC backend to translate a principal entry
from the database abstraction layer into the form expected by the
LDAP schema, the principal's keys are encoded into a
NULL-terminated array of length-value entries to be stored in the
LDAP database.  However, the subroutine which produced this array
did not correctly handle the case where no keys were present,
returning NULL instead of an empty array, and the array was
unconditionally dereferenced while adding to the list of LDAP
operations to perform.

Versions of MIT krb5 prior to 1.12 did not expose a way for
principal entries to have no long-term key material, and
therefore are not vulnerable.

    CVSSv2 Vector: AV:N/AC:M/Au:S/C:N/I:N/A:P/E:H/RL:OF/RC:C

ticket: 8041 (new)
tags: pullup
target_version: 1.13.1
subject: kadmind with ldap backend crashes when putting keyless entries",{'e8df0458673071e56346730fa843c83aca88631f'},https://github.com/krb5/krb5,3.5,04038bf3633c4b909b5ded3072dc88c8c419bf16,"plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c in MIT Kerberos 5 (aka krb5) 1.12.x and 1.13.x before 1.13.1, when the KDC uses LDAP, allows remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) by creating a database entry for a keyless principal, as demonstrated by a kadmin *add_principal -nokey* or *purgekeys -all* command.",DoS ,yes,,,,,"Support keyless principals in LDAP.
Operations like kadmin q addprinc nokey foo or kadmin q purgekeys all foo result in principal entries with no keys present so krb5 encode krbsecretkey would just return NULL which then got unconditionally dereferenced in krb5 add ber mem ldap mod.
Apply some fixes to krb5 encode krbsecretkey to handle zero key principals better correct the test for an allocation failure and slightly restructure the cleanup handler to be shorter and more appropriate for the usage.
Once it no longer short circuits when n key data is zero it will produce an array of length two with both entries NULL which is treated as an empty list by the LDAP library the correct behavior for a keyless principal.
However attributes with empty values are only handled by the LDAP library for Modify operations not Add operations which only get a sequence of Attribute with no operation field.
Therefore only add an empty krbprincipalkey to the modlist when we will be performing a Modify and not when we will be performing an Add which is conditional on the misspelled create standalone prinicipal boolean.

In MIT krb5 when kadmind is configured to use LDAP for the KDC database an authenticated remote attacker can cause a NULL dereference by inserting into the database a principal entry which contains no long term keys.
In order for the LDAP KDC backend to translate a principal entry from the database abstraction layer into the form expected by the LDAP schema the principal s keys are encoded into a NULL terminated array of length value entries to be stored in the LDAP database.
However the subroutine which produced this array did not correctly handle the case where no keys were present returning NULL instead of an empty array and the array was unconditionally dereferenced while adding to the list of LDAP operations to perform.
Versions of MIT krb5 prior to 1.12 did not expose a way for principal entries to have no long term key material and therefore are not vulnerable.
CVSSv2 Vector AV N AC M Au S C N I N A P E H RL OF RC C.
ticket 8041 new.
tags pullup.
target version 1.13.1.
subject kadmind with ldap backend crashes when putting keyless entries.",1.0,['NULL dereference']
45,45,53,Greg Hudson,{},CVE-2014-5353,,BIGVUL,"12/05/2014, 19:01:39",{'c'},"{'src/plugins/kdb/ldap/libkdb_ldap/ldap_pwd_policy.c': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/d1f707024f1d0af6e54a18885322d70fa15ec4d3,{'C/C++'},,positive,"Fix LDAP misused policy name crash [CVE-2014-5353]

In krb5_ldap_get_password_policy_from_dn, if LDAP_SEARCH returns
successfully with no results, return KRB5_KDB_NOENTRY instead of
returning success with a zeroed-out policy object.  This fixes a null
dereference when an admin attempts to use an LDAP ticket policy name
as a password policy name.

CVE-2014-5353:

In MIT krb5, when kadmind is configured to use LDAP for the KDC
database, an authenticated remote attacker can cause a NULL dereference
by attempting to use a named ticket policy object as a password policy
for a principal.  The attacker needs to be authenticated as a user who
has the elevated privilege for setting password policy by adding or
modifying principals.

Queries to LDAP scoped to the krbPwdPolicy object class will correctly
not return entries of other classes, such as ticket policy objects, but
may return success with no returned elements if an object with the
requested DN exists in a different object class.  In this case, the
routine to retrieve a password policy returned success with a password
policy object that consisted entirely of zeroed memory.  In particular,
accesses to the policy name will dereference a NULL pointer.  KDC
operation does not access the policy name field, but most kadmin
operations involving the principal with incorrect password policy
will trigger the crash.

Thanks to Patrik Kis for reporting this problem.

CVSSv2 Vector: AV:N/AC:M/Au:S/C:N/I:N/A:C/E:H/RL:OF/RC:C

[kaduk@mit.edu: CVE description and CVSS score]

ticket: 8051 (new)
target_version: 1.13.1
tags: pullup",{'8466003864b294cdb9e5547c2f8e574d2c156b13'},https://github.com/krb5/krb5,3.5,d1f707024f1d0af6e54a18885322d70fa15ec4d3,"The krb5_ldap_get_password_policy_from_dn function in plugins/kdb/ldap/libkdb_ldap/ldap_pwd_policy.c in MIT Kerberos 5 (aka krb5) before 1.13.1, when the KDC uses LDAP, allows remote authenticated users to cause a denial of service (daemon crash) via a successful LDAP query with no results, as demonstrated by using an incorrect object type for a password policy.",DoS ,yes,,,,,"Fix LDAP misused policy name crash.
In krb5 ldap get password policy from dn if LDAP SEARCH returns successfully with no results return KRB5 KDB NOENTRY instead of returning success with a zeroed out policy object.
This fixes a null dereference when an admin attempts to use an LDAP ticket policy name as a password policy name.

In MIT krb5 when kadmind is configured to use LDAP for the KDC database an authenticated remote attacker can cause a NULL dereference by attempting to use a named ticket policy object as a password policy for a principal.
The attacker needs to be authenticated as a user who has the elevated privilege for setting password policy by adding or modifying principals.
Queries to LDAP scoped to the krbPwdPolicy object class will correctly not return entries of other classes such as ticket policy objects but may return success with no returned elements if an object with the requested DN exists in a different object class.
In this case the routine to retrieve a password policy returned success with a password policy object that consisted entirely of zeroed memory.
In particular accesses to the policy name will dereference a NULL pointer.
KDC operation does not access the policy name field but most kadmin operations involving the principal with incorrect password policy will trigger the crash.
Thanks to Patrik Kis for reporting this problem.
CVSSv2 Vector AV N AC M Au S C N I N A C E H RL OF RC C.
E mail CVE description and CVSS score.
ticket 8051 new.
target version 1.13.1.
tags pullup.",1.0,"['crash', 'password', 'null dereference', 'password', 'NULL dereference', 'password', 'privilege', 'password', 'password', 'password', 'memory', 'password', 'crash']"
46,46,54,Greg Hudson,{},CVE-2014-5351,CWE-255,BIGVUL,"08/21/2014, 17:52:07",{'c'},"{'src/lib/kadm5/srv/svr_principal.c': {'additions': 18, 'deletions': 3, 'changes': 21, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/af0ed4df4dfae762ab5fb605f5a0c8f59cb4f6ca,{'C/C++'},,positive,"Return only new keys in randkey [CVE-2014-5351]

In kadmind's randkey operation, if a client specifies the keepold
flag, do not include the preserved old keys in the response.

CVE-2014-5351:

An authenticated remote attacker can retrieve the current keys for a
service principal when generating a new set of keys for that
principal.  The attacker needs to be authenticated as a user who has
the elevated privilege for randomizing the keys of other principals.

Normally, when a Kerberos administrator randomizes the keys of a
service principal, kadmind returns only the new keys.  This prevents
an administrator who lacks legitimate privileged access to a service
from forging tickets to authenticate to that service.  If the
""keepold"" flag to the kadmin randkey RPC operation is true, kadmind
retains the old keys in the KDC database as intended, but also
unexpectedly returns the old keys to the client, which exposes the
service to ticket forgery attacks from the administrator.

A mitigating factor is that legitimate clients of the affected service
will start failing to authenticate to the service once they begin to
receive service tickets encrypted in the new keys.  The affected
service will be unable to decrypt the newly issued tickets, possibly
alerting the legitimate administrator of the affected service.

CVSSv2: AV:N/AC:H/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C

[tlyu@mit.edu: CVE description and CVSS score]

ticket: 8018 (new)
target_version: 1.13
tags: pullup",{'17689700b27c6fb6d26156330d11b57ef79385d3'},https://github.com/krb5/krb5,2.1,af0ed4df4dfae762ab5fb605f5a0c8f59cb4f6ca,"The kadm5_randkey_principal_3 function in lib/kadm5/srv/svr_principal.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13 sends old keys in a response to a -randkey -keepold request, which allows remote authenticated users to forge tickets by leveraging administrative access.",,yes,,,,,"Return only new keys in randkey.
In kadmind s randkey operation if a client specifies the keepold flag do not include the preserved old keys in the response.

An authenticated remote attacker can retrieve the current keys for a service principal when generating a new set of keys for that principal.
The attacker needs to be authenticated as a user who has the elevated privilege for randomizing the keys of other principals.
Normally when a Kerberos administrator randomizes the keys of a service principal kadmind returns only the new keys.
This prevents an administrator who lacks legitimate privileged access to a service from forging tickets to authenticate to that service.
If the keepold flag to the kadmin randkey RPC operation is true kadmind retains the old keys in the KDC database as intended but also unexpectedly returns the old keys to the client which exposes the service to ticket forgery attacks from the administrator.
A mitigating factor is that legitimate clients of the affected service will start failing to authenticate to the service once they begin to receive service tickets encrypted in the new keys.
The affected service will be unable to decrypt the newly issued tickets possibly alerting the legitimate administrator of the affected service.
CVSSv2 AV N AC H Au S C P I N A N E POC RL OF RC C.
E mail CVE description and CVSS score.
ticket 8018 new.
target version 1.13.
tags pullup.",1.0,"['privilege', 'authenticate', 'forgery', 'authenticate', 'POC']"
47,47,55,Tomas Kuthan,{},CVE-2014-4345,CWE-189,BIGVUL,"08/01/2014, 13:25:50",{'c'},"{'src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/dc7ed55c689d57de7f7408b34631bf06fec9dab1,{'C/C++'},,positive,"Fix LDAP key data segmentation [CVE-2014-4345]

For principal entries having keys with multiple kvnos (due to use of
-keepold), the LDAP KDB module makes an attempt to store all the keys
having the same kvno into a single krbPrincipalKey attribute value.
There is a fencepost error in the loop, causing currkvno to be set to
the just-processed value instead of the next kvno.  As a result, the
second and all following groups of multiple keys by kvno are each
stored in two krbPrincipalKey attribute values.  Fix the loop to use
the correct kvno value.

CVE-2014-4345:

In MIT krb5, when kadmind is configured to use LDAP for the KDC
database, an authenticated remote attacker can cause it to perform an
out-of-bounds write (buffer overrun) by performing multiple cpw
-keepold operations.  An off-by-one error while copying key
information to the new database entry results in keys sharing a common
kvno being written to different array buckets, in an array whose size
is determined by the number of kvnos present.  After sufficient
iterations, the extra writes extend past the end of the
(NULL-terminated) array.  The NULL terminator is always written after
the end of the loop, so no out-of-bounds data is read, it is only
written.

Historically, it has been possible to convert an out-of-bounds write
into remote code execution in some cases, though the necessary
exploits must be tailored to the individual application and are
usually quite complicated.  Depending on the allocated length of the
array, an out-of-bounds write may also cause a segmentation fault
and/or application crash.

    CVSSv2 Vector: AV:N/AC:M/Au:S/C:C/I:C/A:C/E:POC/RL:OF/RC:C

[ghudson@mit.edu: clarified commit message]
[kaduk@mit.edu: CVE summary, CVSSv2 vector]

(cherry picked from commit 81c332e29f10887c6b9deb065f81ba259f4c7e03)

ticket: 7980
version_fixed: 1.12.2
status: resolved",{'df78452da0e4254b339039d7d9397d75f9d090b2'},https://github.com/krb5/krb5,8.5,dc7ed55c689d57de7f7408b34631bf06fec9dab1,Off-by-one error in the krb5_encode_krbsecretkey function in plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c in the LDAP KDB module in kadmind in MIT Kerberos 5 (aka krb5) 1.6.x through 1.11.x before 1.11.6 and 1.12.x before 1.12.2 allows remote authenticated users to cause a denial of service (buffer overflow) or possibly execute arbitrary code via a series of *cpw -keepold* commands.,DoS Exec Code Overflow ,yes,,,,,"Fix LDAP key data segmentation.
For principal entries having keys with multiple kvnos due to use of keepold the LDAP KDB module makes an attempt to store all the keys having the same kvno into a single krbPrincipalKey attribute value.
There is a fencepost error in the loop causing currkvno to be set to the just processed value instead of the next kvno.
As a result the second and all following groups of multiple keys by kvno are each stored in two krbPrincipalKey attribute values.
Fix the loop to use the correct kvno value.

In MIT krb5 when kadmind is configured to use LDAP for the KDC database an authenticated remote attacker can cause it to perform an out of bounds write buffer overrun by performing multiple cpw keepold operations.
An off by one error while copying key information to the new database entry results in keys sharing a common kvno being written to different array buckets in an array whose size is determined by the number of kvnos present.
After sufficient iterations the extra writes extend past the end of the NULL terminated array.
The NULL terminator is always written after the end of the loop so no out of bounds data is read it is only written.
Historically it has been possible to convert an out of bounds write into remote code execution in some cases though the necessary exploits must be tailored to the individual application and are usually quite complicated.
Depending on the allocated length of the array an out of bounds write may also cause a segmentation fault and or application crash.
CVSSv2 Vector AV N AC M Au S C C I C A C E POC RL OF RC C.
E mail clarified commit message.
E mail CVE summary CVSSv2 vector.
cherry picked from commit.
ticket 7980.
version fixed 1.12.2.
status resolved.",1.0,"['overrun', 'remote code execution', 'crash', 'POC']"
48,48,56,Greg Hudson,{},CVE-2014-4344,CWE-476,BIGVUL,"07/15/2014, 16:56:01",{'c'},"{'src/lib/gssapi/spnego/spnego_mech.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/a7886f0ed1277c69142b14a2c6629175a6331edc,{'C/C++'},,positive,"Fix null deref in SPNEGO acceptor [CVE-2014-4344]

When processing a continuation token, acc_ctx_cont was dereferencing
the initial byte of the token without checking the length.  This could
result in a null dereference.

CVE-2014-4344:

In MIT krb5 1.5 and newer, an unauthenticated or partially
authenticated remote attacker can cause a NULL dereference and
application crash during a SPNEGO negotiation by sending an empty
token as the second or later context token from initiator to acceptor.
The attacker must provide at least one valid context token in the
security context negotiation before sending the empty token.  This can
be done by an unauthenticated attacker by forcing SPNEGO to
renegotiate the underlying mechanism, or by using IAKERB to wrap an
unauthenticated AS-REQ as the first token.

    CVSSv2 Vector: AV:N/AC:L/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C

[kaduk@mit.edu: CVE summary, CVSSv2 vector]

(cherry picked from commit 524688ce87a15fc75f87efc8c039ba4c7d5c197b)

ticket: 7970
version_fixed: 1.12.2
status: resolved",{'3a3749e219534415d4c9e449d0d08b047325ae89'},https://github.com/krb5/krb5,7.8,a7886f0ed1277c69142b14a2c6629175a6331edc,The acc_ctx_cont function in the SPNEGO acceptor in lib/gssapi/spnego/spnego_mech.c in MIT Kerberos 5 (aka krb5) 1.5.x through 1.12.x before 1.12.2 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via an empty continuation token at a certain point during a SPNEGO negotiation.,DoS ,yes,,,,,"Fix null deref in SPNEGO acceptor.
When processing a continuation token acc ctx cont was dereferencing the initial byte of the token without checking the length.
This could result in a null dereference.

In MIT krb5 1.5 and newer an unauthenticated or partially authenticated remote attacker can cause a NULL dereference and application crash during a SPNEGO negotiation by sending an empty token as the second or later context token from initiator to acceptor.
The attacker must provide at least one valid context token in the security context negotiation before sending the empty token.
This can be done by an unauthenticated attacker by forcing SPNEGO to renegotiate the underlying mechanism or by using IAKERB to wrap an unauthenticated AS REQ as the first token.
CVSSv2 Vector AV N AC L Au N C N I N A C E POC RL OF RC C.
E mail CVE summary CVSSv2 vector.
cherry picked from commit.
ticket 7970.
version fixed 1.12.2.
status resolved.",1.0,"['null deref', 'null dereference', 'NULL dereference', 'crash', 'valid', 'security', 'POC']"
49,49,57,David Woodhouse,{},CVE-2014-4343,CWE-415,BIGVUL,"07/15/2014, 16:54:15",{'c'},"{'src/lib/gssapi/spnego/spnego_mech.c': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/f18ddf5d82de0ab7591a36e465bc24225776940f,{'C/C++'},,positive,"Fix double-free in SPNEGO [CVE-2014-4343]

In commit cd7d6b08 (""Verify acceptor's mech in SPNEGO initiator"") the
pointer sc->internal_mech became an alias into sc->mech_set->elements,
which should be considered constant for the duration of the SPNEGO
context.  So don't free it.

CVE-2014-4343:

In MIT krb5 releases 1.10 and newer, an unauthenticated remote
attacker with the ability to spoof packets appearing to be from a
GSSAPI acceptor can cause a double-free condition in GSSAPI initiators
(clients) which are using the SPNEGO mechanism, by returning a
different underlying mechanism than was proposed by the initiator.  At
this stage of the negotiation, the acceptor is unauthenticated, and
the acceptor's response could be spoofed by an attacker with the
ability to inject traffic to the initiator.

Historically, some double-free vulnerabilities can be translated into
remote code execution, though the necessary exploits must be tailored
to the individual application and are usually quite
complicated. Double-frees can also be exploited to cause an
application crash, for a denial of service.  However, most GSSAPI
client applications are not vulnerable, as the SPNEGO mechanism is not
used by default (when GSS_C_NO_OID is passed as the mech_type argument
to gss_init_sec_context()).  The most common use of SPNEGO is for
HTTP-Negotiate, used in web browsers and other web clients.  Most such
clients are believed to not offer HTTP-Negotiate by default, instead
requiring a whitelist of sites for which it may be used to be
configured.  If the whitelist is configured to only allow
HTTP-Negotiate over TLS connections (""https://""), a successful
attacker must also spoof the web server's SSL certificate, due to the
way the WWW-Authenticate header is sent in a 401 (Unauthorized)
response message.  Unfortunately, many instructions for enabling
HTTP-Negotiate in common web browsers do not include a TLS
requirement.

    CVSSv2 Vector: AV:N/AC:H/Au:N/C:C/I:C/A:C/E:POC/RL:OF/RC:C

[kaduk@mit.edu: CVE summary and CVSSv2 vector]

ticket: 7969 (new)
target_version: 1.12.2
tags: pullup",{'53362ba69fb5a60386dd358c3450bfcf4f6b7346'},https://github.com/krb5/krb5,7.6,f18ddf5d82de0ab7591a36e465bc24225776940f,"Double free vulnerability in the init_ctx_reselect function in the SPNEGO initiator in lib/gssapi/spnego/spnego_mech.c in MIT Kerberos 5 (aka krb5) 1.10.x through 1.12.x before 1.12.2 allows remote attackers to cause a denial of service (memory corruption) or possibly execute arbitrary code via network traffic that appears to come from an intended acceptor, but specifies a security mechanism different from the one proposed by the initiator.",DoS Exec Code Mem. Corr. ,yes,,,,,"Fix double free in SPNEGO.
In commit Verify acceptor s mech in SPNEGO initiator the pointer sc internal mech became an alias into sc mech set elements which should be considered constant for the duration of the SPNEGO context.
So don t free it.

In MIT krb5 releases 1.10 and newer an unauthenticated remote attacker with the ability to spoof packets appearing to be from a GSSAPI acceptor can cause a double free condition in GSSAPI initiators clients which are using the SPNEGO mechanism by returning a different underlying mechanism than was proposed by the initiator.
At this stage of the negotiation the acceptor is unauthenticated and the acceptor s response could be spoofed by an attacker with the ability to inject traffic to the initiator.
Historically some double free vulnerabilities can be translated into remote code execution though the necessary exploits must be tailored to the individual application and are usually quite complicated.
Double frees can also be exploited to cause an application crash for a denial of service.
However most GSSAPI client applications are not vulnerable as the SPNEGO mechanism is not used by default when GSS C NO OID is passed as the mech type argument to gss init sec context.
The most common use of SPNEGO is for HTTP Negotiate used in web browsers and other web clients.
Most such clients are believed to not offer HTTP Negotiate by default instead requiring a whitelist of sites for which it may be used to be configured.
If the whitelist is configured to only allow HTTP Negotiate over TLS connections URL a successful attacker must also spoof the web server s SSL certificate due to the way the WWW Authenticate header is sent in a 401 Unauthorized response message.
Unfortunately many instructions for enabling HTTP Negotiate in common web browsers do not include a TLS requirement.
CVSSv2 Vector AV N AC H Au N C C I C A C E POC RL OF RC C.
E mail CVE summary and CVSSv2 vector.
ticket 7969 new.
target version 1.12.2.
tags pullup.",1.0,"['double free', 'Verify', 'spoof', 'double free', 'double free', 'remote code execution', 'crash', 'spoof', 'Authenticate', 'Unauthorized', 'POC']"
50,50,58,Greg Hudson,{},CVE-2014-4342,CWE-119,BIGVUL,"06/19/2014, 17:49:16",{'c'},"{'src/lib/gssapi/krb5/k5unseal.c': {'additions': 33, 'deletions': 8, 'changes': 41, 'status': 'modified'}, 'src/lib/gssapi/krb5/k5unsealiov.c': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/e6ae703ae597d798e310368d52b8f38ee11c6a73,{'C/C++'},,positive,"Handle invalid RFC 1964 tokens [CVE-2014-4341...]

Detect the following cases which would otherwise cause invalid memory
accesses and/or integer underflow:

* An RFC 1964 token being processed by an RFC 4121-only context
  [CVE-2014-4342]

* A header with fewer than 22 bytes after the token ID or an
  incomplete checksum [CVE-2014-4341 CVE-2014-4342]

* A ciphertext shorter than the confounder [CVE-2014-4341]

* A declared padding length longer than the plaintext [CVE-2014-4341]

If we detect a bad pad byte, continue on to compute the checksum to
avoid creating a padding oracle, but treat the checksum as invalid
even if it compares equal.

CVE-2014-4341:

In MIT krb5, an unauthenticated remote attacker with the ability to
inject packets into a legitimately established GSSAPI application
session can cause a program crash due to invalid memory references
when attempting to read beyond the end of a buffer.

    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C

CVE-2014-4342:

In MIT krb5 releases krb5-1.7 and later, an unauthenticated remote
attacker with the ability to inject packets into a legitimately
established GSSAPI application session can cause a program crash due
to invalid memory references when reading beyond the end of a buffer
or by causing a null pointer dereference.

    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C

[tlyu@mit.edu: CVE summaries, CVSS]

(cherry picked from commit fb99962cbd063ac04c9a9d2cc7c75eab73f3533d)

ticket: 7949
version_fixed: 1.12.2
status: resolved",{'e5bb07c9eb7ddb3cc575dfa238748f7227f1fdd2'},https://github.com/krb5/krb5,5.0,e6ae703ae597d798e310368d52b8f38ee11c6a73,"MIT Kerberos 5 (aka krb5) 1.7.x through 1.12.x before 1.12.2 allows remote attackers to cause a denial of service (buffer over-read or NULL pointer dereference, and application crash) by injecting invalid tokens into a GSSAPI application session.",DoS Overflow ,yes,,,,,"Handle invalid RFC 1964 tokens.
Detect the following cases which would otherwise cause invalid memory.
accesses and or integer underflow.
An RFC 1964 token being processed by an RFC 4121 only context.

A header with fewer than 22 bytes after the token ID or an.
incomplete checksum.
A ciphertext shorter than the confounder.
A declared padding length longer than the plaintext.
If we detect a bad pad byte continue on to compute the checksum to avoid creating a padding oracle but treat the checksum as invalid even if it compares equal.

In MIT krb5 an unauthenticated remote attacker with the ability to inject packets into a legitimately established GSSAPI application session can cause a program crash due to invalid memory references when attempting to read beyond the end of a buffer.
CVSSv2 Vector AV N AC M Au N C N I N A P E POC RL OF RC C.

In MIT krb5 releases krb5 1.7 and later an unauthenticated remote attacker with the ability to inject packets into a legitimately established GSSAPI application session can cause a program crash due to invalid memory references when reading beyond the end of a buffer or by causing a null pointer dereference.
CVSSv2 Vector AV N AC M Au N C N I N A P E POC RL OF RC C.
E mail CVE summaries CVSS.
cherry picked from commit.
ticket 7949.
version fixed 1.12.2.
status resolved.",1.0,"['invalid', 'invalid', 'memory', 'underflow', 'invalid', 'crash', 'invalid', 'memory', 'POC', 'crash', 'invalid', 'memory', 'null pointer dereference', 'POC']"
77,77,91,Greg Hudson,{},CVE-2015-2698,CWE-119,BIGVUL,"11/02/2015, 03:45:21","{'c', 'h'}","{'src/lib/gssapi/krb5/gssapiP_krb5.h': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified'}, 'src/lib/gssapi/krb5/gssapi_krb5.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/iakerb.c': {'additions': 35, 'deletions': 7, 'changes': 42, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/3db8dfec1ef50ddd78d6ba9503185995876a39fd,{'C/C++'},,positive,"Fix IAKERB context export/import [CVE-2015-2698]

The patches for CVE-2015-2696 contained a regression in the newly
added IAKERB iakerb_gss_export_sec_context() function, which could
cause it to corrupt memory.  Fix the regression by properly
dereferencing the context_handle pointer before casting it.

Also, the patches did not implement an IAKERB gss_import_sec_context()
function, under the erroneous belief that an exported IAKERB context
would be tagged as a krb5 context.  Implement it now to allow IAKERB
contexts to be successfully exported and imported after establishment.

CVE-2015-2698:

In any MIT krb5 release with the patches for CVE-2015-2696 applied, an
application which calls gss_export_sec_context() may experience memory
corruption if the context was established using the IAKERB mechanism.
Historically, some vulnerabilities of this nature can be translated
into remote code execution, though the necessary exploits must be
tailored to the individual application and are usually quite
complicated.

    CVSSv2 Vector: AV:N/AC:H/Au:S/C:C/I:C/A:C/E:POC/RL:OF/RC:C

ticket: 8273 (new)
target_version: 1.14
tags: pullup",{'92d6dd045dfc06cc03d20b327a6ee7a71e6bc24d'},https://github.com/krb5/krb5,8.5,3db8dfec1ef50ddd78d6ba9503185995876a39fd,"The iakerb_gss_export_sec_context function in lib/gssapi/krb5/iakerb.c in MIT Kerberos 5 (aka krb5) 1.14 pre-release 2015-09-14 improperly accesses a certain pointer, which allows remote authenticated users to cause a denial of service (memory corruption) or possibly have unspecified other impact by interacting with an application that calls the gss_export_sec_context function.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2015-2696.",DoS Overflow Mem. Corr. ,yes,,,,,"Fix IAKERB context export import.
The patches for contained a regression in the newly added IAKERB iakerb gss export sec context function which could cause it to corrupt memory.
Fix the regression by properly dereferencing the context handle pointer before casting it.
Also the patches did not implement an IAKERB gss import sec context function under the erroneous belief that an exported IAKERB context would be tagged as a krb5 context.
Implement it now to allow IAKERB contexts to be successfully exported and imported after establishment.

In any MIT krb5 release with the patches for applied an application which calls gss export sec context may experience memory corruption if the context was established using the IAKERB mechanism.
Historically some vulnerabilities of this nature can be translated into remote code execution though the necessary exploits must be tailored to the individual application and are usually quite complicated.
CVSSv2 Vector AV N AC H Au S C C I C A C E POC RL OF RC C.
ticket 8273 new.
target version 1.14.
tags pullup.",1.0,"['corrupt', 'memory', 'memory', 'remote code execution', 'POC']"
78,78,92,Greg Hudson,{},CVE-2015-2697,CWE-119,BIGVUL,"09/25/2015, 16:51:47",{'c'},"{'src/lib/krb5/krb/bld_princ.c': {'additions': 2, 'deletions': 4, 'changes': 6, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/f0c094a1b745d91ef2f9a4eae2149aac026a5789,{'C/C++'},,positive,"Fix build_principal memory bug [CVE-2015-2697]

In build_principal_va(), use k5memdup0() instead of strdup() to make a
copy of the realm, to ensure that we allocate the correct number of
bytes and do not read past the end of the input string.  This bug
affects krb5_build_principal(), krb5_build_principal_va(), and
krb5_build_principal_alloc_va().  krb5_build_principal_ext() is not
affected.

CVE-2015-2697:

In MIT krb5 1.7 and later, an authenticated attacker may be able to
cause a KDC to crash using a TGS request with a large realm field
beginning with a null byte.  If the KDC attempts to find a referral to
answer the request, it constructs a principal name for lookup using
krb5_build_principal() with the requested realm.  Due to a bug in this
function, the null byte causes only one byte be allocated for the
realm field of the constructed principal, far less than its length.
Subsequent operations on the lookup principal may cause a read beyond
the end of the mapped memory region, causing the KDC process to crash.

CVSSv2: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C

ticket: 8252 (new)
target_version: 1.14
tags: pullup",{'a705b1160ce7f0c5f23b9859c4c6c707503fbfdc'},https://github.com/krb5/krb5,6.8,f0c094a1b745d91ef2f9a4eae2149aac026a5789,The build_principal_va function in lib/krb5/krb/bld_princ.c in MIT Kerberos 5 (aka krb5) before 1.14 allows remote authenticated users to cause a denial of service (out-of-bounds read and KDC crash) via an initial '0' character in a long realm field within a TGS request.,DoS Overflow ,yes,,,,,"Fix build principal memory bug.
In build principal va use instead of strdup to make a copy of the realm to ensure that we allocate the correct number of bytes and do not read past the end of the input string.
This bug affects krb5 build principal krb5 build principal va and krb5 build principal alloc va.
krb5 build principal ext is not affected.

In MIT krb5 1.7 and later an authenticated attacker may be able to cause a KDC to crash using a TGS request with a large realm field beginning with a null byte.
If the KDC attempts to find a referral to answer the request it constructs a principal name for lookup using krb5 build principal with the requested realm.
Due to a bug in this function the null byte causes only one byte be allocated for the realm field of the constructed principal far less than its length.
Subsequent operations on the lookup principal may cause a read beyond the end of the mapped memory region causing the KDC process to crash.
CVSSv2 AV N AC L Au S C N I N A C E POC RL OF RC C.
ticket 8252 new.
target version 1.14.
tags pullup.",1.0,"['memory', 'crash', 'memory', 'crash', 'POC']"
79,79,93,Nicolas Williams,{},CVE-2015-2696,CWE-18,BIGVUL,"09/14/2015, 16:28:36","{'c', 'h'}","{'src/lib/gssapi/krb5/gssapiP_krb5.h': {'additions': 114, 'deletions': 0, 'changes': 114, 'status': 'modified'}, 'src/lib/gssapi/krb5/gssapi_krb5.c': {'additions': 94, 'deletions': 11, 'changes': 105, 'status': 'modified'}, 'src/lib/gssapi/krb5/iakerb.c': {'additions': 321, 'deletions': 30, 'changes': 351, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/e04f0283516e80d2f93366e0d479d13c9b5c8c2a,{'C/C++'},,positive,"Fix IAKERB context aliasing bugs [CVE-2015-2696]

The IAKERB mechanism currently replaces its context handle with the
krb5 mechanism handle upon establishment, under the assumption that
most GSS functions are only called after context establishment.  This
assumption is incorrect, and can lead to aliasing violations for some
programs.  Maintain the IAKERB context structure after context
establishment and add new IAKERB entry points to refer to it with that
type.  Add initiate and established flags to the IAKERB context
structure for use in gss_inquire_context() prior to context
establishment.

CVE-2015-2696:

In MIT krb5 1.9 and later, applications which call
gss_inquire_context() on a partially-established IAKERB context can
cause the GSS-API library to read from a pointer using the wrong type,
generally causing a process crash.  Java server applications using the
native JGSS provider are vulnerable to this bug.  A carefully crafted
IAKERB packet might allow the gss_inquire_context() call to succeed
with attacker-determined results, but applications should not make
access control decisions based on gss_inquire_context() results prior
to context establishment.

    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C

[ghudson@mit.edu: several bugfixes, style changes, and edge-case
behavior changes; commit message and CVE description]

ticket: 8244
target_version: 1.14
tags: pullup",{'b51b33f2bc5d1497ddf5bd107f791c101695000d'},https://github.com/krb5/krb5,7.1,e04f0283516e80d2f93366e0d479d13c9b5c8c2a,"lib/gssapi/krb5/iakerb.c in MIT Kerberos 5 (aka krb5) before 1.14 relies on an inappropriate context handle, which allows remote attackers to cause a denial of service (incorrect pointer read and process crash) via a crafted IAKERB packet that is mishandled during a gss_inquire_context call.",DoS ,yes,,,,,"Fix IAKERB context aliasing bugs.
The IAKERB mechanism currently replaces its context handle with the krb5 mechanism handle upon establishment under the assumption that most GSS functions are only called after context establishment.
This assumption is incorrect and can lead to aliasing violations for some programs.
Maintain the IAKERB context structure after context establishment and add new IAKERB entry points to refer to it with that type.
Add initiate and established flags to the IAKERB context structure for use in gss inquire context prior to context establishment.

In MIT krb5 1.9 and later applications which call gss inquire context on a partially established IAKERB context can cause the GSS API library to read from a pointer using the wrong type generally causing a process crash.
Java server applications using the native JGSS provider are vulnerable to this bug.
A carefully crafted IAKERB packet might allow the gss inquire context call to succeed with attacker determined results but applications should not make access control decisions based on gss inquire context results prior to context establishment.
CVSSv2 Vector AV N AC M Au N C N I N A C E POC RL OF RC C.
E mail several bugfixes style changes and edge case.
behavior changes commit message and CVE description.
ticket 8244.
target version 1.14.
tags pullup.",1.0,"['crash', 'POC']"
80,80,94,Nicolas Williams,{},CVE-2015-2695,CWE-18,BIGVUL,"09/14/2015, 16:27:52","{'c', 'h'}","{'src/lib/gssapi/spnego/gssapiP_spnego.h': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/spnego/spnego_mech.c': {'additions': 190, 'deletions': 64, 'changes': 254, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/b51b33f2bc5d1497ddf5bd107f791c101695000d,{'C/C++'},,positive,"Fix SPNEGO context aliasing bugs [CVE-2015-2695]

The SPNEGO mechanism currently replaces its context handle with the
mechanism context handle upon establishment, under the assumption that
most GSS functions are only called after context establishment.  This
assumption is incorrect, and can lead to aliasing violations for some
programs.  Maintain the SPNEGO context structure after context
establishment and refer to it in all GSS methods.  Add initiate and
opened flags to the SPNEGO context structure for use in
gss_inquire_context() prior to context establishment.

CVE-2015-2695:

In MIT krb5 1.5 and later, applications which call
gss_inquire_context() on a partially-established SPNEGO context can
cause the GSS-API library to read from a pointer using the wrong type,
generally causing a process crash.  This bug may go unnoticed, because
the most common SPNEGO authentication scenario establishes the context
after just one call to gss_accept_sec_context().  Java server
applications using the native JGSS provider are vulnerable to this
bug.  A carefully crafted SPNEGO packet might allow the
gss_inquire_context() call to succeed with attacker-determined
results, but applications should not make access control decisions
based on gss_inquire_context() results prior to context establishment.

    CVSSv2 Vector: AV:N/AC:M/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C

[ghudson@mit.edu: several bugfixes, style changes, and edge-case
behavior changes; commit message and CVE description]

ticket: 8244
target_version: 1.14
tags: pullup",{'e767d9fe054a9976d3d7ef25348688fc54995832'},https://github.com/krb5/krb5,7.1,b51b33f2bc5d1497ddf5bd107f791c101695000d,"lib/gssapi/spnego/spnego_mech.c in MIT Kerberos 5 (aka krb5) before 1.14 relies on an inappropriate context handle, which allows remote attackers to cause a denial of service (incorrect pointer read and process crash) via a crafted SPNEGO packet that is mishandled during a gss_inquire_context call.",DoS ,yes,,,,,"Fix SPNEGO context aliasing bugs.
The SPNEGO mechanism currently replaces its context handle with the mechanism context handle upon establishment under the assumption that most GSS functions are only called after context establishment.
This assumption is incorrect and can lead to aliasing violations for some programs.
Maintain the SPNEGO context structure after context establishment and refer to it in all GSS methods.
Add initiate and opened flags to the SPNEGO context structure for use in gss inquire context prior to context establishment.

In MIT krb5 1.5 and later applications which call gss inquire context on a partially established SPNEGO context can cause the GSS API library to read from a pointer using the wrong type generally causing a process crash.
This bug may go unnoticed because the most common SPNEGO authentication scenario establishes the context after just one call to gss accept sec context.
Java server applications using the native JGSS provider are vulnerable to this bug.
A carefully crafted SPNEGO packet might allow the gss inquire context call to succeed with attacker determined results but applications should not make access control decisions based on gss inquire context results prior to context establishment.
CVSSv2 Vector AV N AC M Au N C N I N A C E POC RL OF RC C.
E mail several bugfixes style changes and edge case.
behavior changes commit message and CVE description.
ticket 8244.
target version 1.14.
tags pullup.",1.0,"['crash', 'authentication', 'POC']"
81,81,95,Greg Hudson,{},CVE-2015-2694,CWE-264,BIGVUL,"03/24/2015, 16:02:37",{'c'},"{'src/plugins/preauth/otp/main.c': {'additions': 7, 'deletions': 3, 'changes': 10, 'status': 'modified'}, 'src/plugins/preauth/pkinit/pkinit_srv.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/e3b5a5e5267818c97750b266df50b6a3d4649604,{'C/C++'},,positive,"Prevent requires_preauth bypass [CVE-2015-2694]

In the OTP kdcpreauth module, don't set the TKT_FLG_PRE_AUTH bit until
the request is successfully verified.  In the PKINIT kdcpreauth
module, don't respond with code 0 on empty input or an unconfigured
realm.  Together these bugs could cause the KDC preauth framework to
erroneously treat a request as pre-authenticated.

CVE-2015-2694:

In MIT krb5 1.12 and later, when the KDC is configured with PKINIT
support, an unauthenticated remote attacker can bypass the
requires_preauth flag on a client principal and obtain a ciphertext
encrypted in the principal's long-term key.  This ciphertext could be
used to conduct an off-line dictionary attack against the user's
password.

    CVSSv2 Vector: AV:N/AC:M/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:C

ticket: 8160 (new)
target_version: 1.13.2
tags: pullup
subject: requires_preauth bypass in PKINIT-enabled KDC [CVE-2015-2694]",{'527edfaadb648a0dd2a42cd39a5a02a4ac37d7e3'},https://github.com/krb5/krb5,5.8,e3b5a5e5267818c97750b266df50b6a3d4649604,"The kdcpreauth modules in MIT Kerberos 5 (aka krb5) 1.12.x and 1.13.x before 1.13.2 do not properly track whether a client's request has been validated, which allows remote attackers to bypass an intended preauthentication requirement by providing (1) zero bytes of data or (2) an arbitrary realm name, related to plugins/preauth/otp/main.c and plugins/preauth/pkinit/pkinit_srv.c.",Bypass ,yes,,,,,"Prevent requires preauth bypass.
In the OTP kdcpreauth module don t set the TKT FLG PRE AUTH bit until the request is successfully verified.
In the PKINIT kdcpreauth module don t respond with code 0 on empty input or an unconfigured realm.
Together these bugs could cause the KDC preauth framework to erroneously treat a request as pre authenticated.

In MIT krb5 1.12 and later when the KDC is configured with PKINIT support an unauthenticated remote attacker can bypass the requires preauth flag on a client principal and obtain a ciphertext encrypted in the principal s long term key.
This ciphertext could be used to conduct an off line dictionary attack against the user s password.
CVSSv2 Vector AV N AC M Au N C P I P A N E POC RL OF RC C.
ticket 8160 new.
target version 1.13.2.
tags pullup.
subject requires preauth bypass in PKINIT enabled KDC.",1.0,"['Prevent', 'bypass', 'bypass', 'attack', 'password', 'POC', 'bypass']"
98,98,116,Greg Hudson,{},CVE-2014-9423,CWE-200,BIGVUL,"12/29/2014, 18:17:56","{'c', 'h'}","{'src/lib/gssapi/mechglue/mglueP.h': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified'}, 'src/lib/rpc/svc_auth_gss.c': {'additions': 2, 'deletions': 23, 'changes': 25, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c,{'C/C++'},,positive,"Fix gssrpc data leakage [CVE-2014-9423]

[MITKRB5-SA-2015-001] In svcauth_gss_accept_sec_context(), do not copy
bytes from the union context into the handle field we send to the
client.  We do not use this handle field, so just supply a fixed
string of ""xxxx"".

In gss_union_ctx_id_struct, remove the unused ""interposer"" field which
was causing part of the union context to remain uninitialized.

ticket: 8058 (new)
target_version: 1.13.1
tags: pullup",{'6609658db0799053fbef0d7d0aa2f1fd68ef32d8'},https://github.com/krb5/krb5,5.0,5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c,"The svcauth_gss_accept_sec_context function in lib/rpc/svc_auth_gss.c in MIT Kerberos 5 (aka krb5) 1.11.x through 1.11.5, 1.12.x through 1.12.2, and 1.13.x before 1.13.1 transmits uninitialized interposer data to clients, which allows remote attackers to obtain sensitive information from process heap memory by sniffing the network for data in a handle field.",+Info ,yes,,,,,"Fix gssrpc data leakage.
MITKRB5 SA 2015 001 In svcauth gss accept sec context do not copy bytes from the union context into the handle field we send to the client.
We do not use this handle field so just supply a fixed string of xxxx.
In gss union ctx id struct remove the unused interposer field which was causing part of the union context to remain uninitialized.
ticket 8058 new.
target version 1.13.1.
tags pullup.",0.0,
99,99,118,Greg Hudson,{},CVE-2014-9421,,BIGVUL,"12/27/2014, 19:16:13",{'c'},"{'src/lib/kadm5/kadm_rpc_xdr.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/rpc/auth_gssapi_misc.c': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/a197e92349a4aa2141b5dff12e9dd44c2a2166e3,{'C/C++'},,positive,"Fix kadm5/gssrpc XDR double free [CVE-2014-9421]

[MITKRB5-SA-2015-001] In auth_gssapi_unwrap_data(), do not free
partial deserialization results upon failure to deserialize.  This
responsibility belongs to the callers, svctcp_getargs() and
svcudp_getargs(); doing it in the unwrap function results in freeing
the results twice.

In xdr_krb5_tl_data() and xdr_krb5_principal(), null out the pointers
we are freeing, as other XDR functions such as xdr_bytes() and
xdr_string().

ticket: 8056 (new)
target_version: 1.13.1
tags: pullup",{'82dc33da50338ac84c7b4102dc6513d897d0506a'},https://github.com/krb5/krb5,9.0,a197e92349a4aa2141b5dff12e9dd44c2a2166e3,"The auth_gssapi_unwrap_data function in lib/rpc/auth_gssapi_misc.c in MIT Kerberos 5 (aka krb5) through 1.11.5, 1.12.x through 1.12.2, and 1.13.x before 1.13.1 does not properly handle partial XDR deserialization, which allows remote authenticated users to cause a denial of service (use-after-free and double free, and daemon crash) or possibly execute arbitrary code via malformed XDR data, as demonstrated by data sent to kadmind.",DoS Exec Code ,yes,,,,,"Fix kadm5 gssrpc XDR double free.
MITKRB5 SA 2015 001 In auth gssapi unwrap data do not free partial deserialization results upon failure to deserialize.
This responsibility belongs to the callers svctcp getargs and svcudp getargs doing it in the unwrap function results in freeing the results twice.
In xdr krb5 tl data and xdr krb5 principal null out the pointers we are freeing as other XDR functions such as xdr bytes and xdr string.
ticket 8056 new.
target version 1.13.1.
tags pullup.",1.0,['double free']
100,100,119,Greg Hudson,{},CVE-2014-5355,,BIGVUL,"12/09/2014, 17:37:44",{'c'},"{'src/appl/user_user/server.c': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified'}, 'src/lib/krb5/krb/recvauth.c': {'additions': 6, 'deletions': 3, 'changes': 9, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/102bb6ebf20f9174130c85c3b052ae104e5073ec,{'C/C++'},,positive,"Fix krb5_read_message handling [CVE-2014-5355]

In recvauth_common, do not use strcmp against the data fields of
krb5_data objects populated by krb5_read_message(), as there is no
guarantee that they are C strings.  Instead, create an expected
krb5_data value and use data_eq().

In the sample user-to-user server application, check that the received
client principal name is null-terminated before using it with printf
and krb5_parse_name.

CVE-2014-5355:

In MIT krb5, when a server process uses the krb5_recvauth function, an
unauthenticated remote attacker can cause a NULL dereference by
sending a zero-byte version string, or a read beyond the end of
allocated storage by sending a non-null-terminated version string.
The example user-to-user server application (uuserver) is similarly
vulnerable to a zero-length or non-null-terminated principal name
string.

The krb5_recvauth function reads two version strings from the client
using krb5_read_message(), which produces a krb5_data structure
containing a length and a pointer to an octet sequence.  krb5_recvauth
assumes that the data pointer is a valid C string and passes it to
strcmp() to verify the versions.  If the client sends an empty octet
sequence, the data pointer will be NULL and strcmp() will dereference
a NULL pointer, causing the process to crash.  If the client sends a
non-null-terminated octet sequence, strcmp() will read beyond the end
of the allocated storage, possibly causing the process to crash.

uuserver similarly uses krb5_read_message() to read a client principal
name, and then passes it to printf() and krb5_parse_name() without
verifying that it is a valid C string.

The krb5_recvauth function is used by kpropd and the Kerberized
versions of the BSD rlogin and rsh daemons.  These daemons are usually
run out of inetd or in a mode which forks before processing incoming
connections, so a process crash will generally not result in a
complete denial of service.

Thanks to Tim Uglow for discovering this issue.

CVSSv2: AV:N/AC:L/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C

[tlyu@mit.edu: CVSS score]

ticket: 8050 (new)
target_version: 1.13.1
tags: pullup",{'5e54fa769d1b04ccf0d904164e897d081051647f'},https://github.com/krb5/krb5,5.0,102bb6ebf20f9174130c85c3b052ae104e5073ec,"MIT Kerberos 5 (aka krb5) through 1.13.1 incorrectly expects that a krb5_read_message data field is represented as a string ending with a '0' character, which allows remote attackers to (1) cause a denial of service (NULL pointer dereference) via a zero-byte version string or (2) cause a denial of service (out-of-bounds read) by omitting the '0' character, related to appl/user_user/server.c and lib/krb5/krb/recvauth.c.",DoS ,yes,,,,,"Fix krb5 read message handling.
In recvauth common do not use strcmp against the data fields of krb5 data objects populated by krb5 read message as there is no guarantee that they are C strings.
Instead create an expected krb5 data value and use data eq.
In the sample user to user server application check that the received client principal name is null terminated before using it with printf and krb5 parse name.

In MIT krb5 when a server process uses the krb5 recvauth function an unauthenticated remote attacker can cause a NULL dereference by sending a zero byte version string or a read beyond the end of allocated storage by sending a non null terminated version string.
The example user to user server application uuserver is similarly vulnerable to a zero length or non null terminated principal name string.
The krb5 recvauth function reads two version strings from the client using krb5 read message which produces a krb5 data structure containing a length and a pointer to an octet sequence.
krb5 recvauth assumes that the data pointer is a valid C string and passes it to strcmp to verify the versions.
If the client sends an empty octet sequence the data pointer will be NULL and strcmp will dereference a NULL pointer causing the process to crash.
If the client sends a non null terminated octet sequence strcmp will read beyond the end of the allocated storage possibly causing the process to crash.
uuserver similarly uses krb5 read message to read a client principal name and then passes it to printf and krb5 parse name without verifying that it is a valid C string.
The krb5 recvauth function is used by kpropd and the Kerberized versions of the BSD rlogin and rsh daemons.
These daemons are usually run out of inetd or in a mode which forks before processing incoming connections so a process crash will generally not result in a complete denial of service.
Thanks to Tim Uglow for discovering this issue.
CVSSv2 AV N AC L Au N C N I N A P E POC RL OF RC C.
E mail CVSS score.
ticket 8050 new.
target version 1.13.1.
tags pullup.",1.0,"['NULL dereference', 'valid', 'verify', 'crash', 'crash', 'valid', 'crash', 'POC']"
101,101,120,Greg Hudson,{},CVE-2014-5352,,BIGVUL,"11/05/2014, 16:58:04","{'c', 'h'}","{'src/lib/gssapi/krb5/context_time.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/export_sec_context.c': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified'}, 'src/lib/gssapi/krb5/gssapiP_krb5.h': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'src/lib/gssapi/krb5/gssapi_krb5.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/inq_context.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/k5seal.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/k5sealiov.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/k5unseal.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/k5unsealiov.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/krb5/lucid_context.c': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified'}, 'src/lib/gssapi/krb5/prf.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'src/lib/gssapi/krb5/process_context_token.c': {'additions': 12, 'deletions': 5, 'changes': 17, 'status': 'modified'}, 'src/lib/gssapi/krb5/wrap_size_limit.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'src/tests/gssapi/t_prf.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/82dc33da50338ac84c7b4102dc6513d897d0506a,{'C/C++'},,positive,"Fix gss_process_context_token() [CVE-2014-5352]

[MITKRB5-SA-2015-001] The krb5 gss_process_context_token() should not
actually delete the context; that leaves the caller with a dangling
pointer and no way to know that it is invalid.  Instead, mark the
context as terminated, and check for terminated contexts in the GSS
functions which expect established contexts.  Also add checks in
export_sec_context and pseudo_random, and adjust t_prf.c for the
pseudo_random check.

ticket: 8055 (new)
target_version: 1.13.1
tags: pullup",{'19bb843b40d3f62f4e29f4847717862f1423135e'},https://github.com/krb5/krb5,9.0,82dc33da50338ac84c7b4102dc6513d897d0506a,"The krb5_gss_process_context_token function in lib/gssapi/krb5/process_context_token.c in the libgssapi_krb5 library in MIT Kerberos 5 (aka krb5) through 1.11.5, 1.12.x through 1.12.2, and 1.13.x before 1.13.1 does not properly maintain security-context handles, which allows remote authenticated users to cause a denial of service (use-after-free and double free, and daemon crash) or possibly execute arbitrary code via crafted GSSAPI traffic, as demonstrated by traffic to kadmind.",DoS Exec Code ,yes,,,,,"Fix gss process context token.
MITKRB5 SA 2015 001 The krb5 gss process context token should not actually delete the context that leaves the caller with a dangling pointer and no way to know that it is invalid.
Instead mark the context as terminated and check for terminated contexts in the GSS functions which expect established contexts.
Also add checks in export sec context and pseudo random and adjust t prf.c for the pseudo random check.
ticket 8055 new.
target version 1.13.1.
tags pullup.",1.0,['invalid']
118,118,138,Greg Hudson,{},CVE-2016-3119,,BIGVUL,"03/14/2016, 21:26:34",{'c'},"{'src/plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/08c642c09c38a9c6454ab43a9b53b2a89b9eef99,{'C/C++'},,positive,"Fix LDAP null deref on empty arg [CVE-2016-3119]

In the LDAP KDB module's process_db_args(), strtok_r() may return NULL
if there is an empty string in the db_args array.  Check for this case
and avoid dereferencing a null pointer.

CVE-2016-3119:

In MIT krb5 1.6 and later, an authenticated attacker with permission
to modify a principal entry can cause kadmind to dereference a null
pointer by supplying an empty DB argument to the modify_principal
command, if kadmind is configured to use the LDAP KDB module.

    CVSSv2 Vector: AV:N/AC:H/Au:S/C:N/I:N/A:C/E:H/RL:OF/RC:ND

ticket: 8383 (new)
target_version: 1.14-next
target_version: 1.13-next
tags: pullup",{'89683d1f135765e91041f3a239af865b11aaf86b'},https://github.com/krb5/krb5,3.5,08c642c09c38a9c6454ab43a9b53b2a89b9eef99,"The process_db_args function in plugins/kdb/ldap/libkdb_ldap/ldap_principal2.c in the LDAP KDB module in kadmind in MIT Kerberos 5 (aka krb5) through 1.13.4 and 1.14.x through 1.14.1 mishandles the DB argument, which allows remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) via a crafted request to modify a principal.",DoS ,yes,,,,,"Fix LDAP null deref on empty arg.
In the LDAP KDB module s process db args strtok r may return NULL if there is an empty string in the db args array.
Check for this case and avoid dereferencing a null pointer.

In MIT krb5 1.6 and later an authenticated attacker with permission to modify a principal entry can cause kadmind to dereference a null pointer by supplying an empty DB argument to the modify principal command if kadmind is configured to use the LDAP KDB module.
CVSSv2 Vector AV N AC H Au S C N I N A C E H RL OF RC ND.
ticket 8383 new.
target version 1.14 next.
target version 1.13 next.
tags pullup.",1.0,['null deref']
128,128,148,Greg Hudson,{},CVE-2015-8631,CWE-119,BIGVUL,"01/08/2016, 18:16:54",{'c'},"{'src/kadmin/server/server_stubs.c': {'additions': 77, 'deletions': 74, 'changes': 151, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/83ed75feba32e46f736fcce0d96a0445f29b96c2,{'C/C++'},,positive,"Fix leaks in kadmin server stubs [CVE-2015-8631]

In each kadmind server stub, initialize the client_name and
server_name variables, and release them in the cleanup handler.  Many
of the stubs will otherwise leak the client and server name if
krb5_unparse_name() fails.  Also make sure to free the prime_arg
variables in rename_principal_2_svc(), or we can leak the first one if
unparsing the second one fails.  Discovered by Simo Sorce.

CVE-2015-8631:

In all versions of MIT krb5, an authenticated attacker can cause
kadmind to leak memory by supplying a null principal name in a request
which uses one.  Repeating these requests will eventually cause
kadmind to exhaust all available memory.

    CVSSv2 Vector: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C

ticket: 8343 (new)
target_version: 1.14-next
target_version: 1.13-next
tags: pullup",{'b863de7fbf080b15e347a736fdda0a82d42f4f6b'},https://github.com/krb5/krb5,6.8,83ed75feba32e46f736fcce0d96a0445f29b96c2,Multiple memory leaks in kadmin/server/server_stubs.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13.4 and 1.14.x before 1.14.1 allow remote authenticated users to cause a denial of service (memory consumption) via a request specifying a NULL principal name.,DoS Overflow ,yes,,,,,"Fix leaks in kadmin server stubs.
In each kadmind server stub initialize the client name and server name variables and release them in the cleanup handler.
Many of the stubs will otherwise leak the client and server name if krb5 unparse name fails.
Also make sure to free the prime arg variables in rename principal 2 svc or we can leak the first one if unparsing the second one fails.
Discovered by Simo Sorce.

In all versions of MIT krb5 an authenticated attacker can cause kadmind to leak memory by supplying a null principal name in a request which uses one.
Repeating these requests will eventually cause kadmind to exhaust all available memory.
CVSSv2 Vector AV N AC L Au S C N I N A C E POC RL OF RC C.
ticket 8343 new.
target version 1.14 next.
target version 1.13 next.
tags pullup.",1.0,"['initialize', 'leak', 'leak', 'leak', 'memory', 'exhaust', 'memory', 'POC']"
129,129,149,Greg Hudson,{},CVE-2015-8630,,BIGVUL,"01/08/2016, 17:52:28",{'c'},"{'src/lib/kadm5/srv/svr_principal.c': {'additions': 8, 'deletions': 4, 'changes': 12, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/b863de7fbf080b15e347a736fdda0a82d42f4f6b,{'C/C++'},,positive,"Check for null kadm5 policy name [CVE-2015-8630]

In kadm5_create_principal_3() and kadm5_modify_principal(), check for
entry->policy being null when KADM5_POLICY is included in the mask.

CVE-2015-8630:

In MIT krb5 1.12 and later, an authenticated attacker with permission
to modify a principal entry can cause kadmind to dereference a null
pointer by supplying a null policy value but including KADM5_POLICY in
the mask.

    CVSSv2 Vector: AV:N/AC:H/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C

ticket: 8342 (new)
target_version: 1.14-next
target_version: 1.13-next
tags: pullup",{'df17a1224a3406f57477bcd372c61e04c0e5a5bb'},https://github.com/krb5/krb5,5.0,b863de7fbf080b15e347a736fdda0a82d42f4f6b,The (1) kadm5_create_principal_3 and (2) kadm5_modify_principal functions in lib/kadm5/srv/svr_principal.c in kadmind in MIT Kerberos 5 (aka krb5) 1.12.x and 1.13.x before 1.13.4 and 1.14.x before 1.14.1 allow remote authenticated users to cause a denial of service (NULL pointer dereference and daemon crash) by specifying KADM5_POLICY with a NULL policy name.,DoS ,yes,,,,,"Check for null kadm5 policy name.
In kadm5 create principal 3 and kadm5 modify principal check for entry policy being null when KADM5 POLICY is included in the mask.

In MIT krb5 1.12 and later an authenticated attacker with permission to modify a principal entry can cause kadmind to dereference a null pointer by supplying a null policy value but including KADM5 POLICY in the mask.
CVSSv2 Vector AV N AC H Au S C N I N A C E POC RL OF RC C.
ticket 8342 new.
target version 1.14 next.
target version 1.13 next.
tags pullup.",1.0,['POC']
130,130,150,Greg Hudson,{},CVE-2015-8629,CWE-119,BIGVUL,"01/08/2016, 17:45:25",{'c'},"{'src/lib/kadm5/kadm_rpc_xdr.c': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/df17a1224a3406f57477bcd372c61e04c0e5a5bb,{'C/C++'},,positive,"Verify decoded kadmin C strings [CVE-2015-8629]

In xdr_nullstring(), check that the decoded string is terminated with
a zero byte and does not contain any internal zero bytes.

CVE-2015-8629:

In all versions of MIT krb5, an authenticated attacker can cause
kadmind to read beyond the end of allocated memory by sending a string
without a terminating zero byte.  Information leakage may be possible
for an attacker with permission to modify the database.

    CVSSv2 Vector: AV:N/AC:H/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C

ticket: 8341 (new)
target_version: 1.14-next
target_version: 1.13-next
tags: pullup",{'c546a30c7c9299a419f757768a3349bde09c9cd4'},https://github.com/krb5/krb5,2.1,df17a1224a3406f57477bcd372c61e04c0e5a5bb,"The xdr_nullstring function in lib/kadm5/kadm_rpc_xdr.c in kadmind in MIT Kerberos 5 (aka krb5) before 1.13.4 and 1.14.x before 1.14.1 does not verify whether '0' characters exist as expected, which allows remote authenticated users to obtain sensitive information or cause a denial of service (out-of-bounds read) via a crafted string.",DoS Overflow +Info ,yes,,,,,"Verify decoded kadmin C strings.
In xdr nullstring check that the decoded string is terminated with a zero byte and does not contain any internal zero bytes.

In all versions of MIT krb5 an authenticated attacker can cause kadmind to read beyond the end of allocated memory by sending a string without a terminating zero byte.
Information leakage may be possible for an attacker with permission to modify the database.
CVSSv2 Vector AV N AC H Au S C P I N A N E POC RL OF RC C.
ticket 8341 new.
target version 1.14 next.
target version 1.13 next.
tags pullup.",1.0,"['Verify', 'memory', 'POC']"
139,139,160,Guy Harris,{},CVE-2017-13690,CWE-125,BIGVUL,"08/24/2017, 04:08:42","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 14, 'deletions': 7, 'changes': 21, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isakmp-various-oobr.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/isakmp-various-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/8dca25d26c7ca2caf6138267f6f17111212c156e,{'C/C++'},,positive,"CVE-2017-13690/IKEv2: Fix some bounds checks.

Use a pointer of the correct type in ND_TCHECK(), or use ND_TCHECK2()
and provide the correct length.

While we're at it, remove the blank line between some checks and the
UNALIGNED_MEMCPY()s they protect.

Also, note the places where we print the entire payload.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'061e7371a944588f231cb1b66d6fb070b646e376'},https://github.com/the-tcpdump-group/tcpdump,7.5,8dca25d26c7ca2caf6138267f6f17111212c156e,"The IKEv2 parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c, several functions.",,yes,,,,,"Fix some bounds checks.
Use a pointer of the correct type in ND TCHECK or use ND TCHECK2 and provide the correct length.
While we re at it remove the blank line between some checks and the UNALIGNED MEMCPY s they protect.
Also note the places where we print the entire payload.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",1.0,['protect']
140,140,161,Guy Harris,{},CVE-2017-13689,CWE-125,BIGVUL,"08/24/2017, 03:45:39","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ikev1_id_ipv6_addr_subnet-oobr.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/ikev1_id_ipv6_addr_subnet-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/061e7371a944588f231cb1b66d6fb070b646e376,{'C/C++'},,positive,"CVE-2017-13689/IKEv1: Fix addr+subnet length check.

An IPv6 address plus subnet mask is 32 bytes, not 20 bytes.
16 bytes of IPv6 address, 16 bytes of subnet mask.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'0cb1b8a434b599b8d636db029aadb757c24e39d6'},https://github.com/the-tcpdump-group/tcpdump,7.5,061e7371a944588f231cb1b66d6fb070b646e376,The IKEv1 parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c:ikev1_id_print().,,yes,,,,,"Fix addr subnet length check.
An IPv6 address plus subnet mask is 32 bytes not 20 bytes.
16 bytes of IPv6 address 16 bytes of subnet mask.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
141,141,162,Guy Harris,"{'com_1': {'author': 'gvanem', 'date': '09/14/2017, 19:33:17', 'body': 'A slight failure on this test using MSVC. The diff:\r\n```diff\r\n--- olsr-oobr-1.out\r\n+++ NEW_py/olsr-oobr-1.out\r\n@@ -2,5 +2,5 @@\r\n     15.251.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0800, length 2056\r\n        Nameservice Message (0x82), originator 126.198.193.192, ttl 26, hop 145\r\n-         vtime 0.063s, msg-seq 0x0008, length 127[|olsr]\r\n+         vtime 0.062s, msg-seq 0x0008, length 127[|olsr]\r\n IP truncated-ip - 2315 bytes missing! (tos 0x0, ttl 18, id 4111, offset 0, flags [+, DF, rsvd], proto UDP (17), length 5373, bad cksum 8e7f (->975f)!)\r\n     16.0.128.192.698 > 193.192.186.0.122: OLSRv4, seq 0x0400, length 512\r\n```\r\nA whopping 1 msec!\r\n\r\nThe same for the other `vtime` values. Caused by the `ME_TO_DOUBLE()` macro used in `print-olsr.c`. \r\nSeems this macro *ass-u_me*s gcc.\r\n\r\n*Edit*: I ran all tests using my [Python-script](https://gist.github.com/gvanem/5c3b359d5f1fc623035e938307f894a5), not the bash/perl stuff (works like a charm).'}, 'com_2': {'author': 'infrastation', 'date': '09/14/2017, 19:36:05', 'body': 'See `tests/lmp-v.sh` for a very similar case.'}, 'com_3': {'author': 'gvanem', 'date': '09/14/2017, 19:43:14', 'body': 'Thanks for the reminder. Old story which seems hard to fix.'}, 'com_4': {'author': 'infrastation', 'date': '09/15/2017, 10:05:50', 'body': 'Gisle, could you tell which CPU your host has and whether MSVC uses FPU for float calculations?'}, 'com_5': {'author': 'guyharris', 'date': '09/15/2017, 10:53:22', 'body': '> whether MSVC uses FPU for float calculations?\r\n\r\nAs in ""uses the FPU or uses SSE"" - the FPU instructions do 80-bit floating-point internally, with 80-bit registers, but the SSE instructions do purely 64-bit floating-point (as do, I think, floating-point instructions on most other processors).'}, 'com_6': {'author': 'gvanem', 'date': '09/15/2017, 11:27:04', 'body': '@infrastation  I have an Intel-i7 CPU. Seems MSVC uses SSE2 for that macro.\r\n```c\r\ndouble me_to_double (uint8_t vtime)\r\n{\r\n  return ME_TO_DOUBLE (vtime);\r\n}\r\n```\r\nDisassembles into:\r\n```asm\r\n _me_to_double:\r\n         sub             esp,0x00000008\r\n         mov             dl,byte ptr 0xc[esp]\r\n         mov             eax,0x00000001\r\n         movzx           ecx,dl\r\n         and             ecx,0x0000000f\r\n         shl             eax,cl\r\n         shr             dl,0x04\r\n         movd            xmm2,eax\r\n         movzx           eax,dl\r\n         cvtdq2pd        xmm2,xmm2\r\n         movd            xmm1,eax\r\n         cvtdq2pd        xmm1,xmm1\r\n         mulsd           xmm1,__real@3fb0000000000000\r\n         addsd           xmm1,__real@3ff0000000000000\r\n         mulsd           xmm1,__real@3fb0000000000000\r\n         mulsd           xmm2,xmm1\r\n         movsd           [esp],xmm2\r\n         fld             qword ptr [esp]\r\n         add             esp,0x00000008\r\n         ret\r\n```\r\n\r\nI get the same 1 msec ""error"" when using `-arch:IA32` (no SSE instructions). No surprise there.'}, 'com_7': {'author': 'infrastation', 'date': '09/15/2017, 11:40:59', 'body': ""The current tests in the git repository are produced with GCC's `-ffloat-store`, which make then reproduce exactly on all architectures. When the compiler is not GCC, those tests are skipped. Perhaps it would help to have an equivalent flag enabled for other compilers if they can reliably implement the same behaviour. Or we can move this test to a GCC-specific block and forget about it for a while longer.""}}",CVE-2017-13688,CWE-125,BIGVUL,"08/24/2017, 02:26:37","{'pcap', 'out', 'c'}","{'print-olsr.c': {'additions': 12, 'deletions': 9, 'changes': 21, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/olsr-oobr-1.out': {'additions': 16, 'deletions': 0, 'changes': 16, 'status': 'added'}, 'tests/olsr-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/olsr-oobr-2.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/olsr-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/0cb1b8a434b599b8d636db029aadb757c24e39d6,{'C/C++'},,positive,"CVE-2017-13688/OLSR: Do bounds checks before we fetch data.

While we're at it, clean up some other bounds checks, so we check that
we have a complete IPv4 message header if it's IPv4 and a complete IPv6
message header if it's IPv6.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add tests using the capture files supplied by the reporter(s).",{'26b956739a77641634964e90aa765884daef0d0f'},https://github.com/the-tcpdump-group/tcpdump,7.5,0cb1b8a434b599b8d636db029aadb757c24e39d6,The OLSR parser in tcpdump before 4.9.2 has a buffer over-read in print-olsr.c:olsr_print().,,yes,,,,,"Do bounds checks before we fetch data.
While we re at it clean up some other bounds checks so we check that we have a complete IPv4 message header if it s IPv4 and a complete IPv6 message header if it s IPv6.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add tests using the capture files supplied by the reporter s .",0.0,
143,143,164,Denis Ovsienko,{},CVE-2017-13055,CWE-125,BIGVUL,"08/16/2017, 22:04:31","{'pcap', 'out', 'c'}","{'print-isoclns.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isis-extd-isreach-oobr.out': {'additions': 39, 'deletions': 0, 'changes': 39, 'status': 'added'}, 'tests/isis-extd-isreach-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/isis-seg-fault-1-v.out': {'additions': 152, 'deletions': 271, 'changes': 423, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e,{'C/C++'},,positive,"CVE-2017-13055/IS-IS: fix an Extended IS Reachability sub-TLV

In isis_print_is_reach_subtlv() one of the case blocks did not check that
the sub-TLV ""V"" is actually present and could over-read the input buffer.
Add a length check to fix that and remove a useless boundary check from
a loop because the boundary is tested for the full length of ""V"" before
the switch block.

Update one of the prior test cases as it turns out it depended on this
previously incorrect code path to make it to its own malformed structure
further down the buffer, the bugfix has changed its output.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'5d340a5ca6e420a70297cdbdf777333f18bfdab7'},https://github.com/the-tcpdump-group/tcpdump,7.5,5d0d76e88ee2d3236d7e032589d6f1d4ec5f7b1e,The ISO IS-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:isis_print_is_reach_subtlv().,,yes,,,,,"fix an Extended IS Reachability sub TLV.
In isis print is reach subtlv one of the case blocks did not check that the sub TLV V is actually present and could over read the input buffer.
Add a length check to fix that and remove a useless boundary check from a loop because the boundary is tested for the full length of V before the switch block.
Update one of the prior test cases as it turns out it depended on this previously incorrect code path to make it to its own malformed structure further down the buffer the bugfix has changed its output.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
144,144,165,Denis Ovsienko,{},CVE-2017-13054,CWE-125,BIGVUL,"08/09/2017, 23:01:55","{'pcap', 'out', 'c'}","{'print-lldp.c': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/lldp_8023_mtu-oobr.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/lldp_8023_mtu-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/e6511cc1a950fe1566b2236329d6b4bd0826cc7a,{'C/C++'},,positive,"CVE-2017-13054/LLDP: add a missing length check

In lldp_private_8023_print() the case block for subtype 4 (Maximum Frame
Size TLV, IEEE 802.3bc-2009 Section 79.3.4) did not include the length
check and could over-read the input buffer, put it right.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'83c64fce3a5226b080e535f5131a8a318f30e79b'},https://github.com/the-tcpdump-group/tcpdump,7.5,e6511cc1a950fe1566b2236329d6b4bd0826cc7a,The LLDP parser in tcpdump before 4.9.2 has a buffer over-read in print-lldp.c:lldp_private_8023_print().,,yes,,,,,"add a missing length check.
In lldp private 8023 print the case block for subtype 4 Maximum Frame Size TLV IEEE 802.3bc 2009 Section 79.3.4 did not include the length check and could over read the input buffer put it right.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
145,145,166,Denis Ovsienko,{},CVE-2017-13053,CWE-125,BIGVUL,"08/11/2017, 12:39:02","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 19, 'deletions': 3, 'changes': 22, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp_vpn_rt-oobr.out': {'additions': 43, 'deletions': 0, 'changes': 43, 'status': 'added'}, 'tests/bgp_vpn_rt-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/bd4e697ebd6c8457efa8f28f6831fc929b88a014,{'C/C++'},,positive,"CVE-2017-13053/BGP: fix VPN route target bounds checks

decode_rt_routing_info() didn't check bounds before fetching 4 octets of
the origin AS field and could over-read the input buffer, put it right.

It also fetched the varying number of octets of the route target field
from 4 octets lower than the correct offset, put it right.

It also used the same temporary buffer explicitly through as_printf()
and implicitly through bgp_vpn_rd_print() so the end result of snprintf()
was not what was originally intended.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'e6511cc1a950fe1566b2236329d6b4bd0826cc7a'},https://github.com/the-tcpdump-group/tcpdump,7.5,bd4e697ebd6c8457efa8f28f6831fc929b88a014,The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:decode_rt_routing_info().,,yes,,,,,"fix VPN route target bounds checks.
decode rt routing info didn t check bounds before fetching 4 octets of the origin AS field and could over read the input buffer put it right.
It also fetched the varying number of octets of the route target field from 4 octets lower than the correct offset put it right.
It also used the same temporary buffer explicitly through as printf and implicitly through bgp vpn rd print so the end result of snprintf was not what was originally intended.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",1.0,['snprintf']
146,146,167,Denis Ovsienko,{},CVE-2017-13052,CWE-125,BIGVUL,"08/14/2017, 23:05:32","{'pcap', 'out', 'c'}","{'print-cfm.c': {'additions': 53, 'deletions': 9, 'changes': 62, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/cfm_sender_id-oobr.out': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'added'}, 'tests/cfm_sender_id-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/5d340a5ca6e420a70297cdbdf777333f18bfdab7,{'C/C++'},,positive,"CVE-2017-13052/CFM: refine decoding of the Sender ID TLV

In cfm_network_addr_print() add a length argument and use it to validate
the input buffer.

In cfm_print() add a length check for MAC address chassis ID. Supply
cfm_network_addr_print() with the length of its buffer and a correct
pointer to the buffer (it was off-by-one before). Change some error
handling blocks to skip to the next TLV in the current PDU rather than to
stop decoding the PDU. Print the management domain and address contents,
although in hex only so far.

Add some comments to clarify the code flow and to tell exact sections in
IEEE standard documents. Add new error messages and make some existing
messages more specific.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'bd4e697ebd6c8457efa8f28f6831fc929b88a014'},https://github.com/the-tcpdump-group/tcpdump,7.5,5d340a5ca6e420a70297cdbdf777333f18bfdab7,The CFM parser in tcpdump before 4.9.2 has a buffer over-read in print-cfm.c:cfm_print().,,yes,,,,,"refine decoding of the Sender ID TLV.
In cfm network addr print add a length argument and use it to validate the input buffer.
In cfm print add a length check for MAC address chassis ID.
Supply cfm network addr print with the length of its buffer and a correct pointer to the buffer it was off by one before.
Change some error handling blocks to skip to the next TLV in the current PDU rather than to stop decoding the PDU.
Print the management domain and address contents although in hex only so far.
Add some comments to clarify the code flow and to tell exact sections in IEEE standard documents.
Add new error messages and make some existing messages more specific.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
147,147,168,Denis Ovsienko,{},CVE-2017-13051,CWE-125,BIGVUL,"08/07/2017, 21:43:20","{'pcap', 'out', 'c'}","{'print-rsvp.c': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/rsvp_uni-oobr-1.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/rsvp_uni-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/rsvp_uni-oobr-2.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/rsvp_uni-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/rsvp_uni-oobr-3.out': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'added'}, 'tests/rsvp_uni-oobr-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/289c672020280529fd382f3502efab7100d638ec,{'C/C++'},,positive,"CVE-2017-13051/RSVP: fix bounds checks for UNI

Fixup the part of rsvp_obj_print() that decodes the GENERALIZED_UNI
object from RFC 3476 Section 3.1 to check the sub-objects inside that
object more thoroughly.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'331530a4076c69bbd2e3214db6ccbe834fb75640'},https://github.com/the-tcpdump-group/tcpdump,7.5,289c672020280529fd382f3502efab7100d638ec,The RSVP parser in tcpdump before 4.9.2 has a buffer over-read in print-rsvp.c:rsvp_obj_print().,,yes,,,,,"fix bounds checks for UNI.
Fixup the part of rsvp obj print that decodes the GENERALIZED UNI object from RFC 3476 Section 3.1 to check the sub objects inside that object more thoroughly.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
148,148,169,Denis Ovsienko,{},CVE-2017-13050,CWE-125,BIGVUL,"08/09/2017, 18:51:09","{'pcap', 'out', 'c'}","{'print-rpki-rtr.c': {'additions': 103, 'deletions': 66, 'changes': 169, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/kday2.out': {'additions': 1, 'deletions': 8, 'changes': 9, 'status': 'modified'}, 'tests/kday3.out': {'additions': 2, 'deletions': 16, 'changes': 18, 'status': 'modified'}, 'tests/kday4.out': {'additions': 3, 'deletions': 28, 'changes': 31, 'status': 'modified'}, 'tests/kday5.out': {'additions': 1, 'deletions': 9, 'changes': 10, 'status': 'modified'}, 'tests/kday7.out': {'additions': 3, 'deletions': 26, 'changes': 29, 'status': 'modified'}, 'tests/kday8.out': {'additions': 1, 'deletions': 8, 'changes': 9, 'status': 'modified'}, 'tests/rpki-rtr-oob.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/rpki-rtr-oob.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/83c64fce3a5226b080e535f5131a8a318f30e79b,{'C/C++'},,positive,"CVE-2017-13050/RPKI-Router: fix a few bugs

The decoder didn't properly check that the PDU length stored in the PDU
header is correct. The only check in place was in rpki_rtr_print() and it
tested whether the length is zero but that is not sufficient. Make all
necessary length and bounds checks, both generic and type-specific, in
rpki_rtr_pdu_print() and reduce rpki_rtr_print() to a simple loop.

This also fixes a minor bug and PDU type 0 (Serial Notify from RFC 6810
Section 5.2) is valid again.

In rpki_rtr_pdu_print() any protocol version was considered version 0,
fix it to skip the rest of input if the PDU protocol version is unknown.

Ibid, the PDU type 10 (Error Report from RFC 6810 Section 5.10) case
block didn't consider the ""Length of Error Text"" data element mandatory,
put it right.

Ibid, when printing an encapsulated PDU, give itself (via recursion)
respective buffer length to make it possible to tell whether the
encapsulated PDU fits. Do not recurse deeper than 2nd level.

Update prior RPKI-Router test cases that now stop to decode earlier
because of the stricter checks.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'289c672020280529fd382f3502efab7100d638ec'},https://github.com/the-tcpdump-group/tcpdump,7.5,83c64fce3a5226b080e535f5131a8a318f30e79b,The RPKI-Router parser in tcpdump before 4.9.2 has a buffer over-read in print-rpki-rtr.c:rpki_rtr_pdu_print().,,yes,,,,,"fix a few bugs.
The decoder didn t properly check that the PDU length stored in the PDU header is correct.
The only check in place was in rpki rtr print and it tested whether the length is zero but that is not sufficient.
Make all necessary length and bounds checks both generic and type specific in rpki rtr pdu print and reduce rpki rtr print to a simple loop.
This also fixes a minor bug and PDU type 0 Serial Notify from RFC 6810 Section 5.2 is valid again.
In rpki rtr pdu print any protocol version was considered version 0 fix it to skip the rest of input if the PDU protocol version is unknown.
Ibid the PDU type 10 Error Report from RFC 6810 Section 5.10 case block didn t consider the Length of Error Text data element mandatory put it right.
Ibid when printing an encapsulated PDU give itself via recursion respective buffer length to make it possible to tell whether the encapsulated PDU fits.
Do not recurse deeper than 2nd level.
Update prior RPKI Router test cases that now stop to decode earlier because of the stricter checks.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",1.0,['valid']
149,149,170,Denis Ovsienko,{},CVE-2017-13049,CWE-125,BIGVUL,"08/04/2017, 16:15:07","{'pcap', 'out', 'c'}","{'print-rx.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/rx_ubik-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/rx_ubik-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/aa0858100096a3490edf93034a80e66a4d61aad5,{'C/C++'},,positive,"CVE-2017-13049/Rx: add a missing bounds check for Ubik

One of the case blocks in ubik_print() didn't check bounds before
fetching 32 bits of packet data and could overread past the captured
packet data by that amount.

This fixes a buffer over-read discovered by Henri Salo from Nixu
Corporation.

Add a test using the capture file supplied by the reporter(s).",{'d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514'},https://github.com/the-tcpdump-group/tcpdump,7.5,aa0858100096a3490edf93034a80e66a4d61aad5,The Rx protocol parser in tcpdump before 4.9.2 has a buffer over-read in print-rx.c:ubik_print().,,yes,,,,,"add a missing bounds check for Ubik.
One of the case blocks in ubik print didn t check bounds before fetching 32 bits of packet data and could overread past the captured packet data by that amount.
This fixes a buffer over read discovered by Henri Salo from Nixu Corporation.
Add a test using the capture file supplied by the reporter s .",1.0,['overread']
150,150,171,Denis Ovsienko,{},CVE-2017-13048,CWE-125,BIGVUL,"08/06/2017, 17:45:09","{'pcap', 'out', 'c'}","{'print-rsvp.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/rsvp_fast_reroute-oobr.out': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'added'}, 'tests/rsvp_fast_reroute-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/3c8a2b0e91d8d8947e89384dacf6b54673083e71,{'C/C++'},,positive,"CVE-2017-13048/RSVP: fix decoding of Fast Reroute objects

In rsvp_obj_print() the case block for Class-Num 205 (FAST_REROUTE) from
RFC 4090 Section 4.1 could over-read accessing the buffer contents before
making the bounds check. Rearrange those steps the correct way around.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'6283c99a5196cb97399ca68f8793db6fde00b6af'},https://github.com/the-tcpdump-group/tcpdump,7.5,3c8a2b0e91d8d8947e89384dacf6b54673083e71,The RSVP parser in tcpdump before 4.9.2 has a buffer over-read in print-rsvp.c:rsvp_obj_print().,,yes,,,,,"fix decoding of Fast Reroute objects.
In rsvp obj print the case block for Class Num 205 FAST REROUTE from RFC 4090 Section 4.1 could over read accessing the buffer contents before making the bounds check.
Rearrange those steps the correct way around.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
151,151,172,Denis Ovsienko,{},CVE-2017-13047,CWE-125,BIGVUL,"08/06/2017, 19:54:42","{'pcap', 'out', 'c'}","{'print-isoclns.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/esis_opt_prot-oobr.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/esis_opt_prot-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/esis_snpa_asan-3.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/esis_snpa_asan-4.out': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'tests/esis_snpa_asan-5.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/331530a4076c69bbd2e3214db6ccbe834fb75640,{'C/C++'},,positive,"CVE-2017-13047/ES-IS: put an existing bounds check right

The bounds check in esis_print() tested one pointer at the beginning of
a loop that incremented another, make the trivial fix. While at it, make
the function print a standard marker when it detects truncated data and
update some existing ES-IS tests respectively.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'3c8a2b0e91d8d8947e89384dacf6b54673083e71'},https://github.com/the-tcpdump-group/tcpdump,7.5,331530a4076c69bbd2e3214db6ccbe834fb75640,The ISO ES-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:esis_print().,,yes,,,,,"put an existing bounds check right.
The bounds check in esis print tested one pointer at the beginning of a loop that incremented another make the trivial fix.
While at it make the function print a standard marker when it detects truncated data and update some existing ES IS tests respectively.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
152,152,173,Denis Ovsienko,{},CVE-2017-13046,CWE-125,BIGVUL,"08/03/2017, 21:34:44","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp_pmsi_tunnel-oobr.out': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'added'}, 'tests/bgp_pmsi_tunnel-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/d10a0f980fe8f9407ab1ffbd612641433ebe175e,{'C/C++'},,positive,"CVE-2017-13046/BGP: fix an existing bounds check for PMSI Tunnel

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'3b36ec4e713dea9266db11975066c425aa669b6c'},https://github.com/the-tcpdump-group/tcpdump,7.5,d10a0f980fe8f9407ab1ffbd612641433ebe175e,The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:bgp_attr_print().,,yes,,,,,"fix an existing bounds check for PMSI Tunnel.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
153,153,174,Denis Ovsienko,{},CVE-2017-13045,CWE-125,BIGVUL,"07/29/2017, 22:21:00","{'pcap', 'out', 'c'}","{'print-vqp.c': {'additions': 13, 'deletions': 1, 'changes': 14, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/vqp-oobr.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/vqp-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/3b36ec4e713dea9266db11975066c425aa669b6c,{'C/C++'},,positive,"CVE-2017-13045/VQP: add some bounds checks

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'c2f6833dddecf2d5fb89c9c898eee9981da342ed'},https://github.com/the-tcpdump-group/tcpdump,7.5,3b36ec4e713dea9266db11975066c425aa669b6c,The VQP parser in tcpdump before 4.9.2 has a buffer over-read in print-vqp.c:vqp_print().,,yes,,,,,"add some bounds checks.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
154,154,175,Denis Ovsienko,{},CVE-2017-13044,CWE-125,BIGVUL,"07/29/2017, 20:45:35","{'pcap', 'out', 'c'}","{'print-hncp.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/hncp_dhcpv4data-oobr.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/hncp_dhcpv4data-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c2f6833dddecf2d5fb89c9c898eee9981da342ed,{'C/C++'},,positive,"CVE-2017-13044/HNCP: add DHCPv4-Data bounds checks

dhcpv4_print() in print-hncp.c had the same bug as dhcpv6_print(), apply
a fix along the same lines.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'39582c04cc5e34054b2936b423072fb9df2ff6ef'},https://github.com/the-tcpdump-group/tcpdump,7.5,c2f6833dddecf2d5fb89c9c898eee9981da342ed,The HNCP parser in tcpdump before 4.9.2 has a buffer over-read in print-hncp.c:dhcpv4_print().,,yes,,,,,"add DHCPv4 Data bounds checks.
dhcpv4 print in print hncp.c had the same bug as dhcpv6 print apply a fix along the same lines.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
155,155,176,Denis Ovsienko,{},CVE-2017-13043,CWE-125,BIGVUL,"08/03/2017, 23:08:23","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp_mvpn_6_and_7.out': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'added'}, 'tests/bgp_mvpn_6_and_7.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514,{'C/C++'},,positive,"CVE-2017-13043/BGP: fix decoding of MVPN route types 6 and 7

RFC 6514 Section 4.6 defines the structure for Shared Tree Join (6) and
Source Tree Join (7) multicast VPN route types. decode_multicast_vpn()
didn't implement the Source AS field of that structure properly, adjust
the offsets to put it right.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'d10a0f980fe8f9407ab1ffbd612641433ebe175e'},https://github.com/the-tcpdump-group/tcpdump,7.5,d515b4b4a300479cdf1a6e0d1bb95bc1f9fee514,The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:decode_multicast_vpn().,,yes,,,,,"fix decoding of MVPN route types 6 and 7.
RFC 6514 Section 4.6 defines the structure for Shared Tree Join 6 and Source Tree Join 7 multicast VPN route types.
decode multicast vpn didn t implement the Source AS field of that structure properly adjust the offsets to put it right.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
156,156,177,Denis Ovsienko,{},CVE-2017-13042,CWE-125,BIGVUL,"07/29/2017, 17:52:38","{'pcap', 'out', 'c'}","{'print-hncp.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified'}, 'tests/hncp_dhcpv6data-oobr.out': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'added'}, 'tests/hncp_dhcpv6data-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/39582c04cc5e34054b2936b423072fb9df2ff6ef,{'C/C++'},,positive,"CVE-2017-13042/HNCP: add DHCPv6-Data bounds checks

hncp_print_rec() validates each HNCP TLV to be within the declared as
well as the on-the-wire packet space. However, dhcpv6_print() in the same
file didn't do the same for the DHCPv6 options within the HNCP
DHCPv6-Data TLV value, which could cause an out-of-bounds read when
decoding an invalid packet. Add missing checks to dhcpv6_print().

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'f4b9e24c7384d882a7f434cc7413925bf871d63e'},https://github.com/the-tcpdump-group/tcpdump,7.5,39582c04cc5e34054b2936b423072fb9df2ff6ef,The HNCP parser in tcpdump before 4.9.2 has a buffer over-read in print-hncp.c:dhcpv6_print().,,yes,,,,,"add DHCPv6 Data bounds checks.
hncp print rec validates each HNCP TLV to be within the declared as well as the on the wire packet space.
However dhcpv6 print in the same file didn t do the same for the DHCPv6 options within the HNCP DHCPv6 Data TLV value which could cause an out of bounds read when decoding an invalid packet.
Add missing checks to dhcpv6 print.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",1.0,['invalid']
157,157,178,Guy Harris,{},CVE-2017-13041,CWE-125,BIGVUL,"06/13/2017, 05:16:12","{'pcap', 'out', 'c'}","{'print-icmp6.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/icmp6_nodeinfo_oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/icmp6_nodeinfo_oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/f4b9e24c7384d882a7f434cc7413925bf871d63e,{'C/C++'},,positive,"CVE-2017-13041/ICMP6: Add more bounds checks.

This fixes a buffer over-read discovered by Kim Gwan Yeong.

Add a test using the capture file supplied by the reporter(s).",{'4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c'},https://github.com/the-tcpdump-group/tcpdump,7.5,f4b9e24c7384d882a7f434cc7413925bf871d63e,The ICMPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp6.c:icmp6_nodeinfo_print().,,yes,,,,,"Add more bounds checks.
This fixes a buffer over read discovered by Kim Gwan Yeong.
Add a test using the capture file supplied by the reporter s .",0.0,
158,158,179,Guy Harris,{},CVE-2017-13040,CWE-125,BIGVUL,"06/12/2017, 22:04:18","{'pcap', 'out', 'c'}","{'print-mptcp.c': {'additions': 50, 'deletions': 34, 'changes': 84, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/mptcp-dss-oobr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/mptcp-dss-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c,{'C/C++'},,positive,"CVE-2017-13040/MPTCP: Clean up printing DSS suboption.

Do the length checking inline; that means we print stuff up to the point
at which we run out of option data.

First check to make sure we have at least 4 bytes of option, so we have
flags to check.

This fixes a buffer over-read discovered by Kim Gwan Yeong.

Add a test using the capture file supplied by the reporter(s).",{'e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d'},https://github.com/the-tcpdump-group/tcpdump,7.5,4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c,"The MPTCP parser in tcpdump before 4.9.2 has a buffer over-read in print-mptcp.c, several functions.",,yes,,,,,"Clean up printing DSS suboption.
Do the length checking inline that means we print stuff up to the point at which we run out of option data.
First check to make sure we have at least 4 bytes of option so we have flags to check.
This fixes a buffer over read discovered by Kim Gwan Yeong.
Add a test using the capture file supplied by the reporter s .",0.0,
159,159,180,Guy Harris,{},CVE-2017-13039,CWE-125,BIGVUL,"06/12/2017, 04:06:55","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 58, 'deletions': 25, 'changes': 83, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isakmpv1-attr-oobr.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/isakmpv1-attr-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d,{'C/C++'},,positive,"CVE-2017-13039/IKEv1: Do more bounds checking.

Have ikev1_attrmap_print() and ikev1_attr_print() do full bounds
checking, and return null on a bounds overflow.  Have their callers
check for a null return.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'7335163a6ef82d46ff18f3e6099a157747241629'},https://github.com/the-tcpdump-group/tcpdump,7.5,e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d,"The ISAKMP parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c, several functions.",,yes,,,,,"Do more bounds checking.
Have ikev1 attrmap print and ikev1 attr print do full bounds checking and return null on a bounds overflow.
Have their callers check for a null return.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,"['overflow', 'invalid']"
160,160,188,Guy Harris,{},CVE-2017-13031,CWE-125,BIGVUL,"03/22/2017, 21:55:12","{'pcap', 'out', 'c'}","{'print-frag6.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified'}, 'tests/ip6_frag_asan.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ip6_frag_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/2d669862df7cd17f539129049f6fb70d17174125,{'C/C++'},,positive,"CVE-2017-13031/Check for the presence of the entire IPv6 fragment header.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.

Clean up some whitespace in tests/TESTLIST while we're at it.",{'eb8c0d4636363c881503d9c091604fbf785725eb'},https://github.com/the-tcpdump-group/tcpdump,7.5,2d669862df7cd17f539129049f6fb70d17174125,The IPv6 fragmentation header parser in tcpdump before 4.9.2 has a buffer over-read in print-frag6.c:frag6_print().,,yes,,,,,"for the presence of the entire IPv6 fragment header.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified so the capture file won t be rejected as an invalid capture.
Clean up some whitespace in tests TESTLIST while we re at it.",1.0,['invalid']
161,161,189,Guy Harris,{},CVE-2017-13030,CWE-125,BIGVUL,"03/22/2017, 21:09:28","{'pcap', 'out', 'c'}","{'print-pim.c': {'additions': 207, 'deletions': 176, 'changes': 383, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/heapoverflow-in_checksum.out': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'tests/pim_header_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/pim_header_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc,{'C/C++'},,positive,"CVE-2017-13030/PIM: Redo bounds checks and add length checks.

Use ND_TCHECK macros to do bounds checking, and add length checks before
the bounds checks.

Add a bounds check that the review process found was missing.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.

Update one test output file to reflect the changes.",{'7029d15f148ef24bb7c6668bc640f5470d085e5a'},https://github.com/the-tcpdump-group/tcpdump,7.5,5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc,"The PIM parser in tcpdump before 4.9.2 has a buffer over-read in print-pim.c, several functions.",,yes,,,,,"Redo bounds checks and add length checks.
Use ND TCHECK macros to do bounds checking and add length checks before the bounds checks.
Add a bounds check that the review process found was missing.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified so the capture file won t be rejected as an invalid capture.
Update one test output file to reflect the changes.",1.0,['invalid']
162,162,190,Guy Harris,{},CVE-2017-13029,CWE-125,BIGVUL,"03/22/2017, 18:48:06","{'pcap', 'out', 'c'}","{'print-ppp.c': {'additions': 13, 'deletions': 13, 'changes': 26, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ppp_ccp_config_deflate_option_asan.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/ppp_ccp_config_deflate_option_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/7029d15f148ef24bb7c6668bc640f5470d085e5a,{'C/C++'},,positive,"CVE-2017-13029/PPP: Fix a bounds check, and clean up other bounds checks.

For configuration protocol options, use ND_TCHECK() and
ND_TCHECK_nBITS() macros, passing them the appropriate pointer argument.
This fixes one case where the ND_TCHECK2() call they replace was not
checking enough bytes.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'29e5470e6ab84badbc31f4532bb7554a796d9d52'},https://github.com/the-tcpdump-group/tcpdump,7.5,7029d15f148ef24bb7c6668bc640f5470d085e5a,The PPP parser in tcpdump before 4.9.2 has a buffer over-read in print-ppp.c:print_ccp_config_options().,,yes,,,,,"Fix a bounds check and clean up other bounds checks.
For configuration protocol options use ND TCHECK and ND TCHECK nBITS macros passing them the appropriate pointer argument.
This fixes one case where the ND TCHECK2 call they replace was not checking enough bytes.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
163,163,191,Guy Harris,{},CVE-2017-13027,CWE-125,BIGVUL,"03/22/2017, 18:21:00","{'pcap', 'out', 'c'}","{'print-lldp.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/lldp_mgmt_addr_tlv_asan.out': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'added'}, 'tests/lldp_mgmt_addr_tlv_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/a77ff09c46560bc895dea11dc9fe643486b056ac,{'C/C++'},,positive,"CVE-2017-13027/LLDP: Fix a bounds check.

The total length of the OID is the OID length plus the length of the OID
length itself.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'b20e1639dbac84b3fcb393858521c13ad47a9d70'},https://github.com/the-tcpdump-group/tcpdump,7.5,a77ff09c46560bc895dea11dc9fe643486b056ac,The LLDP parser in tcpdump before 4.9.2 has a buffer over-read in print-lldp.c:lldp_mgmt_addr_tlv_print().,,yes,,,,,"Fix a bounds check.
The total length of the OID is the OID length plus the length of the OID length itself.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
164,164,192,Guy Harris,{},CVE-2017-13026,CWE-125,BIGVUL,"03/22/2017, 17:59:47","{'pcap', 'out', 'c'}","{'print-isoclns.c': {'additions': 37, 'deletions': 15, 'changes': 52, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/isis-extd-ipreach-oobr.out': {'additions': 1, 'deletions': 16, 'changes': 17, 'status': 'modified'}, 'tests/isis-seg-fault-2-v.out': {'additions': 4, 'deletions': 116, 'changes': 120, 'status': 'modified'}, 'tests/isis_stlv_asan-2.out': {'additions': 22, 'deletions': 0, 'changes': 22, 'status': 'added'}, 'tests/isis_stlv_asan-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/isis_stlv_asan-3.out': {'additions': 23, 'deletions': 0, 'changes': 23, 'status': 'added'}, 'tests/isis_stlv_asan-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/isis_stlv_asan-4.out': {'additions': 28, 'deletions': 0, 'changes': 28, 'status': 'added'}, 'tests/isis_stlv_asan-4.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/isis_stlv_asan.out': {'additions': 25, 'deletions': 0, 'changes': 25, 'status': 'added'}, 'tests/isis_stlv_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/kday6.out': {'additions': 1, 'deletions': 99, 'changes': 100, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/b20e1639dbac84b3fcb393858521c13ad47a9d70,{'C/C++'},,positive,"CVE-2017-13026/IS-IS: Clean up processing of subTLVs.

Add bounds checks, do a common check to make sure we captured the entire
subTLV, add checks to make sure the subTLV fits within the TLV.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add tests using the capture files supplied by the reporter(s), modified
so the capture files won't be rejected as an invalid capture.

Update existing tests for changes to IS-IS dissector.",{'2e1f6d9320afa83abc1ff716c7981fa504edadf2'},https://github.com/the-tcpdump-group/tcpdump,7.5,b20e1639dbac84b3fcb393858521c13ad47a9d70,"The ISO IS-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c, several functions.",,yes,,,,,"Clean up processing of subTLVs.
Add bounds checks do a common check to make sure we captured the entire subTLV add checks to make sure the subTLV fits within the TLV.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add tests using the capture files supplied by the reporter s modified so the capture files won t be rejected as an invalid capture.
Update existing tests for changes to IS IS dissector.",1.0,['invalid']
165,165,193,Francois-Xavier Le Bail,{},CVE-2017-13025,CWE-125,BIGVUL,"03/22/2017, 16:07:47","{'pcap', 'out', 'c', 'h'}","{'extract.h': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'print-mobility.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/mobility_opt_asan_3.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/mobility_opt_asan_3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/5338aac7b8b880b0c5e0c15e27dadc44c5559284,{'C/C++'},,positive,"CVE-2017-13025/IPv6 mobility: Add a bounds check before fetching data

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'",{'7d3aba9f06899d0128ef46e8a2fa143c6fad8f62'},https://github.com/the-tcpdump-group/tcpdump,7.5,5338aac7b8b880b0c5e0c15e27dadc44c5559284,The IPv6 mobility parser in tcpdump before 4.9.2 has a buffer over-read in print-mobility.c:mobility_opt_print().,,yes,,,,,"mobility Add a bounds check before fetching data.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t cause tcpdump pcap loop truncated dump file.",0.0,
166,166,194,Francois-Xavier Le Bail,{},CVE-2017-13024,CWE-125,BIGVUL,"03/22/2017, 15:27:48","{'pcap', 'out', 'c'}","{'print-mobility.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/mobility_opt_asan_2.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/mobility_opt_asan_2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/7d3aba9f06899d0128ef46e8a2fa143c6fad8f62,{'C/C++'},,positive,"CVE-2017-13024/IPv6 mobility: Add a bounds check before fetching data

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'",{'b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00'},https://github.com/the-tcpdump-group/tcpdump,7.5,7d3aba9f06899d0128ef46e8a2fa143c6fad8f62,The IPv6 mobility parser in tcpdump before 4.9.2 has a buffer over-read in print-mobility.c:mobility_opt_print().,,yes,,,,,"mobility Add a bounds check before fetching data.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t cause tcpdump pcap loop truncated dump file.",0.0,
167,167,195,Francois-Xavier Le Bail,{},CVE-2017-13023,CWE-125,BIGVUL,"03/22/2017, 15:08:25","{'pcap', 'out', 'c'}","{'print-mobility.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/mobility_opt_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/mobility_opt_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00,{'C/C++'},,positive,"CVE-2017-13023/IPv6 mobility: Add a bounds check before fetching data

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'",{'eee0b04bcfdae319c242b0b8fc3d07029ee65b8c'},https://github.com/the-tcpdump-group/tcpdump,7.5,b8e559afaeb8fe0604a1f8e3ad4dc1445de07a00,The IPv6 mobility parser in tcpdump before 4.9.2 has a buffer over-read in print-mobility.c:mobility_opt_print().,,yes,,,,,"mobility Add a bounds check before fetching data.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t cause tcpdump pcap loop truncated dump file.",0.0,
168,168,196,Guy Harris,{},CVE-2017-13022,CWE-125,BIGVUL,"03/22/2017, 06:07:17","{'pcap', 'out', 'c'}","{'print-ip.c': {'additions': 10, 'deletions': 3, 'changes': 13, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ip_printroute_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/ip_printroute_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/eee0b04bcfdae319c242b0b8fc3d07029ee65b8c,{'C/C++'},,positive,"CVE-2017-13022/IP: Add bounds checks to ip_printroute().

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'67c7126062d59729cd421bb38f9594015c9907ba'},https://github.com/the-tcpdump-group/tcpdump,7.5,eee0b04bcfdae319c242b0b8fc3d07029ee65b8c,The IP parser in tcpdump before 4.9.2 has a buffer over-read in print-ip.c:ip_printroute().,,yes,,,,,"Add bounds checks to ip printroute.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
169,169,197,Guy Harris,{},CVE-2017-13021,CWE-125,BIGVUL,"03/22/2017, 06:01:44","{'pcap', 'out', 'c'}","{'print-icmp6.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/icmp6_mobileprefix_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/icmp6_mobileprefix_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/67c7126062d59729cd421bb38f9594015c9907ba,{'C/C++'},,positive,"CVE-2017-13021/ICMP6: Add a missing bounds check.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'c5dd7bef5e54da5996dc4713284aa6266ae75b75'},https://github.com/the-tcpdump-group/tcpdump,7.5,67c7126062d59729cd421bb38f9594015c9907ba,The ICMPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp6.c:icmp6_print().,,yes,,,,,"Add a missing bounds check.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
170,170,198,Guy Harris,{},CVE-2017-13020,CWE-125,BIGVUL,"03/22/2017, 05:02:41","{'pcap', 'out', 'c'}","{'print-vtp.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/vtp_asan.out': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'added'}, 'tests/vtp_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c5dd7bef5e54da5996dc4713284aa6266ae75b75,{'C/C++'},,positive,"CVE-2017-13020/VTP: Add some missing bounds checks.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'4601c685e7fd19c3724d5e499c69b8d3ec49933e'},https://github.com/the-tcpdump-group/tcpdump,7.5,c5dd7bef5e54da5996dc4713284aa6266ae75b75,The VTP parser in tcpdump before 4.9.2 has a buffer over-read in print-vtp.c:vtp_print().,,yes,,,,,"Add some missing bounds checks.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
171,171,199,Guy Harris,{},CVE-2017-13019,CWE-125,BIGVUL,"03/22/2017, 04:49:45","{'pcap', 'out', 'c'}","{'print-pgm.c': {'additions': 130, 'deletions': 80, 'changes': 210, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/pgm_opts_asan_2.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/pgm_opts_asan_2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e,{'C/C++'},,positive,"CVE-2017-13019: Clean up PGM option processing.

Add #defines for option lengths or the lengths of the fixed-length part
of the option.  Sometimes those #defines differ from what was there
before; what was there before was wrong, probably because the option
lengths given in RFC 3208 were sometimes wrong - some lengths included
the length of the option header, some lengths didn't.

Don't use ""sizeof(uintXX_t)"" for sizes in the packet, just use the
number of bytes directly.

For the options that include an IPv4 or IPv6 address, check the option
length against the length of what precedes the address before fetching
any of that data.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'26a6799b9ca80508c05cac7a9a3bef922991520b'},https://github.com/the-tcpdump-group/tcpdump,7.5,4601c685e7fd19c3724d5e499c69b8d3ec49933e,The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print().,,yes,,,,,"Clean up PGM option processing.
Add defines for option lengths or the lengths of the fixed length part of the option.
Sometimes those defines differ from what was there before what was there before was wrong probably because the option lengths given in RFC 3208 were sometimes wrong some lengths included the length of the option header some lengths didn t.
Don t use sizeof uintXX t for sizes in the packet just use the number of bytes directly.
For the options that include an IPv4 or IPv6 address check the option length against the length of what precedes the address before fetching any of that data.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
172,172,200,Guy Harris,{},CVE-2017-13018,CWE-125,BIGVUL,"03/22/2017, 02:49:28","{'pcap', 'out', 'c'}","{'print-pgm.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/pgm_opts_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/pgm_opts_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/26a6799b9ca80508c05cac7a9a3bef922991520b,{'C/C++'},,positive,"CVE-2017-13018/PGM: Add a missing bounds check.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'11b426ee05eb62ed103218526f1fa616851c43ce'},https://github.com/the-tcpdump-group/tcpdump,7.5,26a6799b9ca80508c05cac7a9a3bef922991520b,The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print().,,yes,,,,,"Add a missing bounds check.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
173,173,201,Guy Harris,{},CVE-2017-13017,CWE-125,BIGVUL,"03/22/2017, 02:40:51","{'pcap', 'out', 'c'}","{'print-dhcp6.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/dhcp6_reconf_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/dhcp6_reconf_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/11b426ee05eb62ed103218526f1fa616851c43ce,{'C/C++'},,positive,"CVE-2017-13017/DHCPv6: Add a missing option length check.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'c177cb3800a9a68d79b2812f0ffcb9479abd6eb8'},https://github.com/the-tcpdump-group/tcpdump,7.5,11b426ee05eb62ed103218526f1fa616851c43ce,The DHCPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-dhcp6.c:dhcp6opt_print().,,yes,,,,,"Add a missing option length check.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
174,174,202,Guy Harris,{},CVE-2017-13016,CWE-125,BIGVUL,"03/22/2017, 02:30:48","{'c', 'h', 'pcap', 'out'}","{'addrtoname.h': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'print-isoclns.c': {'additions': 11, 'deletions': 3, 'changes': 14, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified'}, 'tests/esis_snpa_asan-2.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/esis_snpa_asan-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/esis_snpa_asan-3.out': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'added'}, 'tests/esis_snpa_asan-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/esis_snpa_asan-4.out': {'additions': 21, 'deletions': 0, 'changes': 21, 'status': 'added'}, 'tests/esis_snpa_asan-4.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/esis_snpa_asan-5.out': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'added'}, 'tests/esis_snpa_asan-5.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/esis_snpa_asan.out': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'added'}, 'tests/esis_snpa_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c177cb3800a9a68d79b2812f0ffcb9479abd6eb8,{'C/C++'},,positive,"CVE-2017-13016/ES-IS: Fix printing of addresses in RD PDUs.

Always print the SNPA, and flag it as such; only print it as a MAC
address if it's 6 bytes long.

Identify the NET as such.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add tests using the capture files supplied by the reporter(s), modified
so the capture files won't be rejected as an invalid capture.",{'985122081165753c7442bd7824c473eb9ff56308'},https://github.com/the-tcpdump-group/tcpdump,7.5,c177cb3800a9a68d79b2812f0ffcb9479abd6eb8,The ISO ES-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:esis_print().,,yes,,,,,"Fix printing of addresses in RD PDUs.
Always print the SNPA and flag it as such only print it as a MAC address if it s 6 bytes long.
Identify the NET as such.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add tests using the capture files supplied by the reporter s modified.
so the capture files won t be rejected as an invalid capture.",1.0,['invalid']
175,175,203,Guy Harris,{},CVE-2017-13015,CWE-125,BIGVUL,"03/16/2017, 19:02:20","{'pcap', 'out', 'c'}","{'print-eap.c': {'additions': 14, 'deletions': 4, 'changes': 18, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/eap_extract_read2_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/eap_extract_read2_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/985122081165753c7442bd7824c473eb9ff56308,{'C/C++'},,positive,"CVE-2017-13015/EAP: Add more bounds checks.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'cc356512f512e7fa423b3674db4bb31dbe40ffec'},https://github.com/the-tcpdump-group/tcpdump,7.5,985122081165753c7442bd7824c473eb9ff56308,The EAP parser in tcpdump before 4.9.2 has a buffer over-read in print-eap.c:eap_print().,,yes,,,,,"Add more bounds checks.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
176,176,204,Guy Harris,{},CVE-2017-13014,CWE-125,BIGVUL,"03/16/2017, 18:25:40","{'pcap', 'out', 'c'}","{'print-wb.c': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/wb-oobr.out': {'additions': 18, 'deletions': 0, 'changes': 18, 'status': 'added'}, 'tests/wb-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/cc356512f512e7fa423b3674db4bb31dbe40ffec,{'C/C++'},,positive,"CVE-2017-13014/White Board: Do more bounds checks.

This fixes a buffer over-read discovered by Yannick Formaggio.

Add a test using the capture file supplied by the reporter(s).

While we're at it, print a truncation error if the packets are
truncated, rather than just, in effect, ignoring the result of the
routines that print particular packet types.",{'13ab8d18617d616c7d343530f8a842e7143fb5cc'},https://github.com/the-tcpdump-group/tcpdump,7.5,cc356512f512e7fa423b3674db4bb31dbe40ffec,"The White Board protocol parser in tcpdump before 4.9.2 has a buffer over-read in print-wb.c:wb_prep(), several functions.",,yes,,,,,"Board Do more bounds checks.
This fixes a buffer over read discovered by Yannick Formaggio.
Add a test using the capture file supplied by the reporter s.
While we re at it print a truncation error if the packets are.
truncated rather than just in effect ignoring the result of the.
routines that print particular packet types.",0.0,
177,177,205,Guy Harris,{},CVE-2017-13013,CWE-125,BIGVUL,"03/16/2017, 17:54:31","{'pcap', 'out', 'c'}","{'print-arp.c': {'additions': 72, 'deletions': 17, 'changes': 89, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/arp-oobr.out': {'additions': 99, 'deletions': 99, 'changes': 198, 'status': 'modified'}, 'tests/getname_2_read4_asan.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/getname_2_read4_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/13ab8d18617d616c7d343530f8a842e7143fb5cc,{'C/C++'},,positive,"CVE-2017-13013/ARP: Fix printing of ARP protocol addresses.

If the protocol type isn't ETHERTYPE_IP or ETHERTYPE_TRAIL, or if the
protocol address length isn't 4, don't print the address as an IPv4 address.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.

Update another test file's tcpdump output to reflect this change.",{'8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b'},https://github.com/the-tcpdump-group/tcpdump,7.5,13ab8d18617d616c7d343530f8a842e7143fb5cc,"The ARP parser in tcpdump before 4.9.2 has a buffer over-read in print-arp.c, several functions.",,yes,,,,,"Fix printing of ARP protocol addresses.
If the protocol type isn t ETHERTYPE IP or ETHERTYPE TRAIL or if the protocol address length isn t 4 don t print the address as an IPv4 address.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified so the capture file won t be rejected as an invalid capture.
Update another test file s tcpdump output to reflect this change.",1.0,['invalid']
178,178,206,Guy Harris,{},CVE-2017-13012,CWE-125,BIGVUL,"03/16/2017, 06:45:38","{'pcap', 'out', 'c'}","{'print-icmp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/extract_read2_asan.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/extract_read2_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b,{'C/C++'},,positive,"CVE-2017-13012/ICMP: Add a missing bounds check.

Check before fetching the length from the included packet's IPv4 header.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'9f0730bee3eb65d07b49fd468bc2f269173352fe'},https://github.com/the-tcpdump-group/tcpdump,7.5,8509ef02eceb2bbb479cea10fe4a7ec6395f1a8b,The ICMP parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp.c:icmp_print().,,yes,,,,,"Add a missing bounds check.
Check before fetching the length from the included packet s IPv4 header.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,['invalid']
179,179,207,Guy Harris,{},CVE-2017-13011,CWE-119,BIGVUL,"03/15/2017, 19:12:21","{'pcap', 'out', 'c'}","{'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/lldp_asan.out': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'added'}, 'tests/lldp_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'util-print.c': {'additions': 18, 'deletions': 5, 'changes': 23, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/9f0730bee3eb65d07b49fd468bc2f269173352fe,{'C/C++'},,positive,"CVE-2017-13011/Properly check for buffer overflow in bittok2str_internal().

Also, make the buffer bigger.

This fixes a buffer overflow discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't be rejected as an invalid capture.",{'93493458ca50fa3fa45be20e2ed087a5dc2c594d'},https://github.com/the-tcpdump-group/tcpdump,7.5,9f0730bee3eb65d07b49fd468bc2f269173352fe,Several protocol parsers in tcpdump before 4.9.2 could cause a buffer overflow in util-print.c:bittok2str_internal().,Overflow ,yes,,,,,"check for buffer overflow in internal.
Also make the buffer bigger.
This fixes a buffer overflow discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t be rejected as an invalid capture.",1.0,"['overflow', 'overflow', 'invalid']"
180,180,208,Guy Harris,{},CVE-2017-13010,CWE-125,BIGVUL,"03/07/2017, 04:12:33","{'pcap', 'out', 'c'}","{'print-beep.c': {'additions': 17, 'deletions': 9, 'changes': 26, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/beep-oobr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/beep-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/877b66b398518d9501513e0860c9f3a8acc70892,{'C/C++'},,positive,"CVE-2017-13010/BEEP: Do bounds checking when comparing strings.

This fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.

Add a test using the capture file supplied by the reporter(s).",{'db8c799f6dfc68765c9451fcbfca06e662f5bd5f'},https://github.com/the-tcpdump-group/tcpdump,7.5,877b66b398518d9501513e0860c9f3a8acc70892,The BEEP parser in tcpdump before 4.9.2 has a buffer over-read in print-beep.c:l_strnstart().,,yes,,,,,"Do bounds checking when comparing strings.
This fixes a buffer over read discovered by Brian geeknik Carpenter.
Add a test using the capture file supplied by the reporter s .",0.0,
181,181,209,Guy Harris,{},CVE-2017-13009,CWE-125,BIGVUL,"03/06/2017, 18:13:22","{'pcap', 'out', 'c'}","{'print-mobility.c': {'additions': 20, 'deletions': 17, 'changes': 37, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ipv6-mobility-header-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ipv6-mobility-header-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/db8c799f6dfc68765c9451fcbfca06e662f5bd5f,{'C/C++'},,positive,"CVE-2017-13009/IPv6 mobility: Add a bounds check.

This fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.

Add a test using the capture file supplied by the reporter(s).

While we're at it:

Add a comment giving the RFC for IPv6 mobility headers.

Clean up some bounds checks to make it clearer what they're checking, by
matching the subsequent EXTRACT_ calls or memcpy.

For the binding update, if none of the flag bits are set, don't check
the individual flag bits.",{'5edf405d7ed9fc92f4f43e8a3d44baa4c6387562'},https://github.com/the-tcpdump-group/tcpdump,7.5,db8c799f6dfc68765c9451fcbfca06e662f5bd5f,The IPv6 mobility parser in tcpdump before 4.9.2 has a buffer over-read in print-mobility.c:mobility_print().,,yes,,,,,"mobility Add a bounds check.
This fixes a buffer over read discovered by Brian geeknik Carpenter.
Add a test using the capture file supplied by the reporter s.
While we re at it.
Add a comment giving the RFC for IPv6 mobility headers.
Clean up some bounds checks to make it clearer what they re checking by matching the subsequent EXTRACT calls or memcpy.
For the binding update if none of the flag bits are set don t check.
the individual flag bits.",0.0,
182,182,210,Guy Harris,{},CVE-2017-13008,CWE-125,BIGVUL,"03/06/2017, 17:42:49","{'pcap', 'out', 'c'}","{'print-802_11.c': {'additions': 1, 'deletions': 13, 'changes': 14, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ieee802.11_rates_oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ieee802.11_rates_oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/5edf405d7ed9fc92f4f43e8a3d44baa4c6387562,{'C/C++'},,positive,"CVE-2017-13008/IEEE 802.11: Fix TIM bitmap copy to copy from p + offset.

offset has already been advanced to point to the bitmap; we shouldn't
add the amount to advance again.

This fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.

Add a test using the capture file supplied by the reporter(s).

While we're at it, remove some redundant tests - we've already checked,
before the case statement, whether we have captured the entire
information element and whether the entire information element is
present in the on-the-wire packet; in the cases for particular IEs, we
only need to make sure we don't go past the end of the IE.",{'ca336198e8bebccc18502de27672fdbd6eb34856'},https://github.com/the-tcpdump-group/tcpdump,7.5,5edf405d7ed9fc92f4f43e8a3d44baa4c6387562,The IEEE 802.11 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_11.c:parse_elements().,,yes,,,,,"802.11 Fix TIM bitmap copy to copy from p offset.
offset has already been advanced to point to the bitmap we shouldn t add the amount to advance again.
This fixes a buffer over read discovered by Brian geeknik Carpenter.
Add a test using the capture file supplied by the reporter s.
While we re at it remove some redundant tests we ve already checked.
before the case statement whether we have captured the entire.
information element and whether the entire information element is.
present in the on the wire packet in the cases for particular IEs we.
only need to make sure we don t go past the end of the IE.",0.0,
183,183,211,Guy Harris,{},CVE-2017-13007,CWE-125,BIGVUL,"03/06/2017, 04:21:48","{'pcap', 'out', 'c'}","{'print-pktap.c': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/pktap-heap-overflow.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/pktap-heap-overflow.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/ca336198e8bebccc18502de27672fdbd6eb34856,{'C/C++'},,positive,"CVE-2017-13007/PKTAP: Pass a properly updated struct pcap_pkthdr to the sub-dissector.

The sub-dissector expects that the length and captured length will
reflect the actual remaining data in the packet, not the raw amount
including the PKTAP header; pass an updated header, just as we do for
PPI.

This fixes a buffer over-read discovered by Yannick Formaggio.

Add a test using the capture file supplied by the reporter(s).",{'cc4a7391c616be7a64ed65742ef9ed3f106eb165'},https://github.com/the-tcpdump-group/tcpdump,7.5,ca336198e8bebccc18502de27672fdbd6eb34856,The Apple PKTAP parser in tcpdump before 4.9.2 has a buffer over-read in print-pktap.c:pktap_if_print().,,yes,,,,,"Pass a properly updated struct pcap pkthdr to the sub dissector.
The sub dissector expects that the length and captured length will reflect the actual remaining data in the packet not the raw amount including the PKTAP header pass an updated header just as we do for PPI.
This fixes a buffer over read discovered by Yannick Formaggio.
Add a test using the capture file supplied by the reporter s .",0.0,
184,184,212,Guy Harris,{},CVE-2017-13006,CWE-125,BIGVUL,"03/06/2017, 03:56:20","{'pcap', 'out', 'c'}","{'print-l2tp.c': {'additions': 177, 'deletions': 46, 'changes': 223, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/l2tp-avp-overflow.out': {'additions': 39, 'deletions': 0, 'changes': 39, 'status': 'added'}, 'tests/l2tp-avp-overflow.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/cc4a7391c616be7a64ed65742ef9ed3f106eb165,{'C/C++'},,positive,"CVE-2017-13006/L2TP: Check whether an AVP's content exceeds the AVP length.

It's not good enough to check whether all the data specified by the AVP
length was captured - you also have to check whether that length is
large enough for all the required data in the AVP.

This fixes a buffer over-read discovered by Yannick Formaggio.

Add a test using the capture file supplied by the reporter(s).",{'4e430c6b0d8b7e77c7abca7e7afb0c3e727502f2'},https://github.com/the-tcpdump-group/tcpdump,7.5,cc4a7391c616be7a64ed65742ef9ed3f106eb165,"The L2TP parser in tcpdump before 4.9.2 has a buffer over-read in print-l2tp.c, several functions.",,yes,,,,,"Check whether an AVP s content exceeds the AVP length.
It s not good enough to check whether all the data specified by the AVP length was captured you also have to check whether that length is large enough for all the required data in the AVP.
This fixes a buffer over read discovered by Yannick Formaggio.
Add a test using the capture file supplied by the reporter s .",0.0,
185,185,213,Francois-Xavier Le Bail,{},CVE-2017-13005,CWE-125,BIGVUL,"02/23/2017, 15:50:18","{'pcap', 'out', 'c'}","{'print-nfs.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/hoobr_nfs_xid_map_enter.out': {'additions': 41, 'deletions': 0, 'changes': 41, 'status': 'added'}, 'tests/hoobr_nfs_xid_map_enter.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd,{'C/C++'},,positive,"CVE-2017-13005/NFS: Add two bounds checks before fetching data

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by the reporter(s).",{'35d146b7a66496d72cdeb95ccb33ab80a265ce90'},https://github.com/the-tcpdump-group/tcpdump,7.5,b45a9a167ca6a3ef2752ae9d48d56ac14b001bfd,The NFS parser in tcpdump before 4.9.2 has a buffer over-read in print-nfs.c:xid_map_enter().,,yes,,,,,"Add two bounds checks before fetching data.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by the reporter s .",0.0,
186,186,214,Guy Harris,{},CVE-2017-13003,CWE-125,BIGVUL,"02/20/2017, 05:13:25","{'pcap', 'out', 'c', 'h'}","{'extract.h': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified'}, 'print-lmp.c': {'additions': 350, 'deletions': 82, 'changes': 432, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/lmpv1_busyloop.out': {'additions': 42, 'deletions': 0, 'changes': 42, 'status': 'added'}, 'tests/lmpv1_busyloop.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/a25211918f2e790c67d859d20ccf8dbb81da1598,{'C/C++'},,positive,"CVE-2017-13003/Clean up the LMP dissector.

Do a lot more bounds and length checks.

Add a EXTRACT_8BITS() macro, for completeness, and so as not to confuse
people into thinking that, to fetch a 1-byte value from a packet, they
need to use EXTRACT_16BITS() to fetch a 2-byte value and then use
shifting and masking to extract the desired byte.  Use that rather than
using EXTRACT_16BITS() to fetch a 2-byte value and then shifting and
masking to extract the desired byte.

Don't treat IPv4 addresses and unnumbered interface IDs the same; the
first should be printed as an IPv4 address but the latter should just be
printed as numbers.  Handle IPv6 addresses in more object types while
we're at it.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'cbddb98484ea8ec1deece351abd56e063d775b38'},https://github.com/the-tcpdump-group/tcpdump,7.5,a25211918f2e790c67d859d20ccf8dbb81da1598,The LMP parser in tcpdump before 4.9.2 has a buffer over-read in print-lmp.c:lmp_print().,,yes,,,,,"up the LMP dissector.
Do a lot more bounds and length checks.
Add a EXTRACT 8BITS macro for completeness and so as not to confuse people into thinking that to fetch a 1 byte value from a packet they need to use EXTRACT 16BITS to fetch a 2 byte value and then use shifting and masking to extract the desired byte.
Use that rather than using EXTRACT 16BITS to fetch a 2 byte value and then shifting and masking to extract the desired byte.
Don t treat IPv4 addresses and unnumbered interface IDs the same the first should be printed as an IPv4 address but the latter should just be printed as numbers.
Handle IPv6 addresses in more object types while we re at it.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
187,187,215,Guy Harris,{},CVE-2017-13002,CWE-125,BIGVUL,"02/19/2017, 22:19:32","{'pcap', 'out', 'c'}","{'print-aodv.c': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/hoobr_aodv_extension.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/hoobr_aodv_extension.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/cbddb98484ea8ec1deece351abd56e063d775b38,{'C/C++'},,positive,"CVE-2017-13002/AODV: Add some missing bounds checks.

In aodv_extension() do a bounds check on the extension header before we
look at it.

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by the reporter(s).

While we're at it, add the RFC number, and check the validity of the
length for the Hello extension.",{'7a923447fd49a069a0fd3b6c3547438ab5ee2123'},https://github.com/the-tcpdump-group/tcpdump,7.5,cbddb98484ea8ec1deece351abd56e063d775b38,The AODV parser in tcpdump before 4.9.2 has a buffer over-read in print-aodv.c:aodv_extension().,,yes,,,,,"Add some missing bounds checks.
In aodv extension do a bounds check on the extension header before we look at it.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by the reporter s.
While we re at it add the RFC number and check the validity of the.
length for the Hello extension.",0.0,
188,188,216,Guy Harris,{},CVE-2017-13001,CWE-125,BIGVUL,"02/19/2017, 21:56:12","{'pcap', 'out', 'c'}","{'print-nfs.c': {'additions': 7, 'deletions': 3, 'changes': 10, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/hoobr_nfs_printfh.out': {'additions': 104, 'deletions': 0, 'changes': 104, 'status': 'added'}, 'tests/hoobr_nfs_printfh.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/7a923447fd49a069a0fd3b6c3547438ab5ee2123,{'C/C++'},,positive,"CVE-2017-13001/NFS: Don't copy more data than is in the file handle.

Also, put the buffer on the stack; no reason to make it static.  (65
bytes isn't a lot.)

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by the reporter(s).",{'8512734883227c11568bb35da1d48b9f8466f43f'},https://github.com/the-tcpdump-group/tcpdump,7.5,7a923447fd49a069a0fd3b6c3547438ab5ee2123,The NFS parser in tcpdump before 4.9.2 has a buffer over-read in print-nfs.c:nfs_printfh().,,yes,,,,,"Don t copy more data than is in the file handle.
Also put the buffer on the stack no reason to make it static.
65 bytes isn t a lot.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by the reporter s .",0.0,
189,189,217,Guy Harris,{},CVE-2017-13000,CWE-125,BIGVUL,"02/21/2017, 22:10:15","{'pcap', 'out', 'c'}","{'print-802_15_4.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/802_15_4_beacon.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/802_15_4_beacon.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/8512734883227c11568bb35da1d48b9f8466f43f,{'C/C++'},,positive,"CVE-2017-13000/IEEE 802.15.4: Fix bug introduced two fixes prior.

We've already advanced the pointer past the PAN ID, if present; it now
points to the address, so don't add 2 to it.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'a7e5f58f402e6919ec444a57946bade7dfd6b184'},https://github.com/the-tcpdump-group/tcpdump,7.5,8512734883227c11568bb35da1d48b9f8466f43f,The IEEE 802.15.4 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_15_4.c:ieee802_15_4_if_print().,,yes,,,,,"802.15.4 Fix bug introduced two fixes prior.
We ve already advanced the pointer past the PAN ID if present it now points to the address so don t add 2 to it.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
190,190,218,Guy Harris,{},CVE-2017-12999,CWE-125,BIGVUL,"02/13/2017, 18:26:49","{'pcap', 'out', 'c'}","{'print-isoclns.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/isis-areaaddr-oobr-1.out': {'additions': 37127, 'deletions': 0, 'changes': 37127, 'status': 'added'}, 'tests/isis-areaaddr-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/isis-areaaddr-oobr-2.out': {'additions': 12786, 'deletions': 0, 'changes': 12786, 'status': 'added'}, 'tests/isis-areaaddr-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/3b32029db354cbc875127869d9b12a9addc75b50,{'C/C++'},,positive,"CVE-2017-12999/IS-IS: Add a missing length check.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'777edc563aacdaff66a0b829cecd2ccb09a10404'},https://github.com/the-tcpdump-group/tcpdump,7.5,3b32029db354cbc875127869d9b12a9addc75b50,The IS-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:isis_print().,,yes,,,,,"Add a missing length check.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
191,191,219,Guy Harris,{},CVE-2017-12998,CWE-125,BIGVUL,"02/13/2017, 18:38:04","{'pcap', 'out', 'c'}","{'print-isoclns.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isis-extd-ipreach-oobr.out': {'additions': 10894, 'deletions': 0, 'changes': 10894, 'status': 'added'}, 'tests/isis-extd-ipreach-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/979dcefd7b259e9e233f77fe1c5312793bfd948f,{'C/C++'},,positive,"CVE-2017-12998/IS-IS: Check for 2 bytes if we're going to fetch 2 bytes.

Probably a copy-and-pasteo.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'3b32029db354cbc875127869d9b12a9addc75b50'},https://github.com/the-tcpdump-group/tcpdump,7.5,979dcefd7b259e9e233f77fe1c5312793bfd948f,The IS-IS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:isis_print_extd_ip_reach().,,yes,,,,,"Check for 2 bytes if we re going to fetch 2 bytes.
Probably a copy and pasteo.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
192,192,220,Guy Harris,{},CVE-2017-12997,CWE-835,BIGVUL,"02/13/2017, 19:11:42","{'pcap', 'out', 'c'}","{'print-lldp.c': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/lldp-infinite-loop-1.out': {'additions': 134, 'deletions': 0, 'changes': 134, 'status': 'added'}, 'tests/lldp-infinite-loop-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/lldp-infinite-loop-2.out': {'additions': 161, 'deletions': 0, 'changes': 161, 'status': 'added'}, 'tests/lldp-infinite-loop-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/34cec721d39c76be1e0a600829a7b17bdfb832b6,{'C/C++'},,positive,"CVE-2017-12997/LLDP: Don't use an 8-bit loop counter.

If you have a

	for (i = 0; i < N; i++)

loop, you'd better make sure that i is big enough to hold N - not N-1,
N.

The TLV length here is 9 bits long, not 8 bits long, so an 8-bit loop
counter will overflow and you can loop infinitely.

This fixes an infinite loop discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).

Clean up the output a bit while we're at it.",{'979dcefd7b259e9e233f77fe1c5312793bfd948f'},https://github.com/the-tcpdump-group/tcpdump,5.0,34cec721d39c76be1e0a600829a7b17bdfb832b6,The LLDP parser in tcpdump before 4.9.2 could enter an infinite loop due to a bug in print-lldp.c:lldp_private_8021_print().,,yes,,,,,"Don t use an 8 bit loop counter.
If you have a.
for i 0 i N i.
loop you d better make sure that i is big enough to hold N not N 1 N.
The TLV length here is 9 bits long not 8 bits long so an 8 bit loop counter will overflow and you can loop infinitely.
This fixes an infinite loop discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s.
Clean up the output a bit while we re at it.",1.0,"['overflow', 'infinite loop', 'security']"
193,193,221,Guy Harris,{},CVE-2017-12996,CWE-125,BIGVUL,"02/13/2017, 19:31:25","{'pcap', 'out', 'c'}","{'print-pim.c': {'additions': 21, 'deletions': 9, 'changes': 30, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/pimv2-oobr-1.out': {'additions': 16377, 'deletions': 0, 'changes': 16377, 'status': 'added'}, 'tests/pimv2-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/pimv2-oobr-2.out': {'additions': 21581, 'deletions': 0, 'changes': 21581, 'status': 'added'}, 'tests/pimv2-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/pimv2-oobr-3.out': {'additions': 7674, 'deletions': 0, 'changes': 7674, 'status': 'added'}, 'tests/pimv2-oobr-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/pimv2-oobr-4.out': {'additions': 5913, 'deletions': 0, 'changes': 5913, 'status': 'added'}, 'tests/pimv2-oobr-4.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/6fca58f5f9c96749a575f52e20598ad43f5bdf30,{'C/C++'},,positive,"CVE-2017-12996/PIMv2: Make sure PIM TLVs have the right length.

We do bounds checks based on the TLV length, so if the TLV's length is
too short, and we don't check for that, we could end up fetching data
past the end of the TLV - including past the length of the captured data
in the packet.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'34cec721d39c76be1e0a600829a7b17bdfb832b6'},https://github.com/the-tcpdump-group/tcpdump,7.5,6fca58f5f9c96749a575f52e20598ad43f5bdf30,The PIMv2 parser in tcpdump before 4.9.2 has a buffer over-read in print-pim.c:pimv2_print().,,yes,,,,,"Make sure PIM TLVs have the right length.
We do bounds checks based on the TLV length so if the TLV s length is too short and we don t check for that we could end up fetching data past the end of the TLV including past the length of the captured data in the packet.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
194,194,222,Guy Harris,"{'com_1': {'author': 'raybellis', 'date': '09/14/2017, 13:05:13', 'body': '[RFC 1035](https://tools.ietf.org/html/rfc1035) has an implicit requirement for ""backwards pointers"" in §4.1.4 (my emphasis)\r\n\r\n> In order to reduce the size of messages, the domain system utilizes a\r\ncompression scheme which eliminates the repetition of domain names in a\r\nmessage.  In this scheme, an entire domain name or a list of labels at\r\nthe end of a domain name is replaced with a pointer to a **_prior occurance_**\r\nof the same name.\r\n\r\nArguably, a compression pointer also cannot contain a value of less than 12, since that then points into the message header and not to a ""name"".'}}",CVE-2017-12995,CWE-835,BIGVUL,"02/11/2017, 02:52:17","{'pcap', 'out', 'c'}","{'print-domain.c': {'additions': 19, 'deletions': 18, 'changes': 37, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified'}, 'tests/dns-zlip-1.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/dns-zlip-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/dns-zlip-2.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/dns-zlip-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/dns-zlip-3.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/dns-zlip-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/dns_fwdptr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/dns_fwdptr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/3a76fd7c95fced2c2f8c8148a9055c3a542eff29,{'C/C++'},,positive,"CVE-2017-12995/Check for DNS compression pointers that don't point backwards.

This is what BIND 9.11.0-P2 does; it not only detects pointers that
loop, as ""point backwards"" means ""point before anything we've processed
so far, including what we're processing right now"", so the pointer can't
point to itself (as that's what we're processing right now).

This fixes an infinite loop discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).

Also, add some infinite-pointer-loop captures.

More checks should be done.  We might, for example, want to make sure
the upper 2 bits of the label length/pointer byte are 00 or 11, and that
if we encounter a pointer and jump backwards to what we think is a label
the label ends before the beginning of the last label we processed, to
make sure the pointer doesn't point backwards into the *middle* of a
label, and also make sure the entire name is <= 255 bytes long.",{'866c60236c41cea1e1654c8a071897292f64be49'},https://github.com/the-tcpdump-group/tcpdump,5.0,3a76fd7c95fced2c2f8c8148a9055c3a542eff29,The DNS parser in tcpdump before 4.9.2 could enter an infinite loop due to a bug in print-domain.c:ns_print().,,yes,,,,,"for DNS compression pointers that don t point backwards.
This is what BIND 9.11.0 P2 does it not only detects pointers that loop as point backwards means point before anything we ve processed so far including what we re processing right now so the pointer can t point to itself as that s what we re processing right now.
This fixes an infinite loop discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s.
Also add some infinite pointer loop captures.
More checks should be done.
We might for example want to make sure.
the upper 2 bits of the label length pointer byte are 00 or 11 and that.
if we encounter a pointer and jump backwards to what we think is a label.
the label ends before the beginning of the last label we processed to.
make sure the pointer doesn t point backwards into the middle of a.
label and also make sure the entire name is 255 bytes long.",1.0,"['infinite loop', 'security']"
195,195,223,Guy Harris,{},CVE-2017-12994,CWE-125,BIGVUL,"02/07/2017, 20:08:07","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 13, 'deletions': 6, 'changes': 19, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp-aigp-oobr.out': {'additions': 10135, 'deletions': 0, 'changes': 10135, 'status': 'added'}, 'tests/bgp-aigp-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/ffde45acf3348f8353fb4064a1b21683ee6b5ddf,{'C/C++'},,positive,"CVE-2017-12994/BGP: Move a test inside a loop.

The loop can be executed more than once (that's kinda the whole point of
a loop), so the check has to be made each time through the loop, not
just once before the loop is executed.

Do some additional length checks while we're at it.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'6ec0c6fa63412c7a07a5bcb790a529c3563b4173'},https://github.com/the-tcpdump-group/tcpdump,7.5,ffde45acf3348f8353fb4064a1b21683ee6b5ddf,The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:bgp_attr_print().,,yes,,,,,"Move a test inside a loop.
The loop can be executed more than once that s kinda the whole point of a loop so the check has to be made each time through the loop not just once before the loop is executed.
Do some additional length checks while we re at it.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
196,196,224,Guy Harris,{},CVE-2017-12993,CWE-125,BIGVUL,"02/07/2017, 18:33:07","{'pcap', 'out', 'c'}","{'print-juniper.c': {'additions': 38, 'deletions': 0, 'changes': 38, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/hoobr_juniper.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/hoobr_juniper.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/hoobr_juniper2.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/hoobr_juniper2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/hoobr_juniper3.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/hoobr_juniper3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/b534e304568585707c4a92422aeca25cf908ff02,{'C/C++'},,positive,"CVE-2017-12993/Juniper: Add more bounds checks.

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add tests using the capture files supplied by the reporter(s).",{'d3aae71930676357fa25e84c45d99d9363ecfef2'},https://github.com/the-tcpdump-group/tcpdump,7.5,b534e304568585707c4a92422aeca25cf908ff02,"The Juniper protocols parser in tcpdump before 4.9.2 has a buffer over-read in print-juniper.c, several functions.",,yes,,,,,"Add more bounds checks.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add tests using the capture files supplied by the reporter s .",0.0,
197,197,225,Guy Harris,{},CVE-2017-12992,CWE-125,BIGVUL,"02/07/2017, 11:03:34","{'pcap', 'out', 'c'}","{'print-ripng.c': {'additions': 40, 'deletions': 31, 'changes': 71, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/hoobr_ripng_print.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/hoobr_ripng_print.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/e942fb84fbe3a73a98a00d2a279425872b5fb9d2,{'C/C++'},,positive,"CVE-2017-12992/RIPng: Clean up bounds checking.

Do bounds checking as we access items.

Scan the list of netinfo6 entries based on the supplied packet length,
without taking the captured length into account; let the aforementioned
bounds checking handle that.

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by the reporter(s).",{'db24063b01cba8e9d4d88b7d8ac70c9000c104e4'},https://github.com/the-tcpdump-group/tcpdump,7.5,e942fb84fbe3a73a98a00d2a279425872b5fb9d2,The RIPng parser in tcpdump before 4.9.2 has a buffer over-read in print-ripng.c:ripng_print().,,yes,,,,,"Clean up bounds checking.
Do bounds checking as we access items.
Scan the list of entries based on the supplied packet length without taking the captured length into account let the aforementioned bounds checking handle that.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by the reporter s .",0.0,
198,198,226,Guy Harris,{},CVE-2017-12991,CWE-125,BIGVUL,"02/06/2017, 20:14:38","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp-as-path-oobr.out': {'additions': 99694, 'deletions': 0, 'changes': 99694, 'status': 'added'}, 'tests/bgp-as-path-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/50a44b6b8e4f7c127440dbd4239cf571945cc1e7,{'C/C++'},,positive,"CVE-2017-12991/BGP: Add missing bounds check.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'99798bd9a41bd3d03fdc1e949810a38967f20ed3'},https://github.com/the-tcpdump-group/tcpdump,7.5,50a44b6b8e4f7c127440dbd4239cf571945cc1e7,The BGP parser in tcpdump before 4.9.2 has a buffer over-read in print-bgp.c:bgp_attr_print().,,yes,,,,,"Add missing bounds check.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
199,199,227,Guy Harris,{},CVE-2017-12990,CWE-835,BIGVUL,"02/06/2017, 22:33:50","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 60, 'deletions': 52, 'changes': 112, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isakmp-no-none-np.out': {'additions': 78, 'deletions': 0, 'changes': 78, 'status': 'added'}, 'tests/isakmp-no-none-np.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c2ef693866beae071a24b45c49f9674af1df4028,{'C/C++'},,positive,"CVE-2017-12990/Fix printing of ISAKMPv1 Notification payload data.

The closest thing to a specification for the contents of the payload
data is draft-ietf-ipsec-notifymsg-04, and nothing in there says that it
is ever a complete ISAKMP message, so don't dissect types we don't have
specific code for as a complete ISAKMP message.

While we're at it, fix a comment, and clean up printing of V1 Nonce,
V2 Authentication payloads, and v2 Notice payloads.

This fixes an infinite loop discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'50a44b6b8e4f7c127440dbd4239cf571945cc1e7'},https://github.com/the-tcpdump-group/tcpdump,5.0,c2ef693866beae071a24b45c49f9674af1df4028,"The ISAKMP parser in tcpdump before 4.9.2 could enter an infinite loop due to bugs in print-isakmp.c, several functions.",,yes,,,,,"printing of Notification payload data.
The closest thing to a specification for the contents of the payload data is draft ietf ipsec notifymsg 04 and nothing in there says that it is ever a complete ISAKMP message so don t dissect types we don t have specific code for as a complete ISAKMP message.
While we re at it fix a comment and clean up printing of V1 Nonce V2 Authentication payloads and v2 Notice payloads.
This fixes an infinite loop discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,"['Authentication', 'infinite loop', 'security']"
200,200,228,Guy Harris,{},CVE-2017-12989,CWE-835,BIGVUL,"02/07/2017, 08:13:33","{'pcap', 'out', 'c'}","{'print-resp.c': {'additions': 11, 'deletions': 3, 'changes': 14, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/resp_4_infiniteloop.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/resp_4_infiniteloop.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/db24063b01cba8e9d4d88b7d8ac70c9000c104e4,{'C/C++'},,positive,"CVE-2017-12989/RESP: Make sure resp_get_length() advances the pointer for invalid lengths.

Make sure that it always sends *endp before returning and that, for
invalid lengths where we don't like a character in the length string,
what it sets *endp to is past the character in question, so we don't
run the risk of infinitely looping (or doing something else random) if a
character in the length is invalid.

This fixes an infinite loop discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'2ecb9d2c67d9119250c54811a6ce4d0f2ddf44f1'},https://github.com/the-tcpdump-group/tcpdump,5.0,db24063b01cba8e9d4d88b7d8ac70c9000c104e4,The RESP parser in tcpdump before 4.9.2 could enter an infinite loop due to a bug in print-resp.c:resp_get_length().,,yes,,,,,"Make sure resp get length advances the pointer for invalid lengths.
Make sure that it always sends endp before returning and that for invalid lengths where we don t like a character in the length string what it sets endp to is past the character in question so we don t run the risk of infinitely looping or doing something else random if a character in the length is invalid.
This fixes an infinite loop discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,"['invalid', 'invalid', 'invalid', 'infinite loop', 'security']"
201,201,229,Guy Harris,{},CVE-2017-12988,CWE-125,BIGVUL,"02/06/2017, 23:13:05","{'pcap', 'out', 'c'}","{'print-telnet.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/telnet-iac-check-oobr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/telnet-iac-check-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/8934a7d6307267d301182f19ed162563717e29e3,{'C/C++'},,positive,"CVE-2017-12988/TELNET: Add a missing bounds check.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'c2ef693866beae071a24b45c49f9674af1df4028'},https://github.com/the-tcpdump-group/tcpdump,7.5,8934a7d6307267d301182f19ed162563717e29e3,The telnet parser in tcpdump before 4.9.2 has a buffer over-read in print-telnet.c:telnet_parse().,,yes,,,,,"Add a missing bounds check.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
202,202,230,Guy Harris,{},CVE-2017-12986,CWE-125,BIGVUL,"02/04/2017, 22:06:23","{'pcap', 'out', 'h'}","{'ip6.h': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ipv6-rthdr-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ipv6-rthdr-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/7ac73d6cd41e9d4ac0ca7e6830ca390e195bb21c,{'C/C++'},,positive,"CVE-2017-12986/IPv6 R.H.: Update to reflect the actual IPv6 RFC.

In RFC 1883, the Type 0 routing header had a 1-byte reserved field and a
3-byte strict/loose bit map; in RFC 2460, that changed to a 4-byte
reserved field.

This fixes a buffer over-read discovered by Brian 'geeknik' Carpenter (by
making an ND_TCHECK() call check for the presence in the captured data
of all 4 bytes of the reserved field; we were printing it as a 4-byte
field, so we needed to check for them).

Add a test using the capture file supplied by the reporter(s).",{'3c4d7c0ee30a30e5abff3d6d9586a3753101faf5'},https://github.com/the-tcpdump-group/tcpdump,7.5,7ac73d6cd41e9d4ac0ca7e6830ca390e195bb21c,The IPv6 routing header parser in tcpdump before 4.9.2 has a buffer over-read in print-rt6.c:rt6_print().,,yes,,,,,"R.H.
Update to reflect the actual IPv6 RFC.
In RFC 1883 the Type 0 routing header had a 1 byte reserved field and a 3 byte strict loose bit map in RFC 2460 that changed to a 4 byte reserved field.
This fixes a buffer over read discovered by Brian geeknik Carpenter by making an ND TCHECK call check for the presence in the captured data of all 4 bytes of the reserved field we were printing it as a 4 byte field so we needed to check for them.
Add a test using the capture file supplied by the reporter s .",0.0,
203,203,231,Guy Harris,{},CVE-2017-12985,CWE-125,BIGVUL,"02/04/2017, 11:13:18","{'pcap', 'out', 'c'}","{'print-ip6.c': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'modified'}, 'print-mobility.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/ipv6-next-header-oobr-1.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ipv6-next-header-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/ipv6-next-header-oobr-2.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ipv6-next-header-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/66df248b49095c261138b5a5e34d341a6bf9ac7f,{'C/C++'},,positive,"CVE-2017-12985/IPv6: Check for print routines returning -1 when running past the end.

rt6_print(), ah_print(), and esp_print() return -1 if they run up
against the end of the packet while dissecting; if that happens, stop
dissecting, don't try to fetch the next header value, because 1) *it*
might be past the end of the packet and 2) we won't be using it in any
case, as we'll be exiting the loop.

Also, change mobility_print() to return -1 if it runs up against the
end of the packet, and stop dissecting if it does so.

This fixes a buffer over-read discovered by Brian 'geeknik' Carpenter.

Add tests using the capture files supplied by the reporter(s).",{'0318fa8b61bd6c837641129d585f1a73c652b1e0'},https://github.com/the-tcpdump-group/tcpdump,7.5,66df248b49095c261138b5a5e34d341a6bf9ac7f,The IPv6 parser in tcpdump before 4.9.2 has a buffer over-read in print-ip6.c:ip6_print().,,yes,,,,,"Check for print routines returning 1 when running past the end.
rt6 print ah print and esp print return 1 if they run up against the end of the packet while dissecting if that happens stop dissecting don t try to fetch the next header value because 1 it might be past the end of the packet and 2 we won t be using it in any case as we ll be exiting the loop.
Also change mobility print to return 1 if it runs up against the end of the packet and stop dissecting if it does so.
This fixes a buffer over read discovered by Brian geeknik Carpenter.
Add tests using the capture files supplied by the reporter s .",0.0,
205,205,233,Guy Harris,{},CVE-2017-12902,CWE-125,BIGVUL,"02/05/2017, 02:38:47","{'pcap', 'out', 'c'}","{'print-zephyr.c': {'additions': 30, 'deletions': 15, 'changes': 45, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/zephyr-oobr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/zephyr-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/d17507ffa3e9742199b02a66aa940e79ababfa30,{'C/C++'},,positive,"CVE-2017-12902/Zephyr: Fix bounds checking.

Use ND_TTEST() rather than comparing against ndo->ndo_snapend ourselves;
it's easy to get the tests wrong.

Check for running out of packet data before checking for running out of
captured data, and distinguish between running out of packet data (which
might just mean ""no more strings"") and running out of captured data
(which means ""truncated"").

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'de981e6070d168b58ec1bb0713ded77ed4ad87f4'},https://github.com/the-tcpdump-group/tcpdump,7.5,d17507ffa3e9742199b02a66aa940e79ababfa30,"The Zephyr parser in tcpdump before 4.9.2 has a buffer over-read in print-zephyr.c, several functions.",,yes,,,,,"Fix bounds checking.
Use ND TTEST rather than comparing against ndo ndo snapend ourselves it s easy to get the tests wrong.
Check for running out of packet data before checking for running out of captured data and distinguish between running out of packet data which might just mean no more strings and running out of captured data which means truncated.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
206,206,234,Guy Harris,{},CVE-2017-12901,CWE-125,BIGVUL,"02/04/2017, 23:33:12","{'pcap', 'out', 'c'}","{'print-eigrp.c': {'additions': 47, 'deletions': 0, 'changes': 47, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/eigrp-tlv-oobr.out': {'additions': 4136, 'deletions': 0, 'changes': 4136, 'status': 'added'}, 'tests/eigrp-tlv-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/de981e6070d168b58ec1bb0713ded77ed4ad87f4,{'C/C++'},,positive,"CVE-2017-12901/EIGRP: Do more length checks.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'7ac73d6cd41e9d4ac0ca7e6830ca390e195bb21c'},https://github.com/the-tcpdump-group/tcpdump,7.5,de981e6070d168b58ec1bb0713ded77ed4ad87f4,The EIGRP parser in tcpdump before 4.9.2 has a buffer over-read in print-eigrp.c:eigrp_print().,,yes,,,,,"Do more length checks.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
207,207,235,Guy Harris,{},CVE-2017-12900,CWE-125,BIGVUL,"02/04/2017, 04:43:16","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'print-lldp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'print-lspping.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'print-zephyr.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/tok2str-oobr-1.out': {'additions': 61, 'deletions': 0, 'changes': 61, 'status': 'added'}, 'tests/tok2str-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/tok2str-oobr-2.out': {'additions': 19, 'deletions': 0, 'changes': 19, 'status': 'added'}, 'tests/tok2str-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/0318fa8b61bd6c837641129d585f1a73c652b1e0,{'C/C++'},,positive,"CVE-2017-12900/Properly terminate all struct tok arrays.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'2b62d1dda41590db29368ec7ba5f4faf3464765a'},https://github.com/the-tcpdump-group/tcpdump,7.5,0318fa8b61bd6c837641129d585f1a73c652b1e0,Several protocol parsers in tcpdump before 4.9.2 could cause a buffer over-read in util-print.c:tok2strbuf().,,yes,,,,,"terminate all struct tok arrays.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
208,208,236,Guy Harris,{},CVE-2017-12898,CWE-125,BIGVUL,"02/03/2017, 23:14:51","{'pcap', 'out', 'c'}","{'print-nfs.c': {'additions': 7, 'deletions': 6, 'changes': 13, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/nfs-attr-oobr.out': {'additions': 305, 'deletions': 0, 'changes': 305, 'status': 'added'}, 'tests/nfs-attr-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/19d25dd8781620cd41bf178a5e2e27fc1cf242d0,{'C/C++'},,positive,"CVE-2017-12898/NFS: Fix bounds checking.

Fix the bounds checking for the NFSv3 WRITE procedure to check whether the
length of the opaque data being written is present in the captured data,
not just whether the byte count is present in the captured data.
furthest forward in the packet, not the item before it.  (This also lets
us eliminate the check for the ""stable"" argument being present in the
captured data; rewrite the code to print that to make it a bit clearer.)

Check that the entire ar_stat field is present in the capture.

Note that parse_wcc_attr() is called after we've already checked whether
the wcc_data is present.

Check before fetching the ""access"" part of the NFSv3 ACCESS results.
This fixes a buffer over-read discovered by Kamil Frankowicz.

Include a test for the ""check before fetching the ""access"" part..."" fix,
using the capture supplied by the reporter(s).",{'1dcd10aceabbc03bf571ea32b892c522cbe923de'},https://github.com/the-tcpdump-group/tcpdump,7.5,19d25dd8781620cd41bf178a5e2e27fc1cf242d0,The NFS parser in tcpdump before 4.9.2 has a buffer over-read in print-nfs.c:interp_reply().,,yes,,,,,"Fix bounds checking.
Fix the bounds checking for the NFSv3 WRITE procedure to check whether the length of the opaque data being written is present in the captured data not just whether the byte count is present in the captured data.
furthest forward in the packet not the item before it.
This also lets us eliminate the check for the stable argument being present in the captured data rewrite the code to print that to make it a bit clearer.
Check that the entire ar stat field is present in the capture.
Note that parse wcc attr is called after we ve already checked whether the wcc data is present.
Check before fetching the access part of the NFSv3 ACCESS results.
This fixes a buffer over read discovered by Kamil Frankowicz.
Include a test for the check before fetching the access part fix.
using the capture supplied by the reporter s .",0.0,
209,209,237,Guy Harris,{},CVE-2017-12897,CWE-125,BIGVUL,"02/03/2017, 20:24:14","{'pcap', 'out', 'c', 'h'}","{'netdissect.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-atm.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-chdlc.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'print-ether.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-fr.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-gre.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-isoclns.c': {'additions': 6, 'deletions': 7, 'changes': 13, 'status': 'modified'}, 'print-juniper.c': {'additions': 8, 'deletions': 8, 'changes': 16, 'status': 'modified'}, 'print-llc.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-mpls.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-null.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'print-ppp.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isoclns-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/isoclns-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/1dcd10aceabbc03bf571ea32b892c522cbe923de,{'C/C++'},,positive,"CVE-2017-12897/ISO CLNS: Use ND_TTEST() for the bounds checks in isoclns_print().

This fixes a buffer over-read discovered by Kamil Frankowicz.

Don't pass the remaining caplen - that's too hard to get right, and we
were getting it wrong in at least one case; just use ND_TTEST().

Add a test using the capture file supplied by the reporter(s).",{'f76e7feb41a4327d2b0978449bbdafe98d4a3771'},https://github.com/the-tcpdump-group/tcpdump,7.5,1dcd10aceabbc03bf571ea32b892c522cbe923de,The ISO CLNS parser in tcpdump before 4.9.2 has a buffer over-read in print-isoclns.c:isoclns_print().,,yes,,,,,"CLNS Use ND TTEST for the bounds checks in isoclns print.
This fixes a buffer over read discovered by Kamil Frankowicz.
Don t pass the remaining caplen that s too hard to get right and we were getting it wrong in at least one case just use ND TTEST.
Add a test using the capture file supplied by the reporter s .",0.0,
210,210,238,Guy Harris,{},CVE-2017-12895,CWE-125,BIGVUL,"02/04/2017, 04:02:45","{'pcap', 'out', 'c'}","{'print-icmp.c': {'additions': 10, 'deletions': 7, 'changes': 17, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/icmp-cksum-oobr-1.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/icmp-cksum-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/icmp-cksum-oobr-2.out': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'added'}, 'tests/icmp-cksum-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/icmp-cksum-oobr-3.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/icmp-cksum-oobr-3.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/icmp-cksum-oobr-4.out': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'added'}, 'tests/icmp-cksum-oobr-4.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/2b62d1dda41590db29368ec7ba5f4faf3464765a,{'C/C++'},,positive,"CVE-2017-12895/ICMP: Check the availability of data before checksumming it.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'730fc35968c5433b9e2a829779057f4f9495dc51'},https://github.com/the-tcpdump-group/tcpdump,7.5,2b62d1dda41590db29368ec7ba5f4faf3464765a,The ICMP parser in tcpdump before 4.9.2 has a buffer over-read in print-icmp.c:icmp_print().,,yes,,,,,"Check the availability of data before checksumming it.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
211,211,239,Guy Harris,{},CVE-2017-12894,CWE-125,BIGVUL,"02/04/2017, 02:54:00","{'pcap', 'out', 'c'}","{'addrtoname.c': {'additions': 43, 'deletions': 29, 'changes': 72, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/arp-oobr.out': {'additions': 2759, 'deletions': 0, 'changes': 2759, 'status': 'added'}, 'tests/arp-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/730fc35968c5433b9e2a829779057f4f9495dc51,{'C/C++'},,positive,"CVE-2017-12894/In lookup_bytestring(), take the length of the byte string into account.

Otherwise, if, in our search of the hash table, we come across a byte
string that's shorter than the string we're looking for, we'll search
past the end of the string in the hash table.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45'},https://github.com/the-tcpdump-group/tcpdump,7.5,730fc35968c5433b9e2a829779057f4f9495dc51,Several protocol parsers in tcpdump before 4.9.2 could cause a buffer over-read in addrtoname.c:lookup_bytestring().,,yes,,,,,"lookup bytestring take the length of the byte string into account.
Otherwise if in our search of the hash table we come across a byte string that s shorter than the string we re looking for we ll search past the end of the string in the hash table.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
212,212,240,Guy Harris,{},CVE-2017-12893,CWE-125,BIGVUL,"02/04/2017, 00:56:57","{'pcap', 'out', 'c'}","{'smbutil.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/nbns-valgrind.out': {'additions': 16, 'deletions': 0, 'changes': 16, 'status': 'added'}, 'tests/nbns-valgrind.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45,{'C/C++'},,positive,"CVE-2017-12893/SMB/CIFS: Add a bounds check in name_len().

After we advance the pointer by the length value in the buffer, make
sure it points to something in the captured data.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'c6e0531b5def26ecf912e8de6ade86cbdaed3751'},https://github.com/the-tcpdump-group/tcpdump,7.5,6f5ba2b651cd9d4b7fa8ee5c4f94460645877c45,The SMB/CIFS parser in tcpdump before 4.9.2 has a buffer over-read in smbutil.c:name_len().,,yes,,,,,"Add a bounds check in name len.
After we advance the pointer by the length value in the buffer make sure it points to something in the captured data.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
215,215,244,Greg Hudson,{},CVE-2017-11462,CWE-415,BIGVUL,"07/14/2017, 17:02:46",{'c'},"{'src/lib/gssapi/mechglue/g_accept_sec_context.c': {'additions': 15, 'deletions': 7, 'changes': 22, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_complete_auth_token.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_context_time.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_delete_sec_context.c': {'additions': 8, 'deletions': 6, 'changes': 14, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_exp_sec_context.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_init_sec_context.c': {'additions': 11, 'deletions': 8, 'changes': 19, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_inq_context.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_prf.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_process_context.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_seal.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_sign.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_unseal.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_unwrap_aead.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_unwrap_iov.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_verify.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_wrap_aead.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'src/lib/gssapi/mechglue/g_wrap_iov.c': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/56f7b1bc95a2a3eeb420e069e7655fb181ade5cf,{'C/C++'},,positive,"Preserve GSS context on init/accept failure

After gss_init_sec_context() or gss_accept_sec_context() has created a
context, don't delete the mechglue context on failures from subsequent
calls, even if the mechanism deletes the mech-specific context (which
is allowed by RFC 2744 but not preferred).  Check for union contexts
with no mechanism context in each GSS function which accepts a
gss_ctx_id_t.

CVE-2017-11462:

RFC 2744 permits a GSS-API implementation to delete an existing
security context on a second or subsequent call to
gss_init_sec_context() or gss_accept_sec_context() if the call results
in an error.  This API behavior has been found to be dangerous,
leading to the possibility of memory errors in some callers.  For
safety, GSS-API implementations should instead preserve existing
security contexts on error until the caller deletes them.

All versions of MIT krb5 prior to this change may delete acceptor
contexts on error.  Versions 1.13.4 through 1.13.7, 1.14.1 through
1.14.5, and 1.15 through 1.15.1 may also delete initiator contexts on
error.

ticket: 8598 (new)
target_version: 1.15-next
target_version: 1.14-next
tags: pullup",{'a96ac7f73b5804a9c34033539a933ec0b64cce11'},https://github.com/krb5/krb5,7.5,56f7b1bc95a2a3eeb420e069e7655fb181ade5cf,Double free vulnerability in MIT Kerberos 5 (aka krb5) allows attackers to have unspecified impact via vectors involving automatic deletion of security contexts on error.,,yes,,,,,"Preserve GSS context on init accept failure.
After gss init sec context or gss accept sec context has created a context don t delete the mechglue context on failures from subsequent calls even if the mechanism deletes the mech specific context which is allowed by RFC 2744 but not preferred.
Check for union contexts with no mechanism context in each GSS function which accepts a gss ctx id t.

RFC 2744 permits a GSS API implementation to delete an existing security context on a second or subsequent call to gss init sec context or gss accept sec context if the call results in an error.
This API behavior has been found to be dangerous leading to the possibility of memory errors in some callers.
For safety GSS API implementations should instead preserve existing security contexts on error until the caller deletes them.
All versions of MIT krb5 prior to this change may delete acceptor contexts on error.
Versions 1.13.4 through 1.13.7 1.14.1 through 1.14.5 and 1.15 through 1.15.1 may also delete initiator contexts on error.
ticket 8598 new.
target version 1.15 next.
target version 1.14 next.
tags pullup.",1.0,"['security', 'memory', 'security']"
216,216,245,Greg Hudson,{},CVE-2017-11368,CWE-617,BIGVUL,"07/13/2017, 16:14:20",{'c'},"{'src/kdc/do_as_req.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'src/kdc/do_tgs_req.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'src/kdc/kdc_util.c': {'additions': 8, 'deletions': 2, 'changes': 10, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/ffb35baac6981f9e8914f8f3bffd37f284b85970,{'C/C++'},,positive,"Prevent KDC unset status assertion failures

Assign status values if S4U2Self padata fails to decode, if an
S4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request
uses an evidence ticket which does not match the canonicalized request
server principal name.  Reported by Samuel Cabrero.

If a status value is not assigned during KDC processing, default to
""UNKNOWN_REASON"" rather than failing an assertion.  This change will
prevent future denial of service bugs due to similar mistakes, and
will allow us to omit assigning status values for unlikely errors such
as small memory allocation failures.

CVE-2017-11368:

In MIT krb5 1.7 and later, an authenticated attacker can cause an
assertion failure in krb5kdc by sending an invalid S4U2Self or
S4U2Proxy request.

  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C

ticket: 8599 (new)
target_version: 1.15-next
target_version: 1.14-next
tags: pullup",{'e458441f34e47a218ce7e60fef394821fa0a934d'},https://github.com/krb5/krb5,4.0,ffb35baac6981f9e8914f8f3bffd37f284b85970,"In MIT Kerberos 5 (aka krb5) 1.7 and later, an authenticated attacker can cause a KDC assertion failure by sending invalid S4U2Self or S4U2Proxy requests.",,yes,,,,,"Prevent KDC unset status assertion failures.
Assign status values if padata fails to decode if an request uses invalid KDC options or if an request uses an evidence ticket which does not match the canonicalized request server principal name.
Reported by Samuel Cabrero.
If a status value is not assigned during KDC processing default to UNKNOWN REASON rather than failing an assertion.
This change will prevent future denial of service bugs due to similar mistakes and will allow us to omit assigning status values for unlikely errors such as small memory allocation failures.

In MIT krb5 1.7 and later an authenticated attacker can cause an assertion failure in krb5kdc by sending an invalid or request.
CVSSv3 Vector AV N AC L PR L UI N S U C N I N A H E H RL O RC C.
ticket 8599 new.
target version 1.15 next.
target version 1.14 next.
tags pullup.",1.0,"['Prevent', 'invalid', 'prevent', 'denial of service ', 'memory', 'invalid']"
290,290,323,Denis Ovsienko,{},CVE-2018-16452,CWE-674,BIGVUL,"09/07/2018, 20:10:36",{'c'},"{'smbutil.c': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/24182d959f661327525a20d9a94c98a8ec016778,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16452/SMB: prevent stack exhaustion

Enforce a limit on how many times smb_fdata() can recurse.

This fixes a stack exhaustion discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.",{'af2cf04a9394c1a56227c2289ae8da262828294a'},https://github.com/the-tcpdump-group/tcpdump,5.0,24182d959f661327525a20d9a94c98a8ec016778,The SMB parser in tcpdump before 4.9.3 has stack exhaustion in smbutil.c:smb_fdata() via recursion.,,yes,,,,,"for 4.9.3 prevent stack exhaustion.
Enforce a limit on how many times smb fdata can recurse.
This fixes a stack exhaustion discovered by Include Security working.
under the Mozilla SOS program in 2018 by means of code audit.",1.0,"['prevent', 'limit', 'Security']"
291,291,324,Denis Ovsienko,{},CVE-2018-16300,CWE-674,BIGVUL,"09/06/2018, 20:26:21",{'c'},"{'print-bgp.c': {'additions': 12, 'deletions': 4, 'changes': 16, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/af2cf04a9394c1a56227c2289ae8da262828294a,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16300/BGP: prevent stack exhaustion

Enforce a limit on how many times bgp_attr_print() can recurse.

This fixes a stack exhaustion discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.",{'4bfd71eee41a1db0647fa4d434841a51b07ec38a'},https://github.com/the-tcpdump-group/tcpdump,5.0,af2cf04a9394c1a56227c2289ae8da262828294a,The BGP parser in tcpdump before 4.9.3 allows stack consumption in print-bgp.c:bgp_attr_print() because of unlimited recursion.,,yes,,,,,"for 4.9.3 prevent stack exhaustion.
Enforce a limit on how many times bgp attr print can recurse.
This fixes a stack exhaustion discovered by Include Security working.
under the Mozilla SOS program in 2018 by means of code audit.",1.0,"['prevent', 'limit', 'Security']"
292,292,325,Denis Ovsienko,{},CVE-2018-16230,CWE-125,BIGVUL,"08/23/2018, 21:09:16","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp_mp_reach_nlri-oobr.out': {'additions': 277, 'deletions': 0, 'changes': 277, 'status': 'added'}, 'tests/bgp_mp_reach_nlri-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/13d52e9c0e7caf7e6325b0051bc90a49968be67f,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16230/BGP: fix decoding of MP_REACH_NLRI

When bgp_attr_print() tried to decode the variable-length nexthop value
for the NSAP VPN case, it did not check that the declared length is good
to interpret the value as a mapped IPv4 or IPv6 address. Add missing
checks to make this safe.

This fixes a buffer over-read discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.

Bhargava Shastry, SecT/TU Berlin, had independently identified this
vulnerability by means of fuzzing and provided the packet capture file
for the test.",{'9a6eb27650463ad65dc75d1bfc972a0d0ad673ae'},https://github.com/the-tcpdump-group/tcpdump,7.5,13d52e9c0e7caf7e6325b0051bc90a49968be67f,The BGP parser in tcpdump before 4.9.3 has a buffer over-read in print-bgp.c:bgp_attr_print() (MP_REACH_NLRI).,,yes,,,,,"for 4.9.3 fix decoding of MP REACH NLRI.
When bgp attr print tried to decode the variable length nexthop value for the NSAP VPN case it did not check that the declared length is good to interpret the value as a mapped IPv4 or IPv6 address.
Add missing checks to make this safe.
This fixes a buffer over read discovered by Include Security working under the Mozilla SOS program in 2018 by means of code audit.
Bhargava Shastry SecT TU Berlin had independently identified this.
vulnerability by means of fuzzing and provided the packet capture file.
for the test.",1.0,['Security']
293,293,326,Francois-Xavier Le Bail,{},CVE-2018-16229,CWE-125,BIGVUL,"05/21/2018, 07:25:15","{'pcap', 'out', 'c'}","{'print-dccp.c': {'additions': 46, 'deletions': 7, 'changes': 53, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/dccp_options-oobr.out': {'additions': 19, 'deletions': 0, 'changes': 19, 'status': 'added'}, 'tests/dccp_options-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/211124b972e74f0da66bc8b16f181f78793e2f66,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16229/DCCP: Fix printing ""Timestamp"" and ""Timestamp Echo"" options

Add some comments.

Moreover:
Put a function definition name at the beginning of the line.

(This change was ported from commit 6df4852 in the master branch.)

Ryan Ackroyd had independently identified this buffer over-read later by
means of fuzzing and provided the packet capture file for the test.",{'4846b3c5d0a850e860baf4f07340495d29837d09'},https://github.com/the-tcpdump-group/tcpdump,7.5,211124b972e74f0da66bc8b16f181f78793e2f66,The DCCP parser in tcpdump before 4.9.3 has a buffer over-read in print-dccp.c:dccp_print_option().,,yes,,,,,"for 4.9.3 Fix printing Timestamp and Timestamp Echo options.
Add some comments.
Moreover Put a function definition name at the beginning of the line.
This change was ported from commit 6df4852 in the master branch.
Ryan Ackroyd had independently identified this buffer over read later by.
means of fuzzing and provided the packet capture file for the test.",0.0,
294,294,327,Denis Ovsienko,{},CVE-2018-16228,CWE-125,BIGVUL,"08/23/2018, 22:32:07","{'out', 'c', 'pcapng'}","{'print-hncp.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/hncp_prefix-oobr.out': {'additions': 48, 'deletions': 0, 'changes': 48, 'status': 'added'}, 'tests/hncp_prefix-oobr.pcapng': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/83a412a5275cac973c5841eca3511c766bed778d,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16228/HNCP: make buffer access safer

print_prefix() has a buffer and does not initialize it. It may call
decode_prefix6(), which also does not initialize the buffer on invalid
input. When that happens, make sure to return from print_prefix() before
trying to print the [still uninitialized] buffer.

This fixes a buffer over-read discovered by Wang Junjie of 360 ESG
Codesafe Team.

Add a test using the capture file supplied by the reporter(s).",{'13d52e9c0e7caf7e6325b0051bc90a49968be67f'},https://github.com/the-tcpdump-group/tcpdump,7.5,83a412a5275cac973c5841eca3511c766bed778d,The HNCP parser in tcpdump before 4.9.3 has a buffer over-read in print-hncp.c:print_prefix().,,yes,,,,,"for 4.9.3 make buffer access safer.
print prefix has a buffer and does not initialize it.
It may call decode prefix6 which also does not initialize the buffer on invalid input.
When that happens make sure to return from print prefix before trying to print the still uninitialized buffer.
This fixes a buffer over read discovered by Wang Junjie of 360 ESG Codesafe Team.
Add a test using the capture file supplied by the reporter s .",1.0,"['initialize', 'initialize', 'invalid']"
295,295,328,Denis Ovsienko,{},CVE-2018-16227,CWE-125,BIGVUL,"08/28/2018, 23:38:40","{'pcap', 'out', 'c'}","{'print-802_11.c': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/ieee802.11_meshhdr-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/ieee802.11_meshhdr-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/4846b3c5d0a850e860baf4f07340495d29837d09,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-16227/IEEE 802.11: add a missing bounds check

ieee802_11_print() tried to access the Mesh Flags subfield of the Mesh
Control field to find the size of the latter and increment the expected
802.11 header length before checking it is fully present in the input
buffer. Add an intermediate bounds check to make it safe.

This fixes a buffer over-read discovered by Ryan Ackroyd.

Add a test using the capture file supplied by the reporter(s).",{'83a412a5275cac973c5841eca3511c766bed778d'},https://github.com/the-tcpdump-group/tcpdump,7.5,4846b3c5d0a850e860baf4f07340495d29837d09,The IEEE 802.11 parser in tcpdump before 4.9.3 has a buffer over-read in print-802_11.c for the Mesh Flags subfield.,,yes,,,,,"for 4.9.3 802.11 add a missing bounds check.
ieee802 11 print tried to access the Mesh Flags subfield of the Mesh Control field to find the size of the latter and increment the expected 802.11 header length before checking it is fully present in the input buffer.
Add an intermediate bounds check to make it safe.
This fixes a buffer over read discovered by Ryan Ackroyd.
Add a test using the capture file supplied by the reporter s .",0.0,
296,296,329,Francois-Xavier Le Bail,{},CVE-2018-14882,CWE-125,BIGVUL,"11/03/2017, 15:32:30","{'out', 'c', 'pcapng'}","{'print-icmp6.c': {'additions': 17, 'deletions': 12, 'changes': 29, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/icmp6_mobileprefix_asan.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/icmp6_nodeinfo_oobr.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/rpl-19-pickdag.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/rpl-19-pickdagvvv.out': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/rpl-dao-oobr.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/rpl-dao-oobr.pcapng': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/d7505276842e85bfd067fa21cdb32b8a2dc3c5e4,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14882/ICMP6 RPL: Add a missing bounds check

Moreover:
Add and use *_tstr[] strings.
Update four tests outputs accordingly.
Fix a space.

Wang Junjie of 360 ESG Codesafe Team had independently identified this
vulnerability in 2018 by means of fuzzing and provided the packet capture
file for the test.",{'e01c9bf76740802025c9328901b55ee4a0c49ed6'},https://github.com/the-tcpdump-group/tcpdump,7.5,d7505276842e85bfd067fa21cdb32b8a2dc3c5e4,The ICMPv6 parser in tcpdump before 4.9.3 has a buffer over-read in print-icmp6.c.,,yes,,,,,"for 4.9.3 RPL Add a missing bounds check.
Moreover Add and use tstr strings.
Update four tests outputs accordingly.
Fix a space.
Wang Junjie of 360 ESG Codesafe Team had independently identified this.
vulnerability in 2018 by means of fuzzing and provided the packet capture.
file for the test.",0.0,
297,297,330,Francois-Xavier Le Bail,{},CVE-2018-14881,CWE-125,BIGVUL,"10/08/2017, 11:38:50","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp-bgp_capabilities_print-oobr-1.out': {'additions': 27, 'deletions': 0, 'changes': 27, 'status': 'added'}, 'tests/bgp-bgp_capabilities_print-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/86326e880d31b328a151d45348c35220baa9a1ff,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14881/BGP: Fix BGP_CAPCODE_RESTART.

Add a bounds check and a comment to bgp_capabilities_print().

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'3de07c772166b7e8e8bb4b9d1d078f1d901b570b'},https://github.com/the-tcpdump-group/tcpdump,7.5,86326e880d31b328a151d45348c35220baa9a1ff,The BGP parser in tcpdump before 4.9.3 has a buffer over-read in print-bgp.c:bgp_capabilities_print() (BGP_CAPCODE_RESTART).,,yes,,,,,"for 4.9.3 Fix BGP CAPCODE RESTART.
Add a bounds check and a comment to bgp capabilities print.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
298,298,331,Francois-Xavier Le Bail,{},CVE-2018-14880,CWE-125,BIGVUL,"11/04/2017, 15:06:33","{'out', 'c', 'pcapng'}","{'print-ospf6.c': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified'}, 'tests/ospf6_print_lshdr-oobr.out': {'additions': 59, 'deletions': 0, 'changes': 59, 'status': 'added'}, 'tests/ospf6_print_lshdr-oobr.pcapng': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/e01c9bf76740802025c9328901b55ee4a0c49ed6,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14880/OSPFv3: Fix a bounds check

Need to test bounds check for the last field of the structure lsa6_hdr.
No need to test other fields.

Include Security working under the Mozilla SOS program had independently
identified this vulnerability in 2018 by means of code audit.

Wang Junjie of 360 ESG Codesafe Team had independently identified this
vulnerability in 2018 by means of fuzzing and provided the packet capture
file for the test.",{'5e0aca029f886e2d3a6470b7defe2de4fa8d0b6b'},https://github.com/the-tcpdump-group/tcpdump,7.5,e01c9bf76740802025c9328901b55ee4a0c49ed6,The OSPFv3 parser in tcpdump before 4.9.3 has a buffer over-read in print-ospf6.c:ospf6_print_lshdr().,,yes,,,,,"for 4.9.3 Fix a bounds check.
Need to test bounds check for the last field of the structure lsa6 hdr.
No need to test other fields.
Include Security working under the Mozilla SOS program had independently identified this vulnerability in 2018 by means of code audit.
Wang Junjie of 360 ESG Codesafe Team had independently identified this.
vulnerability in 2018 by means of fuzzing and provided the packet capture.
file for the test.",1.0,['Security']
299,299,332,Denis Ovsienko,{},CVE-2018-14879,CWE-120,BIGVUL,"06/17/2018, 21:15:19",{'c'},"{'tcpdump.c': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/9ba91381954ad325ea4fd26b9c65a8bd9a2a85b6,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14879/fix -V to fail invalid input safely

get_next_file() did not check the return value of strlen() and
underflowed an array index if the line read by fgets() from the file
started with \0. This caused an out-of-bounds read and could cause a
write. Add the missing check.

This vulnerability was discovered by Brian Carpenter & Geeknik Labs.",{'d7505276842e85bfd067fa21cdb32b8a2dc3c5e4'},https://github.com/the-tcpdump-group/tcpdump,7.5,9ba91381954ad325ea4fd26b9c65a8bd9a2a85b6,The command-line argument parser in tcpdump before 4.9.3 has a buffer overflow in tcpdump.c:get_next_file().,Overflow ,yes,,,,,"for 4.9.3 V to fail invalid input safely.
get next file did not check the return value of strlen and underflowed an array index if the line read by fgets from the file started with 0.
This caused an out of bounds read and could cause a write.
Add the missing check.
This vulnerability was discovered by Brian Carpenter Geeknik Labs.",1.0,['invalid']
300,300,333,Denis Ovsienko,{},CVE-2018-14470,CWE-125,BIGVUL,"09/12/2017, 09:59:16","{'pcap', 'out', 'c'}","{'print-babel.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/babel_update_oobr.out': {'additions': 66, 'deletions': 0, 'changes': 66, 'status': 'added'}, 'tests/babel_update_oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/12f66f69f7bf1ec1266ddbee90a7616cbf33696b,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14470/Babel: fix an existing length check

In babel_print_v2() the non-verbose branch for an Update TLV compared
the TLV Length against 1 instead of 10 (probably a typo), put it right.

This fixes a buffer over-read discovered by Henri Salo from Nixu
Corporation.

Add a test using the capture file supplied by the reporter(s).",{'aa3e54f594385ce7e1e319b0c84999e51192578b'},https://github.com/the-tcpdump-group/tcpdump,7.5,12f66f69f7bf1ec1266ddbee90a7616cbf33696b,The Babel parser in tcpdump before 4.9.3 has a buffer over-read in print-babel.c:babel_print_v2().,,yes,,,,,"for 4.9.3 fix an existing length check.
In babel print v2 the non verbose branch for an Update TLV compared the TLV Length against 1 instead of 10 probably a typo put it right.
This fixes a buffer over read discovered by Henri Salo from Nixu Corporation.
Add a test using the capture file supplied by the reporter s .",0.0,
301,301,334,Francois-Xavier Le Bail,{},CVE-2018-14469,CWE-125,BIGVUL,"10/08/2017, 09:36:55","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isakmp-ikev1_n_print-oobr.out': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'added'}, 'tests/isakmp-ikev1_n_print-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/396e94ff55a80d554b1fe46bf107db1e91008d6c,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14469/ISAKMP: Add a missing bounds check

In ikev1_n_print() check bounds before trying to fetch the replay detection
status.

This fixes a buffer over-read discovered by Bhargava Shastry.

Add a test using the capture file supplied by the reporter(s).",{'c24922e692a52121e853a84ead6b9337f4c08a94'},https://github.com/the-tcpdump-group/tcpdump,7.5,396e94ff55a80d554b1fe46bf107db1e91008d6c,The IKEv1 parser in tcpdump before 4.9.3 has a buffer over-read in print-isakmp.c:ikev1_n_print().,,yes,,,,,"for 4.9.3 Add a missing bounds check.
In ikev1 n print check bounds before trying to fetch the replay detection status.
This fixes a buffer over read discovered by Bhargava Shastry.
Add a test using the capture file supplied by the reporter s .",1.0,['replay']
302,302,335,Denis Ovsienko,{},CVE-2018-14468,CWE-125,BIGVUL,"09/01/2017, 16:55:39","{'pcap', 'out', 'c'}","{'print-fr.c': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/frf16_magic_ie-oobr.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/frf16_magic_ie-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/aa3e54f594385ce7e1e319b0c84999e51192578b,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14468/FRF.16: Add a missing length check.

The specification says in a well-formed Magic Number information element
the data is exactly 4 bytes long. In mfr_print() check this before trying
to read those 4 bytes.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'05a303c84c1cb4880eef1a4430df357526c79000'},https://github.com/the-tcpdump-group/tcpdump,7.5,aa3e54f594385ce7e1e319b0c84999e51192578b,The FRF.16 parser in tcpdump before 4.9.3 has a buffer over-read in print-fr.c:mfr_print().,,yes,,,,,"for 4.9.3 Add a missing length check.
The specification says in a well formed Magic Number information element the data is exactly 4 bytes long.
In mfr print check this before trying to read those 4 bytes.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
303,303,336,Francois-Xavier Le Bail,{},CVE-2018-14467,CWE-125,BIGVUL,"10/08/2017, 11:38:50","{'pcap', 'out', 'c'}","{'print-bgp.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bgp-bgp_capabilities_print-oobr-2.out': {'additions': 26, 'deletions': 0, 'changes': 26, 'status': 'added'}, 'tests/bgp-bgp_capabilities_print-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/e3f3b445e2d20ac5d5b7fcb7559ce6beb55da0c9,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14467/BGP: Fix BGP_CAPCODE_MP.

Add a bounds check and a comment to bgp_capabilities_print().

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'86326e880d31b328a151d45348c35220baa9a1ff'},https://github.com/the-tcpdump-group/tcpdump,7.5,e3f3b445e2d20ac5d5b7fcb7559ce6beb55da0c9,The BGP parser in tcpdump before 4.9.3 has a buffer over-read in print-bgp.c:bgp_capabilities_print() (BGP_CAPCODE_MP).,,yes,,,,,"for 4.9.3 Fix BGP CAPCODE MP.
Add a bounds check and a comment to bgp capabilities print.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
304,304,337,Denis Ovsienko,{},CVE-2018-14466,CWE-125,BIGVUL,"09/19/2017, 12:33:55","{'pcap', 'out', 'c'}","{'print-rx.c': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/rx_serviceid_oobr.out': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'added'}, 'tests/rx_serviceid_oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c24922e692a52121e853a84ead6b9337f4c08a94,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14466/Rx: fix an over-read bug

In rx_cache_insert() and rx_cache_find() properly read the serviceId
field of the rx_header structure as a 16-bit integer. When those
functions tried to read 32 bits the extra 16 bits could be outside of
the bounds checked in rx_print() for the rx_header structure, as
serviceId is the last field in that structure.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'e5ae1fd2c5d86277e76ec901ed5f311df731caff'},https://github.com/the-tcpdump-group/tcpdump,7.5,c24922e692a52121e853a84ead6b9337f4c08a94,The Rx parser in tcpdump before 4.9.3 has a buffer over-read in print-rx.c:rx_cache_find() and rx_cache_insert().,,yes,,,,,"for 4.9.3 fix an over read bug.
In rx cache insert and rx cache find properly read the serviceId field of the rx header structure as a 16 bit integer.
When those functions tried to read 32 bits the extra 16 bits could be outside of the bounds checked in rx print for the rx header structure as serviceId is the last field in that structure.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
305,305,338,Francois-Xavier Le Bail,{},CVE-2018-14465,CWE-125,BIGVUL,"10/08/2017, 11:19:12","{'pcap', 'out', 'c'}","{'print-rsvp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/rsvp-rsvp_obj_print-oobr.out': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'added'}, 'tests/rsvp-rsvp_obj_print-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/bea2686c296b79609060a104cc139810785b0739,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14465/RSVP: Add a missing bounds check

In rsvp_obj_print().

This fixes a buffer over-read discovered by Bhargava Shastry.

Add a test using the capture file supplied by the reporter(s).",{'1a1bce0526a77b62e41531b00f8bb5e21fd4f3a3'},https://github.com/the-tcpdump-group/tcpdump,7.5,bea2686c296b79609060a104cc139810785b0739,The RSVP parser in tcpdump before 4.9.3 has a buffer over-read in print-rsvp.c:rsvp_obj_print().,,yes,,,,,"for 4.9.3 Add a missing bounds check.
In rsvp obj print.
This fixes a buffer over read discovered by Bhargava Shastry.
Add a test using the capture file supplied by the reporter s .",0.0,
306,306,339,Francois-Xavier Le Bail,{},CVE-2018-14464,CWE-125,BIGVUL,"10/17/2017, 19:56:46","{'pcap', 'out', 'c'}","{'print-lmp.c': {'additions': 16, 'deletions': 4, 'changes': 20, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/lmp-lmp_print_data_link_subobjs-oobr.out': {'additions': 22, 'deletions': 0, 'changes': 22, 'status': 'added'}, 'tests/lmp-lmp_print_data_link_subobjs-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/d97e94223720684c6aa740ff219e0d19426c2220,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14464/LMP: Add a missing bounds check

In lmp_print_data_link_subobjs().

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).",{'a152aebfd1114376ba266ed30416be596ef9d806'},https://github.com/the-tcpdump-group/tcpdump,7.5,d97e94223720684c6aa740ff219e0d19426c2220,The LMP parser in tcpdump before 4.9.3 has a buffer over-read in print-lmp.c:lmp_print_data_link_subobjs().,,yes,,,,,"for 4.9.3 Add a missing bounds check.
In lmp print data link subobjs.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s .",0.0,
307,307,340,Francois-Xavier Le Bail,{},CVE-2018-14463,CWE-125,BIGVUL,"10/08/2017, 11:28:05","{'pcap', 'out', 'c'}","{'print-vrrp.c': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/vrrp-vrrp_print-oobr.out': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'added'}, 'tests/vrrp-vrrp_print-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/3de07c772166b7e8e8bb4b9d1d078f1d901b570b,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14463/VRRP: Add a missing bounds check

In vrrp_print().

This fixes a buffer over-read discovered by Bhargava Shastry.

Add a test using the capture file supplied by the reporter(s).",{'bea2686c296b79609060a104cc139810785b0739'},https://github.com/the-tcpdump-group/tcpdump,7.5,3de07c772166b7e8e8bb4b9d1d078f1d901b570b,The VRRP parser in tcpdump before 4.9.3 has a buffer over-read in print-vrrp.c:vrrp_print().,,yes,,,,,"for 4.9.3 Add a missing bounds check.
In vrrp print.
This fixes a buffer over read discovered by Bhargava Shastry.
Add a test using the capture file supplied by the reporter s .",0.0,
308,308,341,Francois-Xavier Le Bail,{},CVE-2018-14462,CWE-125,BIGVUL,"10/08/2017, 10:06:56","{'pcap', 'out', 'c'}","{'print-icmp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/icmp-icmp_print-oobr-1.out': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'added'}, 'tests/icmp-icmp_print-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/icmp-icmp_print-oobr-2.out': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'added'}, 'tests/icmp-icmp_print-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/1a1bce0526a77b62e41531b00f8bb5e21fd4f3a3,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14462/ICMP: Add a missing bounds check

In icmp_print().

This fixes a buffer over-read discovered by Bhargava Shastry.

Add two tests using the capture files supplied by the reporter(s).",{'e5ec0d6b59b02423ef6a29544bca34b62745c180'},https://github.com/the-tcpdump-group/tcpdump,7.5,1a1bce0526a77b62e41531b00f8bb5e21fd4f3a3,The ICMP parser in tcpdump before 4.9.3 has a buffer over-read in print-icmp.c:icmp_print().,,yes,,,,,"for 4.9.3 Add a missing bounds check.
In icmp print.
This fixes a buffer over read discovered by Bhargava Shastry.
Add two tests using the capture files supplied by the reporter s .",0.0,
309,309,342,Francois-Xavier Le Bail,{},CVE-2018-14461,CWE-125,BIGVUL,"10/08/2017, 09:49:24","{'pcap', 'out', 'c'}","{'print-ldp.c': {'additions': 6, 'deletions': 3, 'changes': 9, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ldp-ldp_tlv_print-oobr.out': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'added'}, 'tests/ldp-ldp_tlv_print-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/aa5c6b710dfd8020d2c908d6b3bd41f1da719b3b,{'C/C++'},,positive,"(for 4.9.3) CVE-2018-14461/LDP: Fix a bounds check

In ldp_tlv_print(), the FT Session TLV length must be 12, not 8 (RFC3479)

This fixes a buffer over-read discovered by Konrad Rieck and
Bhargava Shastry.

Add a test using the capture file supplied by the reporter(s).

Moreover:
Add and use tstr[].
Add a comment.",{'396e94ff55a80d554b1fe46bf107db1e91008d6c'},https://github.com/the-tcpdump-group/tcpdump,7.5,aa5c6b710dfd8020d2c908d6b3bd41f1da719b3b,The LDP parser in tcpdump before 4.9.3 has a buffer over-read in print-ldp.c:ldp_tlv_print().,,yes,,,,,"for 4.9.3 Fix a bounds check.
In ldp tlv print the FT Session TLV length must be 12 not 8 RFC3479.
This fixes a buffer over read discovered by Konrad Rieck and Bhargava Shastry.
Add a test using the capture file supplied by the reporter s.
Moreover.
Add and use tstr.

Add a comment.",0.0,
310,310,343,Greg Hudson,{},CVE-2014-4344,CWE-476,BIGVUL,"07/15/2014, 16:56:01",{'c'},"{'src/lib/gssapi/spnego/spnego_mech.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}}",https://github.com/krb5/krb5/commit/524688ce87a15fc75f87efc8c039ba4c7d5c197b,{'C/C++'},,positive,"Fix null deref in SPNEGO acceptor [CVE-2014-4344]

When processing a continuation token, acc_ctx_cont was dereferencing
the initial byte of the token without checking the length.  This could
result in a null dereference.

CVE-2014-4344:

In MIT krb5 1.5 and newer, an unauthenticated or partially
authenticated remote attacker can cause a NULL dereference and
application crash during a SPNEGO negotiation by sending an empty
token as the second or later context token from initiator to acceptor.
The attacker must provide at least one valid context token in the
security context negotiation before sending the empty token.  This can
be done by an unauthenticated attacker by forcing SPNEGO to
renegotiate the underlying mechanism, or by using IAKERB to wrap an
unauthenticated AS-REQ as the first token.

    CVSSv2 Vector: AV:N/AC:L/Au:N/C:N/I:N/A:C/E:POC/RL:OF/RC:C

[kaduk@mit.edu: CVE summary, CVSSv2 vector]

ticket: 7970 (new)
subject: NULL dereference in SPNEGO acceptor for continuation tokens [CVE-2014-4344]
target_version: 1.12.2
tags: pullup",{'f18ddf5d82de0ab7591a36e465bc24225776940f'},https://github.com/krb5/krb5,7.8,524688ce87a15fc75f87efc8c039ba4c7d5c197b,The acc_ctx_cont function in the SPNEGO acceptor in lib/gssapi/spnego/spnego_mech.c in MIT Kerberos 5 (aka krb5) 1.5.x through 1.12.x before 1.12.2 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via an empty continuation token at a certain point during a SPNEGO negotiation.,DoS ,yes,,,,,"Fix null deref in SPNEGO acceptor.
When processing a continuation token acc ctx cont was dereferencing the initial byte of the token without checking the length.
This could result in a null dereference.

In MIT krb5 1.5 and newer an unauthenticated or partially authenticated remote attacker can cause a NULL dereference and application crash during a SPNEGO negotiation by sending an empty token as the second or later context token from initiator to acceptor.
The attacker must provide at least one valid context token in the security context negotiation before sending the empty token.
This can be done by an unauthenticated attacker by forcing SPNEGO to renegotiate the underlying mechanism or by using IAKERB to wrap an unauthenticated AS REQ as the first token.
CVSSv2 Vector AV N AC L Au N C N I N A C E POC RL OF RC C.
E mail CVE summary CVSSv2 vector.
ticket 7970 new.
subject NULL dereference in SPNEGO acceptor for continuation tokens.
target version 1.12.2.
tags pullup.",1.0,"['null deref', 'null dereference', 'NULL dereference', 'crash', 'valid', 'security', 'POC', 'NULL dereference']"
317,317,350,Denis Ovsienko,{},CVE-2017-13687,CWE-125,BIGVUL,"02/03/2017, 13:14:51",{'c'},"{'print-chdlc.c': {'additions': 12, 'deletions': 8, 'changes': 20, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/a1eefe986065846b6c69dbc09afd9fa1a02c4a3d,{'C/C++'},,positive,"CVE-2017-13687/CHDLC: Improve bounds and length checks.

Prevent a possible buffer overread in chdlc_print() and replace the
custom check in chdlc_if_print() with a standard check in chdlc_print()
so that the latter certainly does not over-read even when reached via
juniper_chdlc_print(). Add length checks.",{'071190f7a96d273fe79dc6f3ca12153d8db1de00'},https://github.com/the-tcpdump-group/tcpdump,7.5,a1eefe986065846b6c69dbc09afd9fa1a02c4a3d,The Cisco HDLC parser in tcpdump before 4.9.2 has a buffer over-read in print-chdlc.c:chdlc_print().,,yes,,,,,"Improve bounds and length checks.
Prevent a possible buffer overread in chdlc print and replace the.
custom check in chdlc if print with a standard check in chdlc print.
so that the latter certainly does not over read even when reached via.
juniper chdlc print.
Add length checks.",1.0,"['Prevent', 'overread']"
318,318,351,Francois-Xavier Le Bail,{},CVE-2017-13028,CWE-125,BIGVUL,"03/22/2017, 18:37:04","{'pcap', 'out', 'c'}","{'print-bootp.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/bootp_asan.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/bootp_asan.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/29e5470e6ab84badbc31f4532bb7554a796d9d52,{'C/C++'},,positive,"CVE-2017-13028/BOOTP: Add a bounds check before fetching data

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s), modified
so the capture file won't cause 'tcpdump: pcap_loop: truncated dump file'",{'a77ff09c46560bc895dea11dc9fe643486b056ac'},https://github.com/the-tcpdump-group/tcpdump,7.5,29e5470e6ab84badbc31f4532bb7554a796d9d52,The BOOTP parser in tcpdump before 4.9.2 has a buffer over-read in print-bootp.c:bootp_print().,,yes,,,,,"Add a bounds check before fetching data.
This fixes a buffer over read discovered by Bhargava Shastry SecT TU Berlin.
Add a test using the capture file supplied by the reporter s modified.
so the capture file won t cause tcpdump pcap loop truncated dump file.",0.0,
319,319,352,Guy Harris,{},CVE-2017-13004,CWE-125,BIGVUL,"02/21/2017, 22:20:32","{'pcap', 'out', 'c'}","{'print-juniper.c': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/juniper_atm1.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/juniper_atm1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/juniper_es.out': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'added'}, 'tests/juniper_es.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/42073d54c53a496be40ae84152bbfe2c923ac7bc,{'C/C++'},,positive,"CVE-2017-13004/Juniper: Add a bounds check.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'a25211918f2e790c67d859d20ccf8dbb81da1598'},https://github.com/the-tcpdump-group/tcpdump,7.5,42073d54c53a496be40ae84152bbfe2c923ac7bc,The Juniper protocols parser in tcpdump before 4.9.2 has a buffer over-read in print-juniper.c:juniper_parse_header().,,yes,,,,,"Add a bounds check.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
320,320,353,Guy Harris,{},CVE-2017-13000,CWE-125,BIGVUL,"02/18/2017, 01:43:10","{'pcap', 'out', 'c'}","{'print-802_15_4.c': {'additions': 142, 'deletions': 100, 'changes': 242, 'status': 'modified'}, 'tests/802_15_4-oobr-1.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/802_15_4-oobr-1.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/802_15_4-oobr-2.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/802_15_4-oobr-2.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/TESTLIST': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/9be4e0b5938b705e7e36cfcb110a740c6ff0cb97,{'C/C++'},,positive,"CVE-2017-13000/IEEE 802.15.4: Add more bounds checks.

While we're at it, add a bunch of macros for the frame control field's
subfields, have the reserved frame types show the frame type value, use
the same code path for processing source and destination addresses
regardless of whether -v was specified (just leave out the addresses in
non-verbose mode), and return the header length in all cases.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add tests using the capture files supplied by the reporter(s).",{'b1928b44a51455706bcfcce676e5e79571f65ae3'},https://github.com/the-tcpdump-group/tcpdump,7.5,9be4e0b5938b705e7e36cfcb110a740c6ff0cb97,The IEEE 802.15.4 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_15_4.c:ieee802_15_4_if_print().,,yes,,,,,"802.15.4 Add more bounds checks.
While we re at it add a bunch of macros for the frame control field s subfields have the reserved frame types show the frame type value use the same code path for processing source and destination addresses regardless of whether v was specified just leave out the addresses in non verbose mode and return the header length in all cases.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add tests using the capture files supplied by the reporter s .",1.0,['security']
321,321,354,Guy Harris,{},CVE-2017-13000,CWE-125,BIGVUL,"02/21/2017, 21:40:19","{'pcap', 'out', 'c'}","{'print-802_15_4.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified'}, 'tests/802_15_4-data.out': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'added'}, 'tests/802_15_4-data.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}}",https://github.com/the-tcpdump-group/tcpdump/commit/a7e5f58f402e6919ec444a57946bade7dfd6b184,{'C/C++'},,positive,"CVE-2017-13000/IEEE 802.15.4: Fix bug introduced by previous fix.

We've already advanced the pointer past the PAN ID, if present; it now
points to the address, so don't add 2 to it.

This fixes a buffer over-read discovered by Forcepoint's security
researchers Otto Airamo & Antti Levomäki.

Add a test using the capture file supplied by the reporter(s).",{'9be4e0b5938b705e7e36cfcb110a740c6ff0cb97'},https://github.com/the-tcpdump-group/tcpdump,7.5,a7e5f58f402e6919ec444a57946bade7dfd6b184,The IEEE 802.15.4 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_15_4.c:ieee802_15_4_if_print().,,yes,,,,,"802.15.4 Fix bug introduced by previous fix.
We ve already advanced the pointer past the PAN ID if present it now points to the address so don t add 2 to it.
This fixes a buffer over read discovered by Forcepoint s security researchers Otto Airamo Antti Levomäki.
Add a test using the capture file supplied by the reporter s .",1.0,['security']
322,322,355,Guy Harris,{},CVE-2017-12987,CWE-125,BIGVUL,"02/06/2017, 19:24:42","{'pcap', 'out', 'c'}","{'print-802_11.c': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/ieee802.11_tim_ie_oobr.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/ieee802.11_tim_ie_oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/99798bd9a41bd3d03fdc1e949810a38967f20ed3,{'C/C++'},,positive,"CVE-2017-12987/IEEE 802.11: Fix processing of TIM IE.

The arguments to memcpy() were completely wrong.

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by Brian 'geeknik' Carpenter.",{'d17507ffa3e9742199b02a66aa940e79ababfa30'},https://github.com/the-tcpdump-group/tcpdump,7.5,99798bd9a41bd3d03fdc1e949810a38967f20ed3,The IEEE 802.11 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_11.c:parse_elements().,,yes,,,,,"802.11 Fix processing of TIM IE.
The arguments to memcpy were completely wrong.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by Brian geeknik Carpenter.",0.0,
323,323,356,Guy Harris,{},CVE-2017-12899,CWE-125,BIGVUL,"02/03/2017, 23:52:24","{'pcap', 'out', 'c'}","{'print-decnet.c': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/decnet-oobr.out': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'added'}, 'tests/decnet-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/c6e0531b5def26ecf912e8de6ade86cbdaed3751,{'C/C++'},,positive,"CVE-2017-12899/DECnet: Fix bounds checking.

If we're skipping over padding before the *real* flags, check whether
the real flags are in the captured data before fetching it.  This fixes
a buffer over-read discovered by Kamil Frankowicz.

Note one place where we don't need to do bounds checking as it's already
been done.

Add a test using the capture file supplied by the reporter(s).",{'19d25dd8781620cd41bf178a5e2e27fc1cf242d0'},https://github.com/the-tcpdump-group/tcpdump,7.5,c6e0531b5def26ecf912e8de6ade86cbdaed3751,The DECnet parser in tcpdump before 4.9.2 has a buffer over-read in print-decnet.c:decnet_print().,,yes,,,,,"Fix bounds checking.
If we re skipping over padding before the real flags check whether the real flags are in the captured data before fetching it.
This fixes a buffer over read discovered by Kamil Frankowicz.
Note one place where we don t need to do bounds checking as it s already been done.
Add a test using the capture file supplied by the reporter s .",0.0,
324,324,357,Guy Harris,{},CVE-2017-12896,CWE-125,BIGVUL,"02/03/2017, 19:15:34","{'pcap', 'out', 'c'}","{'print-isakmp.c': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified'}, 'tests/TESTLIST': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified'}, 'tests/isakmp-rfc3948-oobr.out': {'additions': 67, 'deletions': 0, 'changes': 67, 'status': 'added'}, 'tests/isakmp-rfc3948-oobr.pcap': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'added'}}",https://github.com/the-tcpdump-group/tcpdump/commit/f76e7feb41a4327d2b0978449bbdafe98d4a3771,{'C/C++'},,positive,"CVE-2017-12896/ISAKMP: Do bounds checks in isakmp_rfc3948_print().

This fixes a buffer over-read discovered by Kamil Frankowicz.

Add a test using the capture file supplied by the reporter(s).",{'a1eefe986065846b6c69dbc09afd9fa1a02c4a3d'},https://github.com/the-tcpdump-group/tcpdump,7.5,f76e7feb41a4327d2b0978449bbdafe98d4a3771,The ISAKMP parser in tcpdump before 4.9.2 has a buffer over-read in print-isakmp.c:isakmp_rfc3948_print().,,yes,,,,,"Do bounds checks in isakmp rfc3948 print.
This fixes a buffer over read discovered by Kamil Frankowicz.
Add a test using the capture file supplied by the reporter s .",0.0,
364,364,397,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/9e651c514c58898c781639ec56f9ee4fa6a66b23,,,negative,ZMTP: Replace custom code with bittok2str().,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,ZMTP Replace custom code with .,0.0,
365,365,398,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/1c67c0188bc9cd5095154efde3011bb6ac1b3130,,,negative,"PTP: Use ND_LCHECK_U for checking invalid length

Moreover:
Rename a variable.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"PTP Use ND LCHECK U for checking invalid length.
Moreover.
Rename a variable.",1.0,['invalid']
366,366,399,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/74a4e7404c282b61ab5b051250822af45bfbb388,,,negative,"MSDP: Print "": "" before the protocol name

Like with most TCP encapsulated protocols.
Use nd_print_protocol().
No more "":"" after protocol name.
This change will print the protocol name even in truncation cases.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"MSDP Print before the protocol name.
Like with most TCP encapsulated protocols.

Use nd print protocol.

No more after protocol name.

This change will print the protocol name even in truncation cases.",0.0,
367,367,400,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/fc87be0585b18dd265ea98307cfebf2fd12c2cdc,,,negative,"Remove some storage class specifier 'register'

This is a follow-up to commit 5cea2703185c6af1616dc338c43c6cf67b0bec60.

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Remove some storage class specifier register.
This is a follow up to commit.
skip ci.",0.0,
368,368,401,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/6eb83caaa792a947dd5c3547bf15859091f1ec51,,,negative,DCCP: Replace custom code with tok2str(). [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"DCCP Replace custom code with tok2str.
skip ci.",0.0,
369,369,402,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/28e725ef4104f23db2cb806ca95ad2399b0b500b,,,negative,VQP: Do not print unknown error codes twice. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"VQP Do not print unknown error codes twice.
skip ci.",0.0,
370,370,403,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/76e6b9c658b25060e168aa72c4224824b63c97ac,,,negative,man: Update a reference as www.cifs.org is gone. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"man Update a reference as www.cifs.org is gone.
skip ci.",0.0,
371,371,404,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e003b287695f87283b58fa29aff14caf61a23dbd,,,negative,"Add an entry in CHANGES

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add an entry in CHANGES.
skip ci.",0.0,
372,372,405,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/490e000ac19326bd5119e7285a502c4b269b603c,,,negative,"MACsec: Add a comment about the previous change

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"MACsec Add a comment about the previous change.
skip ci.",0.0,
373,373,406,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/3658d8b94ee8ddb9b5821cb5960d91c18da96a6c,,,negative,"RPKI-Router: Refine length and bounds checks. [skip ci]

Fetch PDU version only once and use the PDU header structure for that.
Check data length before accessing it. Remove two redundant
ND_TCHECK_LEN() instances and move the associated comments below
respective GET_BE_U_4() instances.

List recent updates in CHANGES while at it.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"RPKI Router Refine length and bounds checks.
skip ci.
Fetch PDU version only once and use the PDU header structure for that.
Check data length before accessing it.
Remove two redundant ND TCHECK LEN instances and move the associated comments below respective GET BE U 4 instances.
List recent updates in CHANGES while at it.",0.0,
374,374,408,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/8acaf603f7d2dea4fbed984c7f775497826f03bf,,,negative,"MACsec: Put the function definition names at the beginning of the line

This change allows easier update by script.

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"MACsec Put the function definition names at the beginning of the line.
This change allows easier update by script.
skip ci.",0.0,
375,375,409,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/a29cd3e75e78bab784e906d6a4978d05510613c8,,,negative,"ICMP: Update the snapend for some nested IP packets

Update the snapend because extensions (MPLS, ...) may be present
after the IP packet. In this case the current (outer) packet's
snapend is not what ip_print() needs to decode an IP packet nested
in the middle of an ICMP payload.

This prevents that, in ip_print(), for the nested IP packet, the
remaining length < remaining caplen.

Moreover:
Reduce the scope of a variable.
Fix spaces",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"ICMP Update the snapend for some nested IP packets.
Update the snapend because extensions MPLS may be present after the IP packet.
In this case the current outer packet s snapend is not what ip print needs to decode an IP packet nested in the middle of an ICMP payload.
This prevents that in ip print for the nested IP packet the remaining length remaining caplen.
Moreover.
Reduce the scope of a variable.

Fix spaces.",0.0,
376,376,410,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/2e8a5d23a1b10594befd9091e179b02b487b9a96,,,negative,".gitignore: Add *.gcda *.gcno *.gcov (coverage files)

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,".gitignore Add .gcda .gcno .gcov coverage files.
skip ci.",0.0,
377,377,412,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/2f8ae8208337657b613177fdf6319f20a95ae530,,,negative,OSPF: Update more router properties bits. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"OSPF Update more router properties bits.
skip ci.",0.0,
378,378,413,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/c86534460a4e0cc2516b96f67aabd8b5ea4e9d16,,,negative,ospf: add support bit Nt RFC3101,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,ospf add support bit Nt RFC3101.,0.0,
379,379,414,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f39bd6851f0e4150377ce8a1f0136b8aad821ce8,,,negative,"OpenFlow 1.0: Get snapend right for nested frames. [skip ci]

The current and the nested packets can and do have different snapend,
implement and comment that in of10_packet_data_print() to fix an issue
discovered by Francois-Xavier Le Bail.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"OpenFlow 1.0 Get snapend right for nested frames.
skip ci.
The current and the nested packets can and do have different snapend.
implement and comment that in of10 packet data print to fix an issue.
discovered by Francois Xavier Le Bail.",0.0,
380,380,415,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/fd60dce54592920d0a3e0225ef5dc34c30c61e9f,,,negative,"IEEE 802.11: Simplify handle_action(). [skip ci]

Lose PRINT_MESHLINK_ACTION(), PRINT_MESHPEERING_ACTION() and
PRINT_MESHPATH_ACTION(), which were unused since commit f1c0553. Convert
the remaining 5 macros and hard-coded strings using tok2str() and
uint2tokary().",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"IEEE 802.11 Simplify handle action.
skip ci.
Lose PRINT MESHLINK ACTION PRINT MESHPEERING ACTION and.
PRINT MESHPATH ACTION which were unused since commit f1c0553.
Convert.
the remaining 5 macros and hard coded strings using tok2str and.
.",0.0,
381,381,418,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/3e9011fda0d9b36f699ebeb6ce91e6094c516236,,,negative,"SCTP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Report invalid packets as invalid.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"SCTP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Report invalid packets as invalid.",1.0,"['invalid', 'invalid']"
382,382,419,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/19bb7716c0928de1d0145e14b7e865d1d72f6608,,,negative,Add missing and regroup existing entries in CHANGES. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add missing and regroup existing entries in CHANGES.
skip ci.",0.0,
383,383,420,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d4fe5e32fdd85c6a4f623c05f40795f5fb7b8f07,,,negative,"TCP: Add a test with data in the RST segment, truncated example",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,TCP Add a test with data in the RST segment truncated example.,0.0,
384,384,421,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/9d449a4c46ea010e037a927f4af1f12870ebae20,,,negative,"NTP: Modernize packet parsing style. [skip ci]

Enable ND_LONGJMP_FROM_TCHECK. Remove a few redundant ND_TCHECK()
instances. Move one ND_TCHECK_4() to where it belongs. Have nd_printjn()
guard the snapshot end.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"NTP Modernize packet parsing style.
skip ci.
Enable ND LONGJMP FROM TCHECK.
Remove a few redundant ND TCHECK.
instances.
Move one ND TCHECK 4 to where it belongs.
Have nd printjn.
guard the snapshot end.",1.0,['guard']
385,385,422,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/383670e8f3f5b51d1017d8c1a678aa7eaf1f2b4d,,,negative,TCP: Add a test with data in the RST segment,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,TCP Add a test with data in the RST segment.,0.0,
386,386,423,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/cfa9ab5f80dd9a1024e1a765bc0d24c57652b6bc,,,negative,Try the new ND_LCHECK*() macros. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Try the new ND LCHECK macros.
skip ci.",0.0,
387,387,424,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/0a5824b49bedcc218b58684a7413242377c88ae0,,,negative,"TCP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Report invalid packets as invalid. Remove
most ND_TCHECK*() instances as they were redundant. Update a custom
snapend guard to use nd_trunc_longjmp(). Reduce arity of
print_tcp_fastopen_option(). Use ND_TTEST_LEN() in
tcp_verify_signature() and nd_printn() in print_tcp_rst_data(). For
NFS_PORT remove ND_TTEST_4() from the test condition as it is not a
valid factor, there is the subsequent GET_BE_U_4() to check bounds.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"TCP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Report invalid packets as invalid.
Remove.
most ND TCHECK instances as they were redundant.
Update a custom.
snapend guard to use nd trunc longjmp.
Reduce arity of.
print tcp fastopen option.
Use ND TTEST LEN in.
tcp verify signature and nd printn in print tcp rst data.
For.
NFS PORT remove ND TTEST 4 from the test condition as it is not a.
valid factor there is the subsequent GET BE U 4 to check bounds.",1.0,"['invalid', 'invalid', 'guard', 'verify', 'valid']"
388,388,425,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/3ebae8948826d18e00e7e25a5c32a6ecda38e96a,,,negative,"MPTCP: Put GET_U_1() outside of macros.

This way it is much easier to proof-read the bounds checks coverage
even without the comments. Fixup some whitespace while at it.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"MPTCP Put GET U 1 outside of macros.
This way it is much easier to proof read the bounds checks coverage.
even without the comments.
Fixup some whitespace while at it.",0.0,
389,389,426,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f72772154caa9c3851f91954c2a43dc2b653f637,,,negative,"NetFlow: Use tcp_flag_values[] for TCP flags.

This way there is less code duplication and more consistency.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"NetFlow Use tcp flag values for TCP flags.
This way there is less code duplication and more consistency.",0.0,
390,390,427,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/5eb88b81d216a0af540eea98e84e891709e6abc5,,,negative,OLSR: Fix a goto before ND_PRINT,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,OLSR Fix a goto before ND PRINT.,0.0,
391,391,428,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/73c5d1e2926b8128a8dc9000a44f36a772756dc3,,,negative,"Fix a typo in ND_LCHECK_ZU definition

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Fix a typo in ND LCHECK ZU definition.
skip ci.",0.0,
392,392,429,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/014b308d0851ef08c9fe3f1da5576eaae64f3e17,,,negative,"Add ND_LCHECKMSG_U, ND_LCHECK_U, ND_LCHECKMSG_ZU and ND_LCHECK_ZU macros

They check length < minimum for invalid packet with or without a custom
message, format %u or %zu.

%zu (ND_LCHECKMSG_ZU and ND_LCHECK_ZU) is useful when minimum is a
sizeof(...).

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add ND LCHECKMSG U ND LCHECK U ND LCHECKMSG ZU and ND LCHECK ZU macros.
They check length minimum for invalid packet with or without a custom message format u or zu.
zu ND LCHECKMSG ZU and ND LCHECK ZU is useful when minimum is a sizeof.
skip ci.",1.0,['invalid']
393,393,430,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e6a85f50f5776d60699edace5190cf8240708c55,,,negative,DCCP: Replace some magic numbers,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,DCCP Replace some magic numbers.,0.0,
394,394,431,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/185488763cb92e534112dc26d9f449d5684bc769,,,negative,"AODV: Modernize packet parsing style.

Make all ND_TCHECK_SIZE() instances redundant and remove them. Always
print a reason when reporting a packet as invalid. Undo the changes from
commit f875106 to remove support for draft-perkins-aodv6-01, which had
expired in 2001. Use tok2str() to print the message type. Don't print an
additional ""v6"" for RREQ, as the address family is apparent from the UDP
header. Update a test.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"AODV Modernize packet parsing style.
Make all ND TCHECK SIZE instances redundant and remove them.
Always.
print a reason when reporting a packet as invalid.
Undo the changes from.
commit f875106 to remove support for draft perkins aodv6 01 which had.
expired in 2001.
Use tok2str to print the message type.
Don t print an.
additional v6 for RREQ as the address family is apparent from the UDP.
header.
Update a test.",1.0,['invalid']
395,395,432,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/b0910795a986a3bf5481f978337b0a78e160c144,,,negative,OLSR: Print the protocol name even if the packet is invalid,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,OLSR Print the protocol name even if the packet is invalid.,1.0,['invalid']
396,396,434,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/4352d308780026c49142ff80a672de68de0238de,,,negative,"RIP: Make a couple trivial protocol updates.

Synchronize with the RIP Commands IANA registry and treat version 0 as
invalid.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"RIP Make a couple trivial protocol updates.
Synchronize with the RIP Commands IANA registry and treat version 0 as.
invalid.",1.0,['invalid']
397,397,435,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/df1d546b03a51700550abf84e51af232ac17804f,,,negative,"OpenFlow 1.0: Fix indentation of PORT_MOD.

Also lose an unused constant while at it.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"OpenFlow 1.0 Fix indentation of PORT MOD.
Also lose an unused constant while at it.",0.0,
398,398,436,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/2e6a03c3f1c64ee0455b191cc58b78ea984aa1cb,,,negative,"Refine print_unknown_data().

Use __func__ and ND_MIN() for simplicity.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Refine print unknown data.
Use func and ND MIN for simplicity.",0.0,
399,399,438,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/6e33955f9ee75103e0dae40787c81d88a709f2bd,,,negative,"AppleTalk: Declutter appletalk.h.

Lose unused definitions and structures. Move most other contents into
print-atalk.c and rearrange for clarity. Lose a dead #ifdef block.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"AppleTalk Declutter appletalk.h.
Lose unused definitions and structures.
Move most other contents into.
print atalk.c and rearrange for clarity.
Lose a dead ifdef block.",0.0,
400,400,439,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d9740d6f4c1b81bd431c1d195ae9d4623fe535ef,,,negative,"UDP: Modernize packet parsing style.

Remove all ND_TCHECK_*() instances as redundant. Remove or convert a few
improvised snapshot end guards. Reduce arity of rtcp_print(). Test the
AppleTalk LAP type after testing the UDP port numbers, not before.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"UDP Modernize packet parsing style.
Remove all ND TCHECK instances as redundant.
Remove or convert a few.
improvised snapshot end guards.
Reduce arity of rtcp print.
Test the.
AppleTalk LAP type after testing the UDP port numbers not before.",0.0,
401,401,440,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/5599c4f2cc70a0b9f70528caea5ab912ac51084c,,,negative,"UDP: Clean up address and port printing.

udp_print() always knows whether UDP port numbers are available or not,
so split udpipaddr_print() into two functions to lose some arity, much
branching and all type casting. In the new functions test for IPv4
explicitly. In udp_print() convert duplicate code into a conditional
call to udpipaddr_print().",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"UDP Clean up address and port printing.
udp print always knows whether UDP port numbers are available or not.
so split udpipaddr print into two functions to lose some arity much.
branching and all type casting.
In the new functions test for IPv4.
explicitly.
In udp print convert duplicate code into a conditional.
call to udpipaddr print .",0.0,
402,402,441,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e6cf3b7fdbac28fde2b588692866cfdfb9a21818,,,negative,"EGP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Report invalid packets as invalid.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"EGP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Report invalid packets as invalid.",1.0,"['invalid', 'invalid']"
403,403,442,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/b05797e0dfa2a8369432b15a5ac4f8cc89c5fdb9,,,negative,Mention the recent EIGRP changes.,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Mention the recent EIGRP changes.,0.0,
404,404,443,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/098f9ecf05a2a43921689ca2b95a06ed6326515f,,,negative,"SLIP: Remove 4 ND_TCHECK_SIZE() calls

IP_HL() and TH_OFF() macros use GET_U_1().",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"SLIP Remove 4 ND TCHECK SIZE calls.
IP HL and TH OFF macros use GET U 1 .",0.0,
405,405,444,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/2c04c7750c1cc633f0cac5a500f0700baae57ef7,,,negative,"travis_terminate *causes* the problem on macOS; use it only on Linux.

More fun in the new world.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"travis terminate causes the problem on macOS use it only on Linux.
More fun in the new world.",0.0,
406,406,445,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d9a787e4995b4b5101e410ed1e93367907ab9fe2,,,negative,"EIGRP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Report invalid packets as invalid. Remove
two redundant ND_TCHECK_*() instances. When giving up on a packet for
whatever reason, test that the rest of it is within the buffer. Do the
header length check before accessing any header data and refine the TLV
length checks. Update a test.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"EIGRP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Report invalid packets as invalid.
Remove.
two redundant ND TCHECK instances.
When giving up on a packet for.
whatever reason test that the rest of it is within the buffer.
Do the.
header length check before accessing any header data and refine the TLV.
length checks.
Update a test.",1.0,"['invalid', 'invalid']"
407,407,446,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/7d7fea337bbce1ec079baa786f8d9f88d960c2c1,,,negative,"EIGRP: Get the packet header fields right.

In the spec the packet diagram instead of a 32-bit AS number shows a
16-bit virtual router ID followed by a 16-bit AS number, implement
that. Also add two missing flag values and use bittok2str() to print
the bitmask. Lose a stale comment and update some tests.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"EIGRP Get the packet header fields right.
In the spec the packet diagram instead of a 32 bit AS number shows a.
16 bit virtual router ID followed by a 16 bit AS number implement.
that.
Also add two missing flag values and use to print.
the bitmask.
Lose a stale comment and update some tests.",0.0,
408,408,447,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/05a6df98c5ac4ab81796d0ea5ef1bedd15d4dfd0,,,negative,"Travis CI: Fix a typo in a comment

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Travis CI Fix a typo in a comment.
skip ci.",0.0,
409,409,448,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f867bc9f40b4ce00e08fa6377bbb7d74719b9313,,,negative,"Remove the no more used nd_print() function

The function to use now is: nd_printjnp().
(Added by commit 635e3cc92b72ca048a6b5b89b883980e4e1b4bdc)",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Remove the no more used nd print function.
The function to use now is nd printjnp.

Added by commit.",0.0,
410,410,449,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/a679644b4637a2a93d9f124eb3287bdec6879012,,,negative,"Travis: use travis_terminate instead of exit in script:.

That was the Travis maintainer's recommendation to fix the hang we were
seeing on non-x86-64 Linux coverity_scan builds.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Travis use travis terminate instead of exit in script.
That was the Travis maintainer s recommendation to fix the hang we were.
seeing on non x86 64 Linux coverity scan builds.",0.0,
411,411,451,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/3ed92cd021a619c8dbff377edd8eb66b3ec285c9,,,negative,"Replace the (void)nd_printn(..., NULL) calls by nd_printjn() calls

Moreover:
Remove a now useless comment.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Replace the void nd printn NULL calls by nd printjn calls.
Moreover.
Remove a now useless comment.",0.0,
412,412,452,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/90ddb17d272bbe39dccc08f7b109077b73996fee,,,negative,"Add a nd_printjn() function

It prints a counted filename (or other ASCII string), part of
the packet buffer, filtering out non-printable characters.
Stop if truncated (via GET_U_1/longjmp) or after n bytes,
whichever is first.
The suffix comes from: j:longJmp, n:after N bytes.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add a nd printjn function.
It prints a counted filename or other ASCII string part of.
the packet buffer filtering out non printable characters.

Stop if truncated via GET U 1 longjmp or after n bytes.
whichever is first.

The suffix comes from j longJmp n after N bytes.",0.0,
413,413,453,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/234546a8e7cc63a4ba368d222d0846a1e7690b85,,,negative,Travis CI: Add a folded 'ldd tcpdump' (Linux builds),,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Travis CI Add a folded ldd tcpdump Linux builds.,0.0,
414,414,454,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/5daec916f70ee38f84040c422bf694b68532c2de,,,negative,"Travis CI: Add 'echo '$ cmake [...]' to the folded cmake

With this change the output can be unfolded.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Travis CI Add echo cmake to the folded cmake.
With this change the output can be unfolded.",0.0,
415,415,455,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/7437866107d7643c227ada10f21512d6697d13bb,,,negative,Travis/Coverity: put some debugging printouts into coverity-scan-build.,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Travis Coverity put some debugging printouts into coverity scan build.,0.0,
416,416,456,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/ff64b28731e4a9258395f50c5955b4da42edce3f,,,negative,"Travis: we should no longer need to set PKG_CONFIG_PATH for CMake.

FindPCAP.cmake should now pick up directories from CMAKE_PREFIX_PATH and
add the corresponding pkgconfig directories to PKG_CONFIG_PATH before
running pkg-config, so we shouldnt need to set PKG_CONFIG_PATH
ourselves.

We still need to do it when running the autoonf script, as there's no
equivalent for CMAKE_PREFIX_PATH in autoconf.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Travis we should no longer need to set PKG CONFIG PATH for CMake.
FindPCAP.cmake should now pick up directories from CMAKE PREFIX PATH and add the corresponding pkgconfig directories to PKG CONFIG PATH before running pkg config so we shouldnt need to set PKG CONFIG PATH ourselves.
We still need to do it when running the autoonf script as there s no.
equivalent for CMAKE PREFIX PATH in autoconf.",0.0,
417,417,457,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/8ceef287ad9e3157c9ab390a102433e9203c2d90,,,negative,"CMake: add stuff from CMAKE_PREFIX_PATH to PKG_CONFIG_PATH.

Pull in some code from CMake 3.12.4's FindPkgConfig.cmake to arrange
that, when running pkg-config, directories from CMAKE_PREFIX_PATH are in
the PKG_CONFIG_PATH environment variable.

We do this because we want to make sure that, if CMAKE_PREFIX_PATH is
set, and it points to a directory that contains a libpcap that has a .pc
file installed, we get that .pc file, but we don't yet want to require a
minimum of CMake 3.1 or later (CMake 3.1 and later do that
automatically) because there might be some long-term support OS version
that comes with an older version of CMake.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"CMake add stuff from CMAKE PREFIX PATH to PKG CONFIG PATH.
Pull in some code from CMake 3.12.4 s FindPkgConfig.cmake to arrange that when running pkg config directories from CMAKE PREFIX PATH are in the PKG CONFIG PATH environment variable.
We do this because we want to make sure that if CMAKE PREFIX PATH is.
set and it points to a directory that contains a libpcap that has a .pc.
file installed we get that .pc file but we don t yet want to require a.
minimum of CMake 3.1 or later CMake 3.1 and later do that.
automatically because there might be some long term support OS version.
that comes with an older version of CMake.",0.0,
418,418,459,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/82ba12ec649cf6b4ed59f39aeffee695d08a405b,,,negative,"Point the configure script at the installed pkg-config directory in /tmp.

Getting the configure script to look for the temporarily-installed
libpcap.pc file requires that we set PKG_CONFIG_PATH to
/tmp/lib/pkgconfig.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Point the configure script at the installed pkg config directory in tmp.
Getting the configure script to look for the temporarily installed.
libpcap.pc file requires that we set PKG CONFIG PATH to.
tmp lib pkgconfig.",0.0,
419,419,460,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d3224b27758d27a1c45f12054d5f860f4922122d,,,negative,"Point cmake at the installed pkg-config directory in /tmp.

Getting CMake to look for the temporarily-installed libpcap.pc file
requires that we set PKG_CONFIG_PATH to /tmp/lib/pkgconfig; otherwise,
the configuration process won't find it, and hilarity ensues.

Try turning the 'BUILD_LIBPCAP=yes CMAKE=yes' builds on, to see if that
fixes them.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Point cmake at the installed pkg config directory in tmp.
Getting CMake to look for the temporarily installed libpcap.pc file requires that we set PKG CONFIG PATH to tmp lib pkgconfig otherwise the configuration process won t find it and hilarity ensues.
Try turning the BUILD LIBPCAP yes CMAKE yes builds on to see if that.
fixes them.",0.0,
420,420,461,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/09c59278e0f955b3699b01ae32a2a3a60629e70a,,,negative,"Denis has made changes to the 5.0.0 entry in CHANGES as well.

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Denis has made changes to the 5.0.0 entry in CHANGES as well.
skip ci.",0.0,
421,421,462,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/b2a071ea9232335558939d6b3ae3b20be745f3ea,,,negative,"Update a comment.

Apple's released ARM-based Macs, so it's no longer just a possibility.
(Travis doesn't have any, so we don't add an arm64 build for macOS.)

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Update a comment.
Apple s released ARM based Macs so it s no longer just a possibility.
Travis doesn t have any so we don t add an arm64 build for macOS.
skip ci.",0.0,
422,422,463,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/c518a9aab149da1a6b83c0cbeddaff5265d05dcb,,,negative,ICMP: Fix a typo in a comment.,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,ICMP Fix a typo in a comment.,0.0,
423,423,464,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/6d3e70074cb66547d0ff3984492fcd181a22cf90,,,negative,"L2TP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Report invalid packets as invalid with a
reason, not truncated.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"L2TP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Report invalid packets as invalid with a.
reason not truncated.",1.0,"['invalid', 'invalid']"
424,424,465,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/93cb1f2257ae3671b6750647273d1d359e6075dd,,,negative,TESTrun: Show tcpdump version used for tests,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,TESTrun Show tcpdump version used for tests.,0.0,
425,425,466,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/5081474eb5f992f68fa2188761898a75960a4519,,,negative,"MPLS: rename the ""exp"" field to ""tc""

RFC5462 (https://tools.ietf.org/html/rfc5462) renamed the
MPLS ""EXP"" field to ""Traffic Class"" in 2009.  Use ""tc"" as an
abbreviation for this field name.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"MPLS rename the exp field to tc.
RFC5462 URL renamed the.
MPLS EXP field to Traffic Class in 2009.
Use tc as an.
abbreviation for this field name.",0.0,
426,426,467,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f853e73acf39658125ce42861e49ce4a181611d3,,,negative,"Replace ND_TCHECK_/memcpy() pairs with GET_CPY_BYTES().

For BGP, this eliminates some cases where routines return -1 on
truncation; clean up after that.

This also means that some memcpy()s get replaced by UNALIGNED_MEMCPY(),
which may fix some issues on processors that don't support unaligned
accesses.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Replace ND TCHECK memcpy pairs with GET CPY BYTES.
For BGP this eliminates some cases where routines return 1 on truncation clean up after that.
This also means that some memcpy s get replaced by UNALIGNED MEMCPY.
which may fix some issues on processors that don t support unaligned.
accesses.",0.0,
427,427,469,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/ab150a17ea49719140405d103192c1c3b68b01cd,,,negative,"Add tests for more code coverage in timestamp printing functions

Use a TCP 3-Way Handshake test, nano precision.

Display micro outputs and nano outputs (with -q).",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add tests for more code coverage in timestamp printing functions.
Use a TCP 3 Way Handshake test nano precision.
Display micro outputs and nano outputs with q .",0.0,
428,428,470,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/dd5c8e67761d96727d45d72daf3b2f2f93bd075c,,,negative,"Remove '-t' option for MACsec tests

like all the other tests.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Remove t option for MACsec tests.
like all the other tests.",0.0,
429,429,471,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/0f0d07bc7405db4437309028b37e76a76d083d1f,,,negative,Add an entry for the trunk changes so far that are not in 4.99.,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Add an entry for the trunk changes so far that are not in 4.99.,0.0,
430,430,472,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/360e17e1243c1961f92f99244b11c13a33f9ea9e,,,negative,Add an entry for the 4.99 branch changes so far.,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Add an entry for the 4.99 branch changes so far.,0.0,
431,431,473,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/ac88cb08eb2ea344e0bb5524355caa9093ee89c4,,,negative,"Fix a warning on Linux Alpine

The warning was like:
In file included from ./netdissect-stdinc.h:42,
                 from ./fptype.c:36:
./ftmacros.h:116: warning: ""_BSD_SOURCE"" redefined
  116 |   #define _BSD_SOURCE
      |
In file included from /usr/include/stdio.h:8,
                 from /usr/include/fortify/stdio.h:22,
                 from ./fptype.c:34:
/usr/include/features.h:15: note: this is the location of the previous
  definition
   15 | #define _BSD_SOURCE 1
      |",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Fix a warning on Linux Alpine.
The warning was like.
In file included from.
netdissect stdinc.h 42.
from.
fptype.c 36.

ftmacros.h 116 warning BSD SOURCE redefined.
116 | define BSD SOURCE.
|.
In file included from usr include stdio.h 8.
from usr include fortify stdio.h 22.
from.
fptype.c 34.
usr include features.h 15 note this is the location of the previous.
definition.
15 | define BSD SOURCE 1.
|.",0.0,
432,432,474,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/88d49d2b0617b6d7c79e9df1de18b3f9a50ae3c4,,,negative,Travis CI: Remove capture on architecture arm64 (not always working),,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Travis CI Remove capture on architecture arm64 not always working.,0.0,
433,433,475,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/b1e86c1f0346baa24a8c72ce3bf8b4e3fcb5e36e,,,negative,"Makefile.in: Run 'autoreconf -f' when buiding release

Same as for libpcap.

It's needed to update configure (PACKAGE_VERSION, PACKAGE_STRING, etc.)
when VERSION is updated.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Makefile.in Run autoreconf f when buiding release.
Same as for libpcap.
It s needed to update configure PACKAGE VERSION PACKAGE STRING etc.

when VERSION is updated.",0.0,
434,434,476,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/a689cf870986a04cf7a8b4fc74cab10e808f3c93,,,negative,"Fix a build problem on the Linux Travis CI buildbot.

The buildbot is failing in autotools builds - but not in CMake builds;
go figure.  Perhaps they're passing different flags to the C compiler,
and, in the autotools builds, the flag causes the compiler to define
whatever it takes to get /usr/include/features.h to define
_DEFAULT_SOURCE as 1, so that our defining it as nothing collides with
that.

(Dear UN*X community: please come up with a platform-independent,
reliable way of saying ""expose every single API you have, namespace
pollution be damned.  kthxbye.)",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Fix a build problem on the Linux Travis CI buildbot.
The buildbot is failing in autotools builds but not in CMake builds go figure.
Perhaps they re passing different flags to the C compiler and in the autotools builds the flag causes the compiler to define whatever it takes to get usr include features.h to define DEFAULT SOURCE as 1 so that our defining it as nothing collides with that.
Dear UN X community please come up with a platform independent reliable way of saying expose every single API you have namespace pollution be damned.
kthxbye.",0.0,
435,435,477,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/eebc98d735bc573c297578674efc470e7fd29998,,,negative,"Add ftmacros.h, defining various feature test macros, and use it.

This attempts to ensure that we get all the APIs for the platform
declared, including the ones that, shock horror, ""pollute the
namespace"".

This fixes some compile failures with Sun C on Solaris 11.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add ftmacros.h defining various feature test macros and use it.
This attempts to ensure that we get all the APIs for the platform declared including the ones that shock horror pollute the namespace.
This fixes some compile failures with Sun C on Solaris 11.",0.0,
436,436,478,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/488e0a6db4b03b46eeffc5240bd3c67f1204496c,,,negative,"Use %zu when printing a sizeof.

We require a C implementation that supports %z, so we can use it; there
is no guarantee that a sizeof is a long, so don't use %l.

Squelches warnings found on Solaris 11 with GCC.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Use zu when printing a sizeof.
We require a C implementation that supports z so we can use it there is no guarantee that a sizeof is a long so don t use l.
Squelches warnings found on Solaris 11 with GCC.",0.0,
437,437,479,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/399c5ebdd0432e413ab146bd65ae01f565db1edc,,,negative,"Squelch some signed vs. unsigned warnings.

They showed up on 64-bit OpenBSD 6.6.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Squelch some signed vs.
unsigned warnings.
They showed up on 64 bit OpenBSD 6.6.",0.0,
438,438,480,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d1be880176880ff8cc20ee8647e93057ec835416,,,negative,"OLSR: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Remove a few redundant ND_TCHECK_*()
instances. Report invalid packets as invalid with a reason, not
truncated. Make helper functions void and lose associated checks.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"OLSR Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Remove a few redundant ND TCHECK.
instances.
Report invalid packets as invalid with a reason not.
truncated.
Make helper functions void and lose associated checks.",1.0,"['invalid', 'invalid']"
439,439,481,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/366234729d96813f2aa971278e73d4492bd9bc3e,,,negative,EGP: Replace custom code with tok2str().,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,EGP Replace custom code with tok2str .,0.0,
440,440,482,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/bff53faf16b80f109f1b20f9dc9c09c40e8026a5,,,negative,"PGM: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Remove a few redundant ND_TCHECK_*()
instances. Report invalid packets as invalid, not truncated. Update a
custom snapshot end guard to call nd_trunc_longjmp().",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"PGM Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Remove a few redundant ND TCHECK.
instances.
Report invalid packets as invalid not truncated.
Update a.
custom snapshot end guard to call nd trunc longjmp .",1.0,"['invalid', 'invalid', 'guard']"
441,441,483,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d53857366f55bf9996a1a25af2fcfa870f215b90,,,negative,"RSVP: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Remove a few redundant ND_TCHECK_*()
instances. Report invalid packets as invalid with a reason.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"RSVP Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Remove a few redundant ND TCHECK.
instances.
Report invalid packets as invalid with a reason.",1.0,"['invalid', 'invalid']"
442,442,484,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/b0d1c27b08e84ebf46a78fcdab1e7fbb4ff73127,,,negative,"Travis CI: Use Linux Focal (Ubuntu 20.04)

gcc 9.3.0 (on Bionic was 7.5.0)",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Travis CI Use Linux Focal Ubuntu 20.04.
gcc 9.3.0 on Bionic was 7.5.0.",0.0,
443,443,485,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/20cd3ff9a7c9089a2dd98698bdc7c91e389b5303,,,negative,fixed date in CHANGES file,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,fixed date in CHANGES file.,0.0,
444,444,486,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/3edb190dc40e6d3ed09126eed1bb62d0970306d4,,,negative,bumped version on master,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,bumped version on master.,0.0,
445,445,487,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/8d9da12773fde8c168bc9e0b899a75bd92849124,,,negative,CHANGES: Add the date,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,CHANGES Add the date.,0.0,
446,446,488,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f736ac0bc2009892b73e06d63eacbda6849deeee,,,negative,"Update my email address.

[skip ci]",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Update my email address.
skip ci.",0.0,
447,447,489,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/aab300c0a342430c57cbbea9b16f3997c3536497,,,negative,"List more contributors in CREDITS. [ckip ci]

Add new people that had authored at least one commit in 2013-2020, that
is, in the 1dcb552..4b5b833 git revision range.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"List more contributors in CREDITS.
ckip ci.
Add new people that had authored at least one commit in 2013 2020 that.
is in the 1dcb5524b5b833 git revision range.",0.0,
448,448,490,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/4b5b8330f6d2a5f6b04fa8ead561dc44eb58695d,,,negative,Fixup existing records in CREDITS. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Fixup existing records in CREDITS.
skip ci.",0.0,
449,449,491,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/935d16090681e510c8f00eec88cd73708fed7dd9,,,negative,Fill the 4.99.0 section in CHANGES. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Fill the 4.99.0 section in CHANGES.
skip ci.",0.0,
450,450,492,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/8a70422020e4d6c876ff9fdf739f8a6d7b0e1f5b,,,negative,Add a missing space to doc/README.Win32.md. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Add a missing space to doc README.Win32.md.
skip ci.",0.0,
451,451,493,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/01c04c916b3dd9f9c17f397063c67930b32e7ce4,,,negative,Lose a leftover comment [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Lose a leftover comment skip ci.,0.0,
452,452,494,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/d81de65c0c9130f26e9ed4db263af01e9c679d93,,,negative,"Update VERSION to 4.99.0-PRE-GIT; Run 'autoreconf -f'

Reminder:
Run 'autoreconf -f' is needed to update configure when VERSION is updated.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Update VERSION to 4.99.0 PRE GIT Run autoreconf f.
Reminder.
Run autoreconf f is needed to update configure when VERSION is updated.",0.0,
453,453,495,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/2e86599b4c3fba6cc07e9d6ea47a9db79a1be20e,,,negative,"Lose the HTON and NTOH macros. [skip ci]

Out of the four macros two were never used, and the other two were used
only once. Use htonl() and htons() directly instead.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Lose the HTON and NTOH macros.
skip ci.
Out of the four macros two were never used and the other two were used.
only once.
Use htonl and htons directly instead.",0.0,
454,454,496,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/9dfff22ef28dbd30228b592e734856445772fe85,,,negative,CFM: Fix another typo in a comment. [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"CFM Fix another typo in a comment.
skip ci.",0.0,
455,455,497,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/dcaab5099ae95cfde76133c1b0570a5c72063116,,,negative,"List Linux properly and only once. [skip ci]

Whatever libc it is, the usual rules apply: if it does not work, report
the bug.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"List Linux properly and only once.
skip ci.
Whatever libc it is the usual rules apply if it does not work report.
the bug.",0.0,
456,456,498,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e966b9670ae8bed39c5038e7fb05350f4be93ab7,,,negative,"Update config.{guess,sub}, timestamps 2020-12-22

From repository git://git.savannah.gnu.org/config.git",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Update config.
guess sub timestamps 2020 12 22.
From repository URL.",0.0,
457,457,499,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/eab813b5f547e37984a94582a47bdc076ad32350,,,negative,"Refine some guidelines in CONTRIBUTING [skip ci]

Improve some language, spell both build systems and all three CI
systems, deduplicate some text, drop ND_TTEST_*(), introduce GET_*()
and explain the bounds checks in a bit more detail.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Refine some guidelines in CONTRIBUTING skip ci.
Improve some language spell both build systems and all three CI.
systems deduplicate some text drop ND TTEST introduce GET.
and explain the bounds checks in a bit more detail.",0.0,
458,458,500,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/38cbe6dacee0e31ed7c9e14acc9805b195c3c88d,,,negative,Copy the 4.9.3 section and start 4.99.0 in CHANGES [skip ci],,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Copy the 4.9.3 section and start 4.99.0 in CHANGES skip ci.,0.0,
459,459,501,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/1462b6133be4cbcb3ab814d65bcd16c30a3804a6,,,negative,"man: Note the -x/-X quirk for truncated packets [skip ci]

Accurate skipping of the link level header was working before the
conversion started, it will hopefully work after the conversion is
complete, but meanwhile be clear about what it is now.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"man Note the x X quirk for truncated packets skip ci.
Accurate skipping of the link level header was working before the.
conversion started it will hopefully work after the conversion is.
complete but meanwhile be clear about what it is now.",0.0,
460,460,502,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/f620cb78c2aa482033e5cd1ce1a7eba2d6ea9611,,,negative,"NSH: Modernize packet parsing style.

Enable ND_LONGJMP_FROM_TCHECK. Remove a redundant ND_TCHECK_LEN()
instance and make another one conditional. Report invalid packets as
invalid with a reason, not truncated.

Update the code from draft-ietf-sfc-nsh-01 to RFC 8300: remove the no
longer existent C-bit, add the TTL field, adjust the MD Type field
offset and size, apply correct mask to TLV length, redo TLV length in
bytes instead of 4-byte words and mind the padding.

Fetch and print one header at a time. Add and use two lookup tables for
MD Type and Next Protocol. Add a version number check. Add a length
check for MD Type 1. Update some error messages. Add a few encoding
diagrams for clarity. Lose a few variables and reduce scope of the
remaining variables. Update a few tests.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"NSH Modernize packet parsing style.
Enable ND LONGJMP FROM TCHECK.
Remove a redundant ND TCHECK LEN instance and make another one conditional.
Report invalid packets as invalid with a reason not truncated.
Update the code from draft ietf sfc nsh 01 to RFC 8300 remove the no longer existent C bit add the TTL field adjust the MD Type field offset and size apply correct mask to TLV length redo TLV length in bytes instead of 4 byte words and mind the padding.
Fetch and print one header at a time.
Add and use two lookup tables for.
MD Type and Next Protocol.
Add a version number check.
Add a length.
check for MD Type 1.
Update some error messages.
Add a few encoding.
diagrams for clarity.
Lose a few variables and reduce scope of the.
remaining variables.
Update a few tests.",1.0,"['invalid', 'invalid']"
461,461,503,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e6a241455488eaa55659d10928bccead67ef2fd4,,,negative,Cirrus CI: Use FreeBSD 12.2,,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,Cirrus CI Use FreeBSD 12.2.,0.0,
462,462,504,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/192db0a116f5ee419fddbdadf5822a7a3179d6c3,,,negative,"SMB: Disable the printer by default

Like in 4.9.3 version.
This printer needs rework.

Move the tests with SMB packets in tests/smb.tests.
Add outputs files for the disabled case.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"SMB Disable the printer by default.
Like in 4.9.3 version.
This printer needs rework.
Move the tests with SMB packets in tests smb.tests.

Add outputs files for the disabled case.",0.0,
463,463,505,,,,,,,,,https://github.com/the-tcpdump-group/tcpdump/commit/e1c739a83d2bb82f408a96f5b15cb2dad3dee919,,,negative,"Juniper: initialize some structures

This change fixes the GH issue #801.

Same way as commit 88135db7c785661e7a8b0c02d3ef0bfd00cce6aa.",,https://github.com/the-tcpdump-group/tcpdump,,,,,,,,,,"Juniper initialize some structures.
This change fixes the GH issue 801.
Same way as commit 88135db7c785661e7a8b0c02d3ef0bfd00cce6aa.",1.0,['initialize']
464,464,506,,,,,,,,,https://github.com/krb5/krb5/commit/c374ab40dd059a5938ffc0440d87457ac5da3a46,,,negative,"Support host-based GSS initiator names

When checking if we can get initial credentials in the GSS krb5 mech,
use krb5_kt_have_match() to support fallback iteration.  When scanning
the ccache or getting initial credentials, rewrite cred->name->princ
to the canonical client name.  When a name check is necessary (such as
when the caller specifies both a name and ccache), use a new internal
API k5_sname_compare() to support fallback iteration.  Add fallback
iteration to krb5_cc_cache_match() to allow host-based names to be
canonicalized against the cache collection.

Create and store the matching principal for acceptor names in
acquire_accept_cred() so that it isn't affected by changes in
cred->name->princ during acquire_init_cred().

ticket: 8978 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Support host based GSS initiator names.
When checking if we can get initial credentials in the GSS krb5 mech use krb5 kt have match to support fallback iteration.
When scanning the ccache or getting initial credentials rewrite cred name princ to the canonical client name.
When a name check is necessary such as when the caller specifies both a name and ccache use a new internal API k5 sname compare to support fallback iteration.
Add fallback iteration to krb5 cc cache match to allow host based names to be canonicalized against the cache collection.
Create and store the matching principal for acceptor names in acquire accept cred so that it isn t affected by changes in cred name princ during acquire init cred.
ticket 8978 new.",0.0,
465,465,507,,,,,,,,,https://github.com/krb5/krb5/commit/225fffe4e912772acea3a01d45bafb60bfb80948,,,negative,"Add hostname canonicalization helper to k5test.py

To facilitate fallback tests, add a canonicalize_hostname() function
to k5test.py which works similarly to krb5_expand_hostname().  Use it
in t_gssapi.py for the recently-added acceptor name fallback test.",,https://github.com/krb5/krb5,,,,,,,,,,"Add hostname canonicalization helper to k5test.py.
To facilitate fallback tests add a canonicalize hostname function.
to k5test.py which works similarly to krb5 expand hostname.
Use it.
in t gssapi.py for the recently added acceptor name fallback test.",0.0,
466,466,508,,,,,,,,,https://github.com/krb5/krb5/commit/fcdaede53ba4c828b6bec48e54621cf6ce0e145a,,,negative,"Clarify domain_realm documentation

The [domain_realm] section provides a mapping from hostnames to realm
names, but the individual mappings apply to domains (including
subdomains) or subdomains, not to hostnames.  Reported by Ulf Bremer.

ticket: 8981",,https://github.com/krb5/krb5,,,,,,,,,,"Clarify domain realm documentation.
The domain realm section provides a mapping from hostnames to realm names but the individual mappings apply to domains including subdomains or subdomains not to hostnames.
Reported by Ulf Bremer.
ticket 8981.",0.0,
467,467,509,,,,,,,,,https://github.com/krb5/krb5/commit/18ea3bd2fca55b789b7de9c663624bc11d348fa6,,,negative,"Add APIs for marshalling credentials

Faciliate KCM daemon implementations by providing functions to
deserialize and reserialize credentials in the FILE v4 format.

[ghudson@mit.edu: minor editorial changes]

ticket: 8980 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Add APIs for marshalling credentials.
Faciliate KCM daemon implementations by providing functions to deserialize and reserialize credentials in the FILE v4 format.
E mail minor editorial changes.
ticket 8980 new.",0.0,
468,468,510,,,,,,,,,https://github.com/krb5/krb5/commit/5f5e29c5fd7b4977b6df477240d48c2ec4b31a2a,,,negative,make regen,,https://github.com/krb5/krb5,,,,,,,,,,make regen.,0.0,
469,469,511,,,,,,,,,https://github.com/krb5/krb5/commit/1fe19309c755604fd65ae7072983627fab228731,,,negative,Update copyright years to 2021,,https://github.com/krb5/krb5,,,,,,,,,,Update copyright years to 2021.,0.0,
470,470,512,,,,,,,,,https://github.com/krb5/krb5/commit/92cc557796e72b49f2bd50f6b705dc3b8acf357e,,,negative,"Allow kprop over more types of NATs

Do not send an r-address in messages from kprop, so that kpropd will
not check it against the receiver address.  This change allows kprop
to work when a NAT changes the destination address.  (Commit
775e496aac2650343ec20826b1ba7f6306a12f3c allows kprop to work when a
NAT changes the source address.)  Reported by Jorj Bauer.

ticket: 8977 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Allow kprop over more types of NATs.
Do not send an r address in messages from kprop so that kpropd will not check it against the receiver address.
This change allows kprop to work when a NAT changes the destination address.
Commit allows kprop to work when a NAT changes the source address.
Reported by Jorj Bauer.
ticket 8977 new.",0.0,
471,471,513,,,,,,,,,https://github.com/krb5/krb5/commit/f7b3cb8bbe90817f7bfbc545f1e427c16f52a79c,,,negative,"Continue on KRB5_FCC_NOFILE in KCM cache iteration

Although Heimdal's KCM client only continues after KRB5_CC_END,
Heimdal's and macOS's KCM server returns KRB5_FCC_NOFILE if a cache
uuid no longer exists.  Check for both errors during iteration.  Also
set ret to 0 when continuing, in case the skipped uuid is the last one
in the list.

ticket: 8967 (new)
tags: pullup
target_version: 1.19",,https://github.com/krb5/krb5,,,,,,,,,,"Continue on KRB5 FCC NOFILE in KCM cache iteration.
Although Heimdal s KCM client only continues after KRB5 CC END Heimdal s and macOS s KCM server returns KRB5 FCC NOFILE if a cache uuid no longer exists.
Check for both errors during iteration.
Also set ret to 0 when continuing in case the skipped uuid is the last one in the list.
ticket 8967 new.
tags pullup.
target version 1.19.",0.0,
472,472,514,,,,,,,,,https://github.com/krb5/krb5/commit/7e0a2a7a3a76205ebd7192f06a99f23bad8dc5bd,,,negative,"Implement fallback for GSS acceptor names

Commit 3fcc365a6f049730b3f47168f7112c03997c5c0b added fallback support
to krb5_rd_req(), but acquiring acceptor creds for a host-based name
could still fail within check_keytab() in the krb5 mech.

Add an internal libkrb5 API k5_kt_have_match() to check for a matching
keytab entry with canonicalization, and use it in check_keytab().  Add
a library-internal function k5_sname_wildcard_host() to share logic
between rd_req and k5_kt_have_match().

ticket: 8971 (new)
tags: pullup
target_version: 1.19",,https://github.com/krb5/krb5,,,,,,,,,,"Implement fallback for GSS acceptor names.
Commit added fallback support to krb5 rd req but acquiring acceptor creds for a host based name could still fail within check keytab in the krb5 mech.
Add an internal libkrb5 API k5 kt have match to check for a matching keytab entry with canonicalization and use it in check keytab.
Add a library internal function k5 sname wildcard host to share logic between rd req and k5 kt have match.
ticket 8971 new.
tags pullup.
target version 1.19.",0.0,
473,473,515,,,,,,,,,https://github.com/krb5/krb5/commit/fe2a9b6254e86a761dd7f79671ee0fc8a754edcd,,,negative,"Fix all-liblinks when symlinks are unsupported

After building libraries, we make links to a central directory so that
programs and other libraries can be built against them.  These links
were changed from symlinks to hard links by commit
24311fa2b4b95597695560144313debe0211e968, and were reverted to
symlinks by commit 6e0bfbc787509dbaac4947a76e07a2bd6ba7956d.

As part of the first commit, the links to .so and .so.X were made
within the central directory instead of directly to the library build
directory.  However, the dependencies were not updated to ensure that
the link target is created before the link, so when $(LN_S) is ""cp
-pR"" and not ""ln -s"", the build steps could be executed out of order
and fail.  This part of the first commit was not reverted in the
second commit.  Revert it now so that the dependencies match the
links.

ticket: 8976",,https://github.com/krb5/krb5,,,,,,,,,,"Fix all liblinks when symlinks are unsupported.
After building libraries we make links to a central directory so that programs and other libraries can be built against them.
These links were changed from symlinks to hard links by commit and were reverted to symlinks by commit.
As part of the first commit the links to .so and .so.X were made within the central directory instead of directly to the library build directory.
However the dependencies were not updated to ensure that the link target is created before the link so when LN S is cp pR and not ln s the build steps could be executed out of order and fail.
This part of the first commit was not reverted in the second commit.
Revert it now so that the dependencies match the links.
ticket 8976.",0.0,
474,474,516,,,,,,,,,https://github.com/krb5/krb5/commit/fd005a1967510004c9197f7da9f1d85ee81f4734,,,negative,"Fix runstatedir makefile substitution

Set localstatedir and runstatedir in config/pre.in so that the default
runstatedir value of ${localstatedir}/run works.  Reported by Mike
Jetzer.

ticket: 8975
tags: pullup
target_version: 1.19
target_version: 1.18-next
target_version: 1.17-next",,https://github.com/krb5/krb5,,,,,,,,,,"Fix runstatedir makefile substitution.
Set localstatedir and runstatedir in config pre.in so that the default runstatedir value of localstatedir run works.
Reported by Mike Jetzer.
ticket 8975.
tags pullup.
target version 1.19.
target version 1.18 next.
target version 1.17 next.",0.0,
475,475,517,,,,,,,,,https://github.com/krb5/krb5/commit/15f8c4fd7d62d07ea2759a7b6d684c000430559e,,,negative,"Revert dns_canonicalize_hostname default to true

Field testing of dns_canonicalize_hostname=fallback (ticket 8911)
revealed more disruptive edge cases than anticipated.  Many were fixed
by ticket 8930, but host-based GSS initiator names were recently
discovered to not work, and one other edge case could not be resolved
without a change to external code.

Restore the default to true for now.  Set the value to fallback in the
test suite, to continue testing the desired configuration and to avoid
restoring tests/resolve.

ticket: 8973 (new)
tags: pullup
target_version: 1.19",,https://github.com/krb5/krb5,,,,,,,,,,"Revert dns canonicalize hostname default to true.
Field testing of dns canonicalize hostname fallback ticket 8911 revealed more disruptive edge cases than anticipated.
Many were fixed by ticket 8930 but host based GSS initiator names were recently discovered to not work and one other edge case could not be resolved without a change to external code.
Restore the default to true for now.
Set the value to fallback in the test suite to continue testing the desired configuration and to avoid restoring tests resolve.
ticket 8973 new.
tags pullup.
target version 1.19.",0.0,
476,476,518,,,,,,,,,https://github.com/krb5/krb5/commit/722b77ba31ea4e2937e6820f0fe4a19a7445e8fc,,,negative,"Preserve cred order in memory ccache type

In the memory credential cache type, add new creds to the tail of the
list so that iteration does not reverse the order.",,https://github.com/krb5/krb5,,,,,,,,,,"Preserve cred order in memory ccache type.
In the memory credential cache type add new creds to the tail of the.
list so that iteration does not reverse the order.",1.0,"['memory', 'memory', 'credential']"
477,477,519,,,,,,,,,https://github.com/krb5/krb5/commit/0d56740ab9fcc40dc7f46c6fbebdf8f1214f9d96,,,negative,"Add support for start_realm cache config

When making TGS requests, if start_realm is set in the cache, use the
named realm to look up the initial TGT for referral or cross-realm
requests.  (Also correct a comment in struct _tkt_creds_context: the
ccache field is an owner pointer, not an alias.)

Add an internal API k5_cc_store_primary_cred(), which sets start_realm
if the cred being stored is a TGT for a realm other than the client
realm.  Use this API when acquiring initial tickets with a
caller-specified output ccache, when renewing or validating tickets
with kinit, when accepting a delegated credential in a GSS context,
and when storing a single cred with kvno --out-cache.

ticket: 8332
tags: pullup
target_version: 1.19",,https://github.com/krb5/krb5,,,,,,,,,,"Add support for start realm cache config.
When making TGS requests if start realm is set in the cache use the named realm to look up the initial TGT for referral or cross realm requests.
Also correct a comment in struct tkt creds context the ccache field is an owner pointer not an alias.
Add an internal API k5 cc store primary cred which sets start realm if the cred being stored is a TGT for a realm other than the client realm.
Use this API when acquiring initial tickets with a caller specified output ccache when renewing or validating tickets with kinit when accepting a delegated credential in a GSS context and when storing a single cred with kvno out cache.
ticket 8332.
tags pullup.
target version 1.19.",1.0,['credential']
478,478,520,,,,,,,,,https://github.com/krb5/krb5/commit/0fdc59ef5e538fdf0fd65fa190483e84289f66c1,,,negative,"Update t_rcache.c for new replay cache interface

Commit dcb853ac32779b173f39e19c0f24b0087de8577 changed the internal
replay cache interface.  Update tests/threads/t_rcache.c to match.

[ghudson@mit.edu: edited commit message; simplified code changes;
added k5_rc_store to libkrb5 export list]",,https://github.com/krb5/krb5,,,,,,,,,,"Update t rcache.c for new replay cache interface.
Commit changed the internal replay cache interface.
Update tests threads t rcache.c to match.
E mail edited commit message simplified code changes.
added k5 rc store to libkrb5 export list.",1.0,"['replay', 'replay']"
479,479,523,,,,,,,,,https://github.com/krb5/krb5/commit/0293a896735fcfbf3eff37e731ebac37872f18aa,,,negative,"make regen

Also update config.guess and config.sub from
https://git.savannah.gnu.org/cgit/config.git commit
888c8e3d5f7bf7464bba83aaf54304a956eefa60.",,https://github.com/krb5/krb5,,,,,,,,,,"make regen.
Also update config.guess and config.sub from.
URL commit.
888c8e3d5f7bf7464bba83aaf54304a956eefa60.",0.0,
480,480,524,,,,,,,,,https://github.com/krb5/krb5/commit/1c1037a9af769cc4df9c5696651c1ec2d21038b2,,,negative,Updates for krb5-1.20-prerelease,,https://github.com/krb5/krb5,,,,,,,,,,Updates for krb5 1.20 prerelease.,0.0,
481,481,525,,,,,,,,,https://github.com/krb5/krb5/commit/f2203972ae4311a530282fccec4effe1dc3768f5,,,negative,Update features list for 1.19,,https://github.com/krb5/krb5,,,,,,,,,,Update features list for 1.19.,0.0,
482,482,526,,,,,,,,,https://github.com/krb5/krb5/commit/2c30f41745d29ed7f06028bba452355b328e8fba,,,negative,"Improve duplicate checking in gss_add_cred()

If both input and output credentials are provided to gss_add_cred() or
gss_add_cred_from(), check for a duplicate element in the input handle.

[ghudson@mit.edu: reorganized code; rewrote commit message]

ticket: 8966 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Improve duplicate checking in gss add cred.
If both input and output credentials are provided to gss add cred or gss add cred from check for a duplicate element in the input handle.
E mail reorganized code rewrote commit message.
ticket 8966 new.",0.0,
483,483,527,,,,,,,,,https://github.com/krb5/krb5/commit/1bc5f76d2e7013b8771e3bd9960c82642ba0b467,,,negative,"Install shared libraries as executable

RPM expects this behavior, and systems with contrary policies (like
Debian) address permissions at the packaging layer.  Most other build
systems appear to install shared libraries as executable.

[ghudson@mit.edu: edited commit message]

ticket: 8965 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Install shared libraries as executable.
RPM expects this behavior and systems with contrary policies like Debian address permissions at the packaging layer.
Most other build systems appear to install shared libraries as executable.
E mail edited commit message.
ticket 8965 new.",0.0,
484,484,528,,,,,,,,,https://github.com/krb5/krb5/commit/d82de27053ae8110b65e71480db8f8504ae53903,,,negative,"Add GSS credential store documentation

Add documentation for gss_acquire_cred_from() and
gss_store_cred_into(), including descriptions of the currently
supported options for the krb5 mechanism.

ticket: 8964 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Add GSS credential store documentation.
Add documentation for gss acquire cred from and gss store cred into including descriptions of the currently supported options for the krb5 mechanism.
ticket 8964 new.",1.0,['credential']
485,485,529,,,,,,,,,https://github.com/krb5/krb5/commit/adbf73c507f383380c55d2ba9fa1ad6f30545bec,,,negative,"Add verify option to cred store

The verify option instructs acquire_cred_from to verify a credential
obtained via a password, using the default keytab or the keytab
provided via the ""keytab"" key.  The value is a principal name (in
string form) for a key in the selected keytab, or the empty string to
use any host key in the keytab.

[ghudson@mit.edu: fleshed out tests; adjusted verify params contracts;
rewrote commit message]

ticket: 8963 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Add verify option to cred store.
The verify option instructs acquire cred from to verify a credential obtained via a password using the default keytab or the keytab provided via the keytab key.
The value is a principal name in string form for a key in the selected keytab or the empty string to use any host key in the keytab.
E mail fleshed out tests adjusted verify params contracts.
rewrote commit message.
ticket 8963 new.",1.0,"['verify', 'verify', 'verify', 'credential', 'password', 'verify']"
486,486,530,,,,,,,,,https://github.com/krb5/krb5/commit/f54b49d06cd2e468abb499df1b9d577054a4fb20,,,negative,"Add password option to cred store

Add an option for initial creds acquisition via password to
gss_acquire_cred_from(), storing credentials in a new MEMORY ccache.

Move existing cred store tests from t_gssapi.py to t_credstore.py and
add new ones for password acquisition.

[ghudson@mit.edu: squashed commits; rewrote commit message]

ticket: 8962 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Add password option to cred store.
Add an option for initial creds acquisition via password to gss acquire cred from storing credentials in a new MEMORY ccache.
Move existing cred store tests from t gssapi.py to t credstore.py and add new ones for password acquisition.
E mail squashed commits rewrote commit message.
ticket 8962 new.",1.0,"['password', 'password', 'MEMORY', 'password']"
487,487,531,,,,,,,,,https://github.com/krb5/krb5/commit/938b535145a9cc312e42f99782af75067cfec588,,,negative,"Fix gss_acquire_cred_from() IAKERB handling

Add a separate IAKERB entry point for gss_acquire_cred_from() and
correctly pass down the iakerb flag to acquire_cred_context(), so that
we don't attempt to acquire initial credentials directly.

[ghudson@mit.edu: rebased earlier in sequence; rewrote commit message]

ticket: 8961 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Fix gss acquire cred from IAKERB handling.
Add a separate IAKERB entry point for gss acquire cred from and correctly pass down the iakerb flag to acquire cred context so that we don t attempt to acquire initial credentials directly.
E mail rebased earlier in sequence rewrote commit message.
ticket 8961 new.",0.0,
488,488,532,,,,,,,,,https://github.com/krb5/krb5/commit/d9443a58cd364349b7d764f4e997f3af7d979a87,,,negative,"Be stricter about ASN.1 decoding

Remove support for BER indefinite-length encodings, which are not
valid in DER.  Enforce validity of digits in GeneralizedTime values.
Reject signed integer encodings large enough to possibly overflow
intmax_t, and use regular arithmetic to avoid the undefined behavior
of left-shifting a negative integer.  Reject trailing garbage in
explicitly-tagged single values.  Remove the unnecessary
KRB5_GENEROUS_LR_TYPE workaround; our KDC doesn't generate last-req
information, so the broken pre-2000 encoding behavior had no impact.

[ghudson@mit.edu: edited commit message]",,https://github.com/krb5/krb5,,,,,,,,,,"Be stricter about ASN.1 decoding.
Remove support for BER indefinite length encodings which are not valid in DER.
Enforce validity of digits in GeneralizedTime values.
Reject signed integer encodings large enough to possibly overflow intmax t and use regular arithmetic to avoid the undefined behavior of left shifting a negative integer.
Reject trailing garbage in explicitly tagged single values.
Remove the unnecessary KRB5 GENEROUS LR TYPE workaround our KDC doesn t generate last req information so the broken pre 2000 encoding behavior had no impact.
E mail edited commit message.",1.0,"['valid', 'overflow', 'undefined behavior']"
489,489,533,,,,,,,,,https://github.com/krb5/krb5/commit/f78edbe30816f049e1360cb6e203fabfdf7b98df,,,negative,"Fix compatibility with upcoming autoconf 2.70

Mainline autoconf generates no shell code for AC_CONFIG_AUX_DIR().
Call it unconditionally to avoid a syntax error.

[ghudson@mit.edu: rewrote commit message]

ticket: 8960 (new)
tags: pullup
target_version: 1.18-next
target_version: 1.17-next",,https://github.com/krb5/krb5,,,,,,,,,,"Fix compatibility with upcoming autoconf 2.70.
Mainline autoconf generates no shell code for AC CONFIG AUX DIR.
Call it unconditionally to avoid a syntax error.
E mail rewrote commit message.
ticket 8960 new.
tags pullup.
target version 1.18 next.
target version 1.17 next.",0.0,
490,490,534,,,,,,,,,https://github.com/krb5/krb5/commit/04c2b7415d62913845f31dc5b0d4051291e4d6d4,,,negative,"Allow KDC to canonicalize realm in TGS client

Active Directory canonicalizes the srealm field of TGS replies,
whether or not the client requests canonicalization.  Allow this for
regular TGS and S4U2Self referrals queries by comparing only the name
part of the service principal.  The S4U2Proxy code is already correct.

ticket: 8943 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Allow KDC to canonicalize realm in TGS client.
Active Directory canonicalizes the srealm field of TGS replies whether or not the client requests canonicalization.
Allow this for regular TGS and referrals queries by comparing only the name part of the service principal.
The code is already correct.
ticket 8943 new.",0.0,
491,491,535,,,,,,,,,https://github.com/krb5/krb5/commit/34ba67714db6079021c66a2bbd398dd23968d438,,,negative,Avoid daylight savings time issues in tests,,https://github.com/krb5/krb5,,,,,,,,,,Avoid daylight savings time issues in tests.,0.0,
492,492,536,,,,,,,,,https://github.com/krb5/krb5/commit/3b163eed1cf1f55dd4a7bc6d6fffc34f55695b00,,,negative,"Move more KDC checks to validate_tgs_request()

Move the following validity checks:

* the INVALID ticket flag check from kdc_process_tgs_req()
* the lineage check from process_tgs_req()
* the user-to-user second ticket client check from process_tgs_req()
* all S4U2Self validity checks from kdc_process_s4u2self_req()
* S4U2Proxy validity checks (but not KDB authorization checks) from
  kdc_process_s4u2proxy_req()

In process_tgs_req(), call validate_tgs_request() after
kdc_process_s4u2self_req() and decrypt_2ndtkt() so that their outputs
can be used as validation inputs.  Add stkt and is_crossrealm locals
for convenience, and remove st_idx.

There are some minor behavior changes:

* For invalid S4U2Self request options, the status string is changed
  from ""INVALID AS OPTIONS"" to ""INVALID S4U2SELF OPTIONS"".

* For a header ticket with the INVALID flag, the reply code is changed
  to KRB_AP_ERR_TKT_NYV (as specified in RFC 4120) and the status
  string to ""TICKET NOT VALID"".

* For a lineage check failure, the explicit KDC log is removed, and
  the status string is changed to ""INVALID LINEAGE"".

* For a user-to-user second ticket client mismatch, the explicit audit
  call is removed, and the log message does not include the second
  ticket client.

* e_data returned from the KDB check_policy_as() method will be
  included in the error for S4U2Self requests.

ticket: 8953 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Move more KDC checks to validate tgs request.
Move the following validity checks.
the INVALID ticket flag check from kdc process tgs req.
the lineage check from process tgs req.
the user to user second ticket client check from process tgs req.
all validity checks from kdc process req.
validity checks but not KDB authorization checks from.
kdc process req.
In process tgs req call validate tgs request after kdc process req and decrypt 2ndtkt so that their outputs can be used as validation inputs.
Add stkt and is crossrealm locals for convenience and remove st idx.
There are some minor behavior changes.
For invalid request options the status string is changed from INVALID AS OPTIONS to INVALID OPTIONS.
For a header ticket with the INVALID flag the reply code is changed to KRB AP ERR TKT NYV as specified in RFC 4120 and the status string to TICKET NOT VALID.
For a lineage check failure the explicit KDC log is removed and the status string is changed to INVALID LINEAGE.
For a user to user second ticket client mismatch the explicit audit call is removed and the log message does not include the second ticket client.
e data returned from the KDB check policy as method will be included in the error for requests.
ticket 8953 new.",1.0,"['INVALID', 'invalid', 'INVALID', 'INVALID', 'INVALID', 'VALID', 'INVALID']"
493,493,537,,,,,,,,,https://github.com/krb5/krb5/commit/6dbf0b755bb1d8254c881cf21717441cc2e880b8,,,negative,"Use PKG_CHECK_MODULES for system library com_err

[ghudson@mit.edu: whitespace changes; reverted man page change]

ticket: 8957 (new)",,https://github.com/krb5/krb5,,,,,,,,,,"Use PKG CHECK MODULES for system library com err.
E mail whitespace changes reverted man page change.
ticket 8957 new.",0.0,
